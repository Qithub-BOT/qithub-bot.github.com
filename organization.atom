<?xml version="1.0" encoding="UTF-8"?>
<feed xml:lang="ja-JP" xmlns="http://www.w3.org/2005/Atom">
  <id>tag:qiita.com,2005:/organizations/qiitadon/activities</id>
  <link rel="alternate" type="text/html" href="https://qiita.com"/>
  <link rel="self" type="application/atom+xml" href="https://qiita.com/organizations/qiitadon/activities.atom"/>
  <title>Qiitadonユーザー会 の記事</title>
  <description>Qiita で Qiitadonユーザー会 に所属するユーザの最近の記事</description>
  <updated>2020-12-22T15:18:20+09:00</updated>
  <link>https://qiita.com/organizations/qiitadon</link>
  <entry>
    <id>tag:qiita.com,2005:PublicArticle/1364259</id>
    <published>2020-12-22T15:18:20+09:00</published>
    <updated>2020-12-22T17:42:09+09:00</updated>
    <link rel="alternate" type="text/html" href="https://qiita.com/KEINOS/items/2c7988bfaae8c38a74dc"/>
    <url>https://qiita.com/KEINOS/items/2c7988bfaae8c38a74dc</url>
    <title>泥棒のテクニックから学ぶコード修正</title>
    <content type="html">
&lt;h1&gt;
&lt;span id="コード修正のベストプラクティスと言うより-tips" class="fragment"&gt;&lt;/span&gt;&lt;a href="#%E3%82%B3%E3%83%BC%E3%83%89%E4%BF%AE%E6%AD%A3%E3%81%AE%E3%83%99%E3%82%B9%E3%83%88%E3%83%97%E3%83%A9%E3%82%AF%E3%83%86%E3%82%A3%E3%82%B9%E3%81%A8%E8%A8%80%E3%81%86%E3%82%88%E3%82%8A-tips"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;コード修正のベストプラクティス（と言うより TIPS）&lt;/h1&gt;

&lt;h2&gt;
&lt;span id="tl-dr" class="fragment"&gt;&lt;/span&gt;&lt;a href="#tl-dr"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;TL; DR&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;泥棒がタンスを開ける順番のように、コード修正も&lt;strong&gt;解析結果の下から順に修正&lt;/strong&gt;していく。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;例えば、下記の場合は先に 324 行目から潰して（修正して）いくと、312 行目のエラー箇所がズレない。&lt;/p&gt;

&lt;div class="code-frame" data-lang="shell-session"&gt;
&lt;div class="code-lang"&gt;&lt;span class="bold"&gt;シェルスクリプトの静的解析結果の例（２カ所でエラーが発生している）&lt;/span&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gp"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;shellcheck &lt;span class="nt"&gt;-x&lt;/span&gt; &lt;span class="nt"&gt;-s&lt;/span&gt; sh &lt;span class="k"&gt;*&lt;/span&gt;/&lt;span class="k"&gt;*&lt;/span&gt;.sh
&lt;span class="go"&gt;In ./tests/run-tests.sh line 312:
&lt;/span&gt;&lt;span class="gp"&gt;    php --version | grep Xdebug 2&amp;gt;&lt;/span&gt;/dev/null 1&amp;gt;/dev/null &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
&lt;span class="go"&gt;                                                        ^-- SC2015: Note that A &amp;amp;&amp;amp; B || C is not if-then-else. C may run when A is true.

In ./tests/run-tests.sh line 324:
&lt;/span&gt;&lt;span class="gp"&gt;        . "$&lt;/span&gt;path_file_conf_coveralls&lt;span class="s2"&gt;"
&lt;/span&gt;&lt;span class="go"&gt;          ^-------------------------^ SC1091: Not following: ../tests/conf/COVERALLS.env: openBinaryFile: does not exist (No such file or directory)
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;h2&gt;
&lt;span id="ts-dr" class="fragment"&gt;&lt;/span&gt;&lt;a href="#ts-dr"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;TS; DR&lt;/h2&gt;

&lt;p&gt;静的解析や Linter などの結果を見ながら修正する際に、いまさらながら「泥棒のテクニック」が使えることに気付きました。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;泥棒ってタンスをチェックする時に下の段から開けて行く&lt;/strong&gt;んですって。ゲーム実況でアイテム探しをしているシーンを観て知りました。&lt;/p&gt;

&lt;p&gt;同じように、&lt;strong&gt;解析結果で指摘されたコード行を「下の段から修正していく」ことで効率よく修正できる&lt;/strong&gt;んですね。（同じファイルに複数の修正箇所がある場合に限る）&lt;/p&gt;

&lt;p&gt;今まで、アホみたいに上から修正していました。修正するたびに対象行がズレていくから、迷子になるたび解析を走らせてたのです。そう、タンスを上から開けては閉めて次の段をチェックするがごとく。いやはや。&lt;/p&gt;

&lt;p&gt;コーディングが早い人って、こう言う細かいことがサラッとできてるんだろうなぁ。&lt;/p&gt;
</content>
    <published>2020-12-22T15:18:20Z</published>
    <updated>2020-12-22T17:42:09Z</updated>
    <author>
      <name>KEINOS</name>
    </author>
  </entry>
  <entry>
    <id>tag:qiita.com,2005:PublicArticle/1363047</id>
    <published>2020-12-20T22:22:00+09:00</published>
    <updated>2020-12-20T22:37:38+09:00</updated>
    <link rel="alternate" type="text/html" href="https://qiita.com/kojix2/items/565fc793cde1ba8acd6c"/>
    <url>https://qiita.com/kojix2/items/565fc793cde1ba8acd6c</url>
    <title>RubyとC++をつなぐRiceを理解したいのでAnkaneさんのプロジェクトmorph-rubyをながめる</title>
    <content type="html">&lt;p&gt;おことわり&lt;br&gt;
　この記事は、C++もRiceもわかっていない人間が適当に書いた記事です。&lt;br&gt;
　正確な情報が知りたい人は原典を当たってくださいな！&lt;/p&gt;

&lt;h2&gt;
&lt;span id="riceとは何" class="fragment"&gt;&lt;/span&gt;&lt;a href="#rice%E3%81%A8%E3%81%AF%E4%BD%95"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;Riceとは何？&lt;/h2&gt;

&lt;p&gt;RubyとC++をつなぐ方法で一番有名なのがRiceです。最近は、Andrew Kane氏が、積極的にRiceを利用してC++のライブラリのバインディングを作成したり、RubyのC++拡張を作成したりしています。とくにRubyでDeep Learningを実行する最も有名なライブラリであるTorch.rbはC++で書かれており、Riceについてもちょっと触ってみないといけないなと思ったのでした。&lt;/p&gt;

&lt;h2&gt;
&lt;span id="riceの日本語チュートリアル" class="fragment"&gt;&lt;/span&gt;&lt;a href="#rice%E3%81%AE%E6%97%A5%E6%9C%AC%E8%AA%9E%E3%83%81%E3%83%A5%E3%83%BC%E3%83%88%E3%83%AA%E3%82%A2%E3%83%AB"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;Riceの日本語チュートリアル&lt;/h2&gt;

&lt;p&gt;Riceの日本語の記事はほとんどないですが、次のページが参考になります。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://qiita.com/S_H_/items/3d0aa25e461223030920" id="reference-cfa189a41d1b23b55b8b"&gt;C++で作るRuby拡張&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
&lt;span id="ankaneさんのプロジェクトからriceを使ったgemの使い方を学習する" class="fragment"&gt;&lt;/span&gt;&lt;a href="#ankane%E3%81%95%E3%82%93%E3%81%AE%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%81%8B%E3%82%89rice%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%9Fgem%E3%81%AE%E4%BD%BF%E3%81%84%E6%96%B9%E3%82%92%E5%AD%A6%E7%BF%92%E3%81%99%E3%82%8B"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;Ankaneさんのプロジェクトから、Riceを使ったGemの使い方を学習する&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/ankane/morph-ruby/blob/master/morph-ruby.gemspec" rel="nofollow noopener" target="_blank"&gt;morpht-ruby&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;を例にとってRiceがどんな風にプロジェクトに使われているか観察してみます。&lt;br&gt;
まずは&lt;a href="https://github.com/ankane/morph-ruby/blob/master/morph-ruby.gemspec" rel="nofollow noopener" target="_blank"&gt;gemspec&lt;/a&gt;を見てみます。&lt;/p&gt;

&lt;h3&gt;
&lt;span id="gemspec" class="fragment"&gt;&lt;/span&gt;&lt;a href="#gemspec"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;Gemspec&lt;/h3&gt;

&lt;div class="code-frame" data-lang="ruby"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;require_relative&lt;/span&gt; &lt;span class="s2"&gt;"lib/morph/version"&lt;/span&gt;

&lt;span class="no"&gt;Gem&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Specification&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;spec&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
&lt;span class="c1"&gt;# 中略&lt;/span&gt;
  &lt;span class="n"&gt;spec&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;files&lt;/span&gt;         &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Dir&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"*.{md,txt}"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"{ext,lib}/**/*"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="n"&gt;spec&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;require_path&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"lib"&lt;/span&gt;
  &lt;span class="n"&gt;spec&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;extensions&lt;/span&gt;    &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"ext/morph/extconf.rb"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

  &lt;span class="n"&gt;spec&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;required_ruby_version&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"&amp;gt;= 2.5"&lt;/span&gt;

  &lt;span class="n"&gt;spec&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;add_dependency&lt;/span&gt; &lt;span class="s2"&gt;"rice"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"&amp;gt;= 2.2"&lt;/span&gt;
&lt;span class="c1"&gt;# 中略&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;spec.files&lt;/code&gt; の中に、&lt;code&gt;ext&lt;/code&gt;を含める&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;spec.extensions&lt;/code&gt; で &lt;code&gt;["ext/morph/extconf.rb"]&lt;/code&gt; を指定している&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;spec.add_dependency&lt;/code&gt; で &lt;code&gt;rice&lt;/code&gt; を指定している&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;といった感じで書かれています。次に&lt;code&gt;lib&lt;/code&gt;以下のRubyのファイルを見てみましょう。&lt;/p&gt;

&lt;h3&gt;
&lt;span id="rubyのファイル" class="fragment"&gt;&lt;/span&gt;&lt;a href="#ruby%E3%81%AE%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;Rubyのファイル&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://github.com/ankane/morph-ruby/blob/master/lib/morph-ruby.rb" rel="nofollow noopener" target="_blank"&gt;lib/morph-ruby.rb&lt;/a&gt;&lt;/p&gt;

&lt;div class="code-frame" data-lang="ruby"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;# ext&lt;/span&gt;
&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s2"&gt;"morph/ext"&lt;/span&gt;

&lt;span class="c1"&gt;# modules&lt;/span&gt;
&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s2"&gt;"morph/version"&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;5行目は、バージョン定数を呼んでいるだけなので、実質的に、&lt;code&gt;requrire "morph/ext"&lt;/code&gt; だけです。ここでは &lt;code&gt;ext.so&lt;/code&gt; （共有ライブラリの拡張子はプラットフォームによって異なる）を読み込んでいると思われます。&lt;/p&gt;

&lt;h3&gt;
&lt;span id="extconfrb" class="fragment"&gt;&lt;/span&gt;&lt;a href="#extconfrb"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;extconf.rb&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;ext/morph/&lt;/code&gt; を見ると、2つだけファイルがあります。&lt;code&gt;extconf.rb&lt;/code&gt; と &lt;code&gt;ext.cpp&lt;/code&gt; です。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;extconf.rb&lt;/code&gt; はMakefileを生成します。&lt;code&gt;spec.extensions&lt;/code&gt;で指定されているファイルですね。ここでは &lt;a href="https://docs.ruby-lang.org/ja/latest/method/Kernel/i/have_library.html" rel="nofollow noopener" target="_blank"&gt;&lt;code&gt;have_library&lt;/code&gt;&lt;/a&gt; を用いて依存するライブラリが存在するかどうかを確認しているようです。C言語の拡張を書く&lt;code&gt;mkmf&lt;/code&gt;ライブラリと同じものだと思われます。またグローバル変数 &lt;code&gt;$CXXFLAGS&lt;/code&gt; を用いることによって、コンパイル時のフラグを指定することができるようです。C++17というのはC++の規格の一つっぽいです。&lt;/p&gt;

&lt;div class="code-frame" data-lang="ruby"&gt;
&lt;div class="code-lang"&gt;&lt;span class="bold"&gt;extconf.rb&lt;/span&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s2"&gt;"mkmf-rice"&lt;/span&gt;

&lt;span class="nb"&gt;abort&lt;/span&gt; &lt;span class="s2"&gt;"Missing stdc++"&lt;/span&gt; &lt;span class="k"&gt;unless&lt;/span&gt; &lt;span class="n"&gt;have_library&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"stdc++"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;abort&lt;/span&gt; &lt;span class="s2"&gt;"Missing ntl"&lt;/span&gt; &lt;span class="k"&gt;unless&lt;/span&gt; &lt;span class="n"&gt;have_library&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"ntl"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;abort&lt;/span&gt; &lt;span class="s2"&gt;"Missing helib"&lt;/span&gt; &lt;span class="k"&gt;unless&lt;/span&gt; &lt;span class="n"&gt;have_library&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"helib"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;abort&lt;/span&gt; &lt;span class="s2"&gt;"Missing morph"&lt;/span&gt; &lt;span class="k"&gt;unless&lt;/span&gt; &lt;span class="n"&gt;have_library&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"morph"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="vg"&gt;$CXXFLAGS&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s2"&gt;" -std=c++17"&lt;/span&gt;

&lt;span class="n"&gt;create_makefile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"morph/ext"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;次に、いよいよ本丸の &lt;code&gt;ext.cpp&lt;/code&gt; を見ます&lt;/p&gt;

&lt;h3&gt;
&lt;span id="extcpp" class="fragment"&gt;&lt;/span&gt;&lt;a href="#extcpp"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;ext.cpp&lt;/h3&gt;

&lt;div class="code-frame" data-lang="ruby"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;#include &amp;lt;morph/client.h&amp;gt;&lt;/span&gt;

&lt;span class="c1"&gt;#include &amp;lt;rice/Array.hpp&amp;gt;&lt;/span&gt;
&lt;span class="c1"&gt;#include &amp;lt;rice/Class.hpp&amp;gt;&lt;/span&gt;
&lt;span class="c1"&gt;#include &amp;lt;rice/Constructor.hpp&amp;gt;&lt;/span&gt;
&lt;span class="c1"&gt;#include &amp;lt;rice/Hash.hpp&amp;gt;&lt;/span&gt;
&lt;span class="c1"&gt;#include &amp;lt;rice/Module.hpp&amp;gt;&lt;/span&gt;

&lt;span class="n"&gt;using&lt;/span&gt; &lt;span class="n"&gt;namespace&lt;/span&gt; &lt;span class="no"&gt;Rice&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="n"&gt;extern&lt;/span&gt; &lt;span class="s2"&gt;"C"&lt;/span&gt;
&lt;span class="n"&gt;void&lt;/span&gt; &lt;span class="no"&gt;Init_ext&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="no"&gt;Module&lt;/span&gt; &lt;span class="n"&gt;rb_mMorph&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;define_module&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Morph"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="n"&gt;define_class_under&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;morph&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Client&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rb_mMorph&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"Client"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;define_constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;Constructor&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;morph&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Client&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;define_method&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"keygen"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;morph&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Client&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;keygen&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;define_method&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"set"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;morph&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Client&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;set&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;define_method&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"flushall"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;morph&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Client&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;flushall&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;define_method&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"dbsize"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;morph&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Client&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;dbsize&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;define_method&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"info"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;morph&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Client&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;define_method&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="s2"&gt;"get"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;[](&lt;/span&gt;&lt;span class="n"&gt;morph&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Client&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;const&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;auto&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="sr"&gt;//&lt;/span&gt;&lt;span class="err"&gt; TODO f&lt;/span&gt;&lt;span class="sr"&gt;ix&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="no"&gt;C&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="n"&gt;library&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;empty&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="no"&gt;Nil&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="no"&gt;String&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;c_str&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
      &lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;define_method&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="s2"&gt;"keys"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;[](&lt;/span&gt;&lt;span class="n"&gt;morph&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Client&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;const&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;pattern&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;auto&lt;/span&gt; &lt;span class="n"&gt;keys&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pattern&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="no"&gt;Array&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;auto&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="sr"&gt;//&lt;/span&gt;&lt;span class="err"&gt; TODO f&lt;/span&gt;&lt;span class="sr"&gt;ix&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="no"&gt;C&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="n"&gt;library&lt;/span&gt;
          &lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;c_str&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;C++は読めませんが、眺めているだけでも伝わってくるものはあります。最初に&lt;a href="https://github.com/ankane/morph/blob/master/src/client.h" rel="nofollow noopener" target="_blank"&gt;morphのヘッダーファイル&lt;/a&gt;を指定しています。&lt;/p&gt;

&lt;div class="code-frame" data-lang="text"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;#include &amp;lt;morph/client.h&amp;gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;次に、Rubyのモジュールやクラスや配列やハッシュを使う用意をしているのだと思われます。&lt;/p&gt;

&lt;div class="code-frame" data-lang="text"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;#include &amp;lt;rice/Array.hpp&amp;gt;
#include &amp;lt;rice/Class.hpp&amp;gt;
#include &amp;lt;rice/Constructor.hpp&amp;gt;
#include &amp;lt;rice/Hash.hpp&amp;gt;
#include &amp;lt;rice/Module.hpp&amp;gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;その次はよくわかりませんが、おまじないだと考えておいても間違いないでしょう。&lt;/p&gt;

&lt;div class="code-frame" data-lang="text"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;extern "C"
void Init_ext() {
}
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;そして&lt;code&gt;Morph&lt;/code&gt;というモジュールを規定し、&lt;/p&gt;

&lt;div class="code-frame" data-lang="c++"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;Module&lt;/span&gt; &lt;span class="n"&gt;rb_mMorph&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;define_module&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Morph"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code&gt;Client&lt;/code&gt;というクラスに、コンストラクタを定義したり、種々のメソッドを規定しているのでしょう。&lt;/p&gt;

&lt;div class="code-frame" data-lang="C++"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;define_class_under&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;morph&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Client&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rb_mMorph&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"Client"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;define_constructor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Constructor&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;morph&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Client&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;define_method&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"keygen"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;morph&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Client&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;keygen&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;define_method&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"set"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;morph&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Client&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;set&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;define_method&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"flushall"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;morph&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Client&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;flushall&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;define_method&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"dbsize"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;morph&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Client&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;dbsize&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;define_method&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"info"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;morph&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Client&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;引数や戻り値を取るようなメソッドの場合は多少複雑なのでしょう。&lt;/p&gt;

&lt;p&gt;ここはおそらく戻り値がstringの場合でしょう。&lt;/p&gt;

&lt;div class="code-frame" data-lang="C++"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;define_method&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="s"&gt;"get"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;[](&lt;/span&gt;&lt;span class="n"&gt;morph&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Client&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;auto&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="c1"&gt;// TODO fix in C++ library&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;empty&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="n"&gt;Nil&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;c_str&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
      &lt;span class="p"&gt;})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;こちらは戻り値が配列なのでしょう。&lt;/p&gt;

&lt;div class="code-frame" data-lang="C++"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;define_method&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
      &lt;span class="s"&gt;"keys"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;[](&lt;/span&gt;&lt;span class="n"&gt;morph&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Client&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;pattern&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;auto&lt;/span&gt; &lt;span class="n"&gt;keys&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pattern&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;Array&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;auto&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="c1"&gt;// TODO fix in C++ library&lt;/span&gt;
          &lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;c_str&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;こうやって見ていくと、FFIの場合とは違って、Riceではある程度は自分でデータのやり取りを書かなければいけないようですね。一方で、RubyのモジュールやらクラスやらをC++で生成できるということで、これはFFIとはかなり方向性が違うので、頭を切り替えていく必要があります。&lt;/p&gt;

&lt;h2&gt;
&lt;span id="rakefile" class="fragment"&gt;&lt;/span&gt;&lt;a href="#rakefile"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;Rakefile&lt;/h2&gt;

&lt;p&gt;最後にRakefileを見てみます。&lt;code&gt;rake/extensiontask&lt;/code&gt; を追加すればよいことがわかります。remove_extですが、macOS以外の環境では動かないかも知れませんね。&lt;/p&gt;

&lt;div class="code-frame" data-lang="ruby"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s2"&gt;"bundler/gem_tasks"&lt;/span&gt;
&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s2"&gt;"rake/testtask"&lt;/span&gt;
&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s2"&gt;"rake/extensiontask"&lt;/span&gt;

&lt;span class="n"&gt;task&lt;/span&gt; &lt;span class="ss"&gt;default: :test&lt;/span&gt;
&lt;span class="no"&gt;Rake&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;TestTask&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
  &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;libs&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s2"&gt;"test"&lt;/span&gt;
  &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;pattern&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"test/**/*_test.rb"&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="no"&gt;Rake&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;ExtensionTask&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"morph"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;ext&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
  &lt;span class="n"&gt;ext&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"ext"&lt;/span&gt;
  &lt;span class="n"&gt;ext&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;lib_dir&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"lib/morph"&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="n"&gt;task&lt;/span&gt; &lt;span class="ss"&gt;:remove_ext&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"lib/morph/ext.bundle"&lt;/span&gt;
  &lt;span class="no"&gt;File&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;unlink&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="no"&gt;File&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;exist?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="no"&gt;Rake&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Task&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"build"&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nf"&gt;enhance&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:remove_ext&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2&gt;
&lt;span id="全体のファイル構成" class="fragment"&gt;&lt;/span&gt;&lt;a href="#%E5%85%A8%E4%BD%93%E3%81%AE%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E6%A7%8B%E6%88%90"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;全体のファイル構成&lt;/h2&gt;

&lt;div class="code-frame" data-lang="text"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;.
├── CHANGELOG.md
├── ext
│  └── morph
│     ├── ext.cpp
│     └── extconf.rb
├── Gemfile
├── lib
│  ├── morph
│  │  ├── ext.so
│  │  └── version.rb
│  └── morph-ruby.rb
├── LICENSE.txt
├── morph-ruby.gemspec
├── pkg
│  └── morph-ruby-0.1.0.gem
├── Rakefile
├── README.md
└── test
   ├── client_test.rb
   └── test_helper.rb
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;こんな感じのファイル構成になっています。信頼と安心のAnkane氏のプロジェクトなので、これをテンプレートにしてやっていけばよさそうです。&lt;/p&gt;

&lt;p&gt;徹頭徹尾、他の人のプロジェクトを見てコピペして貼り付けて感想を述べただけの薄いエントリで本当に恐縮です。素晴らしいGemを作り続けているAnkaneさんに感謝します。何かの参考になれば幸いです。&lt;/p&gt;

&lt;p&gt;この記事は以上です。&lt;/p&gt;
</content>
    <published>2020-12-20T22:22:00Z</published>
    <updated>2020-12-20T22:37:38Z</updated>
    <author>
      <name>kojix2</name>
    </author>
  </entry>
  <entry>
    <id>tag:qiita.com,2005:PublicArticle/1362842</id>
    <published>2020-12-20T18:02:35+09:00</published>
    <updated>2020-12-20T18:21:03+09:00</updated>
    <link rel="alternate" type="text/html" href="https://qiita.com/noraworld/items/2de06c2f5021f8edd343"/>
    <url>https://qiita.com/noraworld/items/2de06c2f5021f8edd343</url>
    <title>モニターやキーボードを接続せずに最初から SSH できるようにセットアップする方法 [Raspberry Pi, Ubuntu]</title>
    <content type="html">
&lt;h1&gt;
&lt;span id="はじめに" class="fragment"&gt;&lt;/span&gt;&lt;a href="#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;はじめに&lt;/h1&gt;

&lt;p&gt;Raspberry Pi で遊んだり、何かの作業のサンドボックスとして使用したりするとき、しょっちゅう OS を再インストールすることがあります。&lt;/p&gt;

&lt;p&gt;そのたびに Raspberry Pi にキーボードをつないで、sshd をインストール&lt;sup id="fnref1"&gt;&lt;a href="#fn1" rel="footnote" title="Ubuntu Desktop ではデフォルトでインストールされていません。"&gt;1&lt;/a&gt;&lt;/sup&gt;して sshd_config を編集して SSH 公開鍵を設置して sshd を起動して、、、という作業を毎回 Raspberry Pi 側でやるのは非常にめんどうです。ふだん使い慣れている環境ではない分、キーボード操作も満足できずストレスがたまります。&lt;/p&gt;

&lt;p&gt;なので今回は Raspberry Pi にキーボードを接続せずに、Mac だけで作業を完結させる方法について紹介します。&lt;/p&gt;

&lt;p&gt;なお、この作業は Raspberry Pi に限らず、Ubuntu をインストールするデバイスでもおそらく可能です。また、この記事では詳細なやり方については説明しませんが、Linux や Windows でも同様の手順でできます。&lt;/p&gt;

&lt;h1&gt;
&lt;span id="環境" class="fragment"&gt;&lt;/span&gt;&lt;a href="#%E7%92%B0%E5%A2%83"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;環境&lt;/h1&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;Raspberry Pi 4&lt;/th&gt;
&lt;th&gt;Mac&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;OS&lt;/td&gt;
&lt;td&gt;Ubuntu 20.10&lt;/td&gt;
&lt;td&gt;macOS Big Sur 11.1&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h1&gt;
&lt;span id="ubuntu-のイメージを-sd-カードに焼く" class="fragment"&gt;&lt;/span&gt;&lt;a href="#ubuntu-%E3%81%AE%E3%82%A4%E3%83%A1%E3%83%BC%E3%82%B8%E3%82%92-sd-%E3%82%AB%E3%83%BC%E3%83%89%E3%81%AB%E7%84%BC%E3%81%8F"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;Ubuntu のイメージを SD カードに焼く&lt;/h1&gt;

&lt;p&gt;まずはふだんのインストール通り、SD カード (Raspberry Pi でない場合は USB メモリなど) に OS を焼きます。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ubuntu Desktop ではなく Ubuntu Server のイメージをダウンロード&lt;/strong&gt; してください。デスクトップ用を使いたくても、とりあえずまずはサーバ用をインストールします。デスクトップ用にする方法は最後に紹介します。&lt;/p&gt;

&lt;p&gt;Raspberry Pi 用の Ubuntu イメージは &lt;a href="https://ubuntu.com/download/raspberry-pi" rel="nofollow noopener" target="_blank"&gt;ここ&lt;/a&gt; からダウンロードできます。&lt;/p&gt;

&lt;p&gt;&lt;a href="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F113895%2Ffac6c5fc-74d7-4464-809c-8fff1413a5f3.png?ixlib=rb-1.2.2&amp;amp;auto=format&amp;amp;gif-q=60&amp;amp;q=75&amp;amp;s=a2f6d6c867d3eb447fa20011df5a2aed" target="_blank" rel="nofollow noopener"&gt;&lt;img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F113895%2Ffac6c5fc-74d7-4464-809c-8fff1413a5f3.png?ixlib=rb-1.2.2&amp;amp;auto=format&amp;amp;gif-q=60&amp;amp;q=75&amp;amp;s=a2f6d6c867d3eb447fa20011df5a2aed" alt="screencapture-ubuntu-download-raspberry-pi-2020-12-20-13_12_36.png" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/113895/fac6c5fc-74d7-4464-809c-8fff1413a5f3.png" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F113895%2Ffac6c5fc-74d7-4464-809c-8fff1413a5f3.png?ixlib=rb-1.2.2&amp;amp;auto=format&amp;amp;gif-q=60&amp;amp;q=75&amp;amp;w=1400&amp;amp;fit=max&amp;amp;s=7693fcaa3ed9e1a78431d3ec55556483 1x" loading="lazy"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;ダウンロードした Ubuntu Server のイメージを SD カードに焼きます。CUI で操作したい場合は &lt;code&gt;dd&lt;/code&gt; コマンドを使います。GUI で操作したい場合は &lt;a href="https://www.balena.io/etcher/" rel="nofollow noopener" target="_blank"&gt;balenaEtcher&lt;/a&gt; が便利です。イメージを焼く方法はインターネット上にたくさん記事があがっているのでここでは手順は省略します。&lt;/p&gt;

&lt;h1&gt;
&lt;span id="optional-wi-fi-を設定する" class="fragment"&gt;&lt;/span&gt;&lt;a href="#optional-wi-fi-%E3%82%92%E8%A8%AD%E5%AE%9A%E3%81%99%E3%82%8B"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;(optional) Wi-Fi を設定する&lt;/h1&gt;

&lt;p&gt;&lt;img alt=":information_source:" class="emoji" height="20" src="https://cdn.qiita.com/emoji/twemoji/unicode/2139-fe0f.png" title=":information_source:" width="20" loading="lazy"&gt; &lt;strong&gt;この作業は Raspberry Pi を Wi-Fi で接続する場合のみ行います。Wi-Fi を使わずにイーサネットで有線接続する、あるいは Wi-Fi 設定が SSH が可能になったあとでも構わないならこの手順はスキップします。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;OS を焼いたあとは SD カードのディスクがアンマウントされているかもしれないので、アンマウントされていたら一度 SD カードを抜いてもう一度挿します。&lt;/p&gt;

&lt;p&gt;マウントされた SD カード内のディスクは &lt;code&gt;system-boot&lt;/code&gt; となっていると思います。その中にある &lt;code&gt;network-config&lt;/code&gt; というファイルを編集します。ちなみに Mac でマウントされたものは &lt;code&gt;/Volumes&lt;/code&gt; 以下にあります。&lt;/p&gt;

&lt;p&gt;ファイル内にコメントアウトされた以下のような記述がどこかにあると思いますのでアンコメントして有効化します。&lt;/p&gt;

&lt;div class="code-frame" data-lang=""&gt;
&lt;div class="code-lang"&gt;&lt;span class="bold"&gt;/Volumes/system-boot/network-config&lt;/span&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;wifis:
  wlan0:
  dhcp4: true
  optional: true
  access-points:
    &amp;lt;wifi network name&amp;gt;:
      password: "&amp;lt;wifi password&amp;gt;"
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;wifi network name&amp;gt;&lt;/code&gt; には使用している Wi-Fi の SSID、&lt;code&gt;&amp;lt;wifi password&amp;gt;&lt;/code&gt; には Wi-Fi のパスワードを設定します。&lt;/p&gt;

&lt;p&gt;&lt;img alt=":warning:" class="emoji" height="20" src="https://cdn.qiita.com/emoji/twemoji/unicode/26a0-fe0f.png" title=":warning:" width="20" loading="lazy"&gt; &lt;strong&gt;&lt;code&gt;&amp;lt;wifi network name&amp;gt;&lt;/code&gt; もダブルクオーテーション &lt;code&gt;"&lt;/code&gt; で囲ってください。&lt;/strong&gt;&lt;/p&gt;

&lt;h1&gt;
&lt;span id="raspberry-pi-を起動する" class="fragment"&gt;&lt;/span&gt;&lt;a href="#raspberry-pi-%E3%82%92%E8%B5%B7%E5%8B%95%E3%81%99%E3%82%8B"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;Raspberry Pi を起動する&lt;/h1&gt;

&lt;p&gt;Ubuntu を焼いた SD カードを抜いて Raspberry Pi に挿します。そして Raspberry Pi の電源をオンにします。起動するまで 1 〜 2 分ほど待ちます。&lt;/p&gt;

&lt;h1&gt;
&lt;span id="raspberry-pi-の-ip-アドレスを調べる" class="fragment"&gt;&lt;/span&gt;&lt;a href="#raspberry-pi-%E3%81%AE-ip-%E3%82%A2%E3%83%89%E3%83%AC%E3%82%B9%E3%82%92%E8%AA%BF%E3%81%B9%E3%82%8B"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;Raspberry Pi の IP アドレスを調べる&lt;/h1&gt;

&lt;p&gt;Raspberry Pi の IP アドレスを固定していないので、このままでは Raspberry Pi に割り当てられた IP アドレスがわかりません。なので IP アドレスを調べます。&lt;/p&gt;

&lt;p&gt;IP アドレスを調べるには &lt;code&gt;arp-scan&lt;/code&gt; コマンドを使います。Mac で Homebrew を使っている場合は、以下のコマンドでインストールできます。&lt;/p&gt;

&lt;div class="code-frame" data-lang="shell"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;brew &lt;span class="nb"&gt;install &lt;/span&gt;arp-scan
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;次に以下のコマンドを実行します。&lt;/p&gt;

&lt;div class="code-frame" data-lang="shell"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;sudo &lt;/span&gt;arp-scan &lt;span class="nt"&gt;-l&lt;/span&gt; &lt;span class="nt"&gt;--interface&lt;/span&gt; &amp;lt;NETWORK_INTERFACE_NAME&amp;gt; | &lt;span class="nb"&gt;grep&lt;/span&gt; &lt;span class="nt"&gt;-i&lt;/span&gt; &lt;span class="s2"&gt;"Raspberry Pi"&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;NETWORK_INTERFACE_NAME&amp;gt;&lt;/code&gt; にはネットワークインターフェース名を指定します。ネットワークインターフェース名がわからない場合は、後述の「&lt;a href="#%E3%83%8D%E3%83%83%E3%83%88%E3%83%AF%E3%83%BC%E3%82%AF%E3%82%A4%E3%83%B3%E3%82%BF%E3%83%BC%E3%83%95%E3%82%A7%E3%83%BC%E3%82%B9%E5%90%8D%E3%81%AE%E8%AA%BF%E3%81%B9%E6%96%B9"&gt;ネットワークインターフェース名の調べ方&lt;/a&gt;」を参照してください。&lt;/p&gt;

&lt;p&gt;すると、以下のような行が表示されるはずです。&lt;/p&gt;

&lt;div class="code-frame" data-lang="text"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;192.168.3.14    xx:xx:xx:xx:xx:xx   Raspberry Pi Trading Ltd
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;ここで表示された &lt;code&gt;192.168.3.14&lt;/code&gt; が Raspberry Pi の IP アドレスです。この数値はもちろん環境によって異なります。&lt;/p&gt;

&lt;p&gt;&lt;img alt=":information_source:" class="emoji" height="20" src="https://cdn.qiita.com/emoji/twemoji/unicode/2139-fe0f.png" title=":information_source:" width="20" loading="lazy"&gt; macOS や Linux に最初からインストールされている &lt;code&gt;arp&lt;/code&gt; コマンドでも似たようなことができますが、こちらではうまくいかない可能性があります。なぜうまくいかない可能性があるかは「&lt;a href="#tips-arp-%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89%E3%81%A7%E3%81%AF%E3%81%86%E3%81%BE%E3%81%8F%E3%81%84%E3%81%8B%E3%81%AA%E3%81%84%E7%90%86%E7%94%B1"&gt;TIPS: arp コマンドではうまくいかない理由&lt;/a&gt;」を参照してください。&lt;/p&gt;

&lt;h2&gt;
&lt;span id="上記でうまくいかない場合" class="fragment"&gt;&lt;/span&gt;&lt;a href="#%E4%B8%8A%E8%A8%98%E3%81%A7%E3%81%86%E3%81%BE%E3%81%8F%E3%81%84%E3%81%8B%E3%81%AA%E3%81%84%E5%A0%B4%E5%90%88"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;上記でうまくいかない場合&lt;/h2&gt;

&lt;p&gt;もし上記の &lt;code&gt;arp-scan&lt;/code&gt; コマンドで何も表示されない場合は以下の 2 つを試してみてください。&lt;/p&gt;

&lt;div class="code-frame" data-lang="shell"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;sudo &lt;/span&gt;arp-scan &lt;span class="nt"&gt;-l&lt;/span&gt; &lt;span class="nt"&gt;--interface&lt;/span&gt; &amp;lt;NETWORK_INTERFACE_NAME&amp;gt; | &lt;span class="nb"&gt;grep&lt;/span&gt; &lt;span class="nt"&gt;-i&lt;/span&gt; &lt;span class="s2"&gt;"dc:a6:32"&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;sudo &lt;/span&gt;arp-scan &lt;span class="nt"&gt;-l&lt;/span&gt; &lt;span class="nt"&gt;--interface&lt;/span&gt; &amp;lt;NETWORK_INTERFACE_NAME&amp;gt; | &lt;span class="nb"&gt;grep&lt;/span&gt; &lt;span class="nt"&gt;-i&lt;/span&gt; &lt;span class="s2"&gt;"b8:27:eb"&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Raspberry Pi は MAC アドレスが &lt;code&gt;dc:a6:32&lt;/code&gt; または &lt;code&gt;b8:27:eb&lt;/code&gt; から始まるようです。Raspberry Pi 4 では &lt;code&gt;dc:a6:32&lt;/code&gt; で始まり、それ以外の Raspberry Pi では &lt;code&gt;b8:27:eb&lt;/code&gt; から始まるらしいです。&lt;/p&gt;

&lt;p&gt;それでも見つからない場合はまだ Ubuntu が完全に起動していないかもしれないので追加で 5 分ほど待ってみてください。&lt;/p&gt;

&lt;p&gt;また、Wi-Fi の設定で接続する場合は初回の起動時は失敗する可能性があるらしいので、5 分以上待ってもダメだった場合は一旦 Raspberry Pi の電源をオフにし、もう一度起動して数分待ってから試してみてください。&lt;/p&gt;

&lt;p&gt;ちなみに Raspberry Pi 以外のデバイスでこの手順を試している場合は &lt;code&gt;"Raspberry Pi"&lt;/code&gt; や &lt;code&gt;"dc:a6:32"&lt;/code&gt; や &lt;code&gt;"b8:27:eb"&lt;/code&gt; で grep しても出てこないと思いますので、以下のコマンドを実行してそれっぽいものを探してください。&lt;/p&gt;

&lt;div class="code-frame" data-lang="shell"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;sudo &lt;/span&gt;arp-scan &lt;span class="nt"&gt;-l&lt;/span&gt; &lt;span class="nt"&gt;--interface&lt;/span&gt; &amp;lt;NETWORK_INTERFACE_NAME&amp;gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2&gt;
&lt;span id="ネットワークインターフェース名の調べ方" class="fragment"&gt;&lt;/span&gt;&lt;a href="#%E3%83%8D%E3%83%83%E3%83%88%E3%83%AF%E3%83%BC%E3%82%AF%E3%82%A4%E3%83%B3%E3%82%BF%E3%83%BC%E3%83%95%E3%82%A7%E3%83%BC%E3%82%B9%E5%90%8D%E3%81%AE%E8%AA%BF%E3%81%B9%E6%96%B9"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;ネットワークインターフェース名の調べ方&lt;/h2&gt;

&lt;p&gt;「システム環境設定」の「ネットワーク」を開きます。&lt;/p&gt;

&lt;p&gt;「接続済み」になっているネットワークを選択して、Mac に割り当てられている IP アドレスを調べます。&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style="text-align: center"&gt;有線接続の場合&lt;/th&gt;
&lt;th style="text-align: center"&gt;Wi-Fi の場合&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style="text-align: center"&gt;&lt;a href="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F113895%2Fe6eb9810-ca7d-416f-d659-863bf9c66917.png?ixlib=rb-1.2.2&amp;amp;auto=format&amp;amp;gif-q=60&amp;amp;q=75&amp;amp;s=f714f12cf8365ed790c934402606ad62" target="_blank" rel="nofollow noopener"&gt;&lt;img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F113895%2Fe6eb9810-ca7d-416f-d659-863bf9c66917.png?ixlib=rb-1.2.2&amp;amp;auto=format&amp;amp;gif-q=60&amp;amp;q=75&amp;amp;s=f714f12cf8365ed790c934402606ad62" alt="スクリーンショット 2020-12-20 14.15.00.png" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/113895/e6eb9810-ca7d-416f-d659-863bf9c66917.png" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F113895%2Fe6eb9810-ca7d-416f-d659-863bf9c66917.png?ixlib=rb-1.2.2&amp;amp;auto=format&amp;amp;gif-q=60&amp;amp;q=75&amp;amp;w=1400&amp;amp;fit=max&amp;amp;s=716379a8562d70fd7daf209cd12b2875 1x" loading="lazy"&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td style="text-align: center"&gt;&lt;a href="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F113895%2F65662548-ada4-124d-1453-1afa2860b270.png?ixlib=rb-1.2.2&amp;amp;auto=format&amp;amp;gif-q=60&amp;amp;q=75&amp;amp;s=e17924eb16ac72eb1a4019b0b289397e" target="_blank" rel="nofollow noopener"&gt;&lt;img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F113895%2F65662548-ada4-124d-1453-1afa2860b270.png?ixlib=rb-1.2.2&amp;amp;auto=format&amp;amp;gif-q=60&amp;amp;q=75&amp;amp;s=e17924eb16ac72eb1a4019b0b289397e" alt="スクリーンショット 2020-12-20 14.19.13.png" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/113895/65662548-ada4-124d-1453-1afa2860b270.png" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F113895%2F65662548-ada4-124d-1453-1afa2860b270.png?ixlib=rb-1.2.2&amp;amp;auto=format&amp;amp;gif-q=60&amp;amp;q=75&amp;amp;w=1400&amp;amp;fit=max&amp;amp;s=fac2af3d367396993047d59cef865762 1x" loading="lazy"&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;有線と Wi-Fi どちらにも接続されている場合はどちらでも良いです。とにかくネットワークに接続されているものならなんでも良いので、その接続の IP アドレスを調べてください。&lt;/p&gt;

&lt;p&gt;次に以下のコマンドを実行します。&lt;/p&gt;

&lt;div class="code-frame" data-lang="shell"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;ifconfig | &lt;span class="nb"&gt;grep&lt;/span&gt; &amp;lt;IP_ADDR&amp;gt; &lt;span class="nt"&gt;-B&lt;/span&gt; 10
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;IP_ADDR&amp;gt;&lt;/code&gt; には、直前で調べた IP アドレスを指定します。&lt;/p&gt;

&lt;p&gt;すると以下のような結果が出ます。&lt;/p&gt;

&lt;div class="code-frame" data-lang="text"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;        ... (無視して OK)
        ...
        ...
en0: flags=8863&amp;lt;UP,BROADCAST,SMART,RUNNING,SIMPLEX,MULTICAST&amp;gt; mtu 1500
        ... (省略)
        ...
        ...
        ...
        ...
        inet 192.168.3.28 netmask 0xffffff00 broadcast 192.168.3.255
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;上記の例だとネットワークインターフェース名が &lt;code&gt;en0&lt;/code&gt; であることがわかりました。上記の例は Wi-Fi なので、Wi-Fi で接続されているネットワークのインターフェイス名が &lt;code&gt;en0&lt;/code&gt; だったというわけです。ちなみに有線接続だと &lt;code&gt;en7&lt;/code&gt; でした。これらの結果は環境によって異なります。&lt;/p&gt;

&lt;h1&gt;
&lt;span id="ssh-してみる" class="fragment"&gt;&lt;/span&gt;&lt;a href="#ssh-%E3%81%97%E3%81%A6%E3%81%BF%E3%82%8B"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;SSH してみる&lt;/h1&gt;

&lt;p&gt;ここまで来たらもう SSH できる状態になっています。実際に SSH してみましょう。ユーザ名は &lt;code&gt;ubuntu&lt;/code&gt; です。&lt;/p&gt;

&lt;div class="code-frame" data-lang="shell"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;ssh ubuntu@&amp;lt;IP_ADDR&amp;gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;IP_ADDR&amp;gt;&lt;/code&gt; には先ほどの手順で調べた Raspberry Pi の IP アドレスを指定します。この記事の例では &lt;code&gt;192.168.3.14&lt;/code&gt; だったものです。&lt;/p&gt;

&lt;p&gt;はじめての接続の場合は以下のメッセージが表示されるので &lt;code&gt;yes&lt;/code&gt; とタイプしてリターンキーを押します。&lt;/p&gt;

&lt;div class="code-frame" data-lang="text"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;Are you sure you want to continue connecting (yes/no/[fingerprint])?
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;その後、パスワードを求められるので &lt;code&gt;ubuntu&lt;/code&gt; と入力してリターンキーを押します。次に新しいパスワードの設定を求められるので新しいパスワードを設定します。&lt;/p&gt;

&lt;p&gt;ログインできたら成功です！ おつかれさまでした。あとは鍵を作成して公開鍵を Raspberry Pi に設置して公開鍵認証にしたりして各々の環境にセットアップしてください。&lt;/p&gt;

&lt;h2&gt;
&lt;span id="warning-remote-host-identification-has-changed-と表示された場合" class="fragment"&gt;&lt;/span&gt;&lt;a href="#warning-remote-host-identification-has-changed-%E3%81%A8%E8%A1%A8%E7%A4%BA%E3%81%95%E3%82%8C%E3%81%9F%E5%A0%B4%E5%90%88"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED! と表示された場合&lt;/h2&gt;

&lt;p&gt;Raspberry Pi を何度も再インストールしている場合は、以下のようなメッセージが表示されるかもしれません。&lt;/p&gt;

&lt;div class="code-frame" data-lang="text"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@    WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED!     @
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
IT IS POSSIBLE THAT SOMEONE IS DOING SOMETHING NASTY!
Someone could be eavesdropping on you right now (man-in-the-middle attack)!
It is also possible that a host key has just been changed.
The fingerprint for the ECDSA key sent by the remote host is
SHA256:XXXX/XXXXX/XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX.
Please contact your system administrator.
Add correct host key in /Users/noraworld/.ssh/known_hosts to get rid of this message.
Offending ECDSA key in /Users/noraworld/.ssh/known_hosts:16
ECDSA host key for 192.168.3.14 has changed and you have requested strict checking.
Host key verification failed.
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;これは「中間者攻撃をされているかもしれません」という警告メッセージなのですが、何度も Raspberry Pi に OS を再インストールしていて、たまたま以前と IP アドレスが被ってしまった場合 (あるいは以前と同じ IP アドレスを固定で割り振ったりした場合) に表示されます。「同じ IP アドレスなのにフィンガープリントが違うということは、悪い人が、別のサーバにログインするようにあなたを仕向けているかもしれない」ということです。&lt;/p&gt;

&lt;p&gt;ただ、この場合は単に OS を再インストールしたことでフィンガープリントが変わっただけなので、その場合は &lt;code&gt;~/.ssh/known_hosts&lt;/code&gt; から該当する行 (行頭の IP アドレスが Raspberry Pi の IP アドレスであるもの) を削除してください。&lt;/p&gt;

&lt;h1&gt;
&lt;span id="optional-ubuntu-desktop-をインストールする" class="fragment"&gt;&lt;/span&gt;&lt;a href="#optional-ubuntu-desktop-%E3%82%92%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB%E3%81%99%E3%82%8B"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;(optional) Ubuntu Desktop をインストールする&lt;/h1&gt;

&lt;p&gt;&lt;img alt=":information_source:" class="emoji" height="20" src="https://cdn.qiita.com/emoji/twemoji/unicode/2139-fe0f.png" title=":information_source:" width="20" loading="lazy"&gt; &lt;strong&gt;この作業は Ubuntu Desktop を使用したい場合のみ行います。Ubuntu Server を使う場合はこの手順はスキップします。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Ubuntu Server から Ubuntu Desktop に変えたい場合は、以下のコマンドを実行します。&lt;/p&gt;

&lt;div class="code-frame" data-lang="shell"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;sudo &lt;/span&gt;apt &lt;span class="nt"&gt;-y&lt;/span&gt; &lt;span class="nb"&gt;install &lt;/span&gt;ubuntu-desktop
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;うまくいかない場合は &lt;a href="https://waldorf.waveform.org.uk/2020/ubuntu-desktops-on-the-pi.html" rel="nofollow noopener" target="_blank"&gt;こちら&lt;/a&gt; を参考にしてください。&lt;/p&gt;

&lt;h1&gt;
&lt;span id="tips-arp-コマンドではうまくいかない理由" class="fragment"&gt;&lt;/span&gt;&lt;a href="#tips-arp-%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89%E3%81%A7%E3%81%AF%E3%81%86%E3%81%BE%E3%81%8F%E3%81%84%E3%81%8B%E3%81%AA%E3%81%84%E7%90%86%E7%94%B1"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;TIPS: arp コマンドではうまくいかない理由&lt;/h1&gt;

&lt;p&gt;結論からいうと、&lt;code&gt;arp&lt;/code&gt; コマンドはキャッシュを見ているからです。&lt;/p&gt;

&lt;p&gt;まず、ARP とは Address Resolution Protocol の略で、LAN 内のブロードキャストアドレスにパケットを送信することでブロードキャストを行い、その LAN 内に接続されているデバイスの IP アドレスと MAC アドレスを得るためのプロトコルです。それを行うのが &lt;code&gt;arp&lt;/code&gt; コマンドです。&lt;/p&gt;

&lt;p&gt;たとえば IP アドレスが &lt;code&gt;192.168.3.0&lt;/code&gt; でサブネットマスクが &lt;code&gt;255.255.255.0&lt;/code&gt; のネットワークで &lt;code&gt;arp&lt;/code&gt; コマンドを実行した場合、ブロードキャストアドレスである &lt;code&gt;192.168.3.255&lt;/code&gt; にパケットを送信します。すると &lt;code&gt;192.168.3.1&lt;/code&gt; 〜 &lt;code&gt;192.168.3.254&lt;/code&gt; の IP アドレスの範囲内で、使われている IP アドレスと、その IP アドレスが設定されたデバイスの MAC アドレスを得ることができます。&lt;/p&gt;

&lt;p&gt;この記事の Raspberry Pi の IP アドレスを調べる項ではまさにこの ARP を使って IP アドレスを特定したのですが、&lt;code&gt;arp&lt;/code&gt; コマンドではなく、&lt;code&gt;arp-scan&lt;/code&gt; コマンドをわざわざインストールして使いました。&lt;/p&gt;

&lt;p&gt;実は &lt;code&gt;arp&lt;/code&gt; コマンドの実行結果は、そのコマンドを実行した時点での状態ではなく、過去に持っていた状態をキャッシュして表示しているだけなのです。つまり、Raspberry Pi を起動してネットワークにはじめて接続されてから、Raspberry Pi の IP アドレスと MAC アドレスが &lt;code&gt;arp&lt;/code&gt; コマンドで確認できるようになるまでには時間がかかるということです。&lt;/p&gt;

&lt;p&gt;キャッシュが更新されるのがいつなのかはわからないですが、Raspberry Pi が起動してから 10 分以上待っても更新されませんでした。&lt;/p&gt;

&lt;p&gt;いつ更新されるのかわからない、わかったとしても数時間も待つわけにはいかないので &lt;code&gt;arp-scan&lt;/code&gt; コマンドを使った、というわけです。&lt;/p&gt;

&lt;h2&gt;
&lt;span id="実験" class="fragment"&gt;&lt;/span&gt;&lt;a href="#%E5%AE%9F%E9%A8%93"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;実験&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;arp&lt;/code&gt; コマンドがキャッシュの内容を表示していることを確認するために、&lt;code&gt;arp-scan&lt;/code&gt; コマンドの実行前後で &lt;code&gt;arp&lt;/code&gt; コマンドを実行してみました。&lt;/p&gt;

&lt;div class="code-frame" data-lang="shell"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;arp &lt;span class="nt"&gt;-na&lt;/span&gt;
? &lt;span class="o"&gt;(&lt;/span&gt;192.168.3.1&lt;span class="o"&gt;)&lt;/span&gt; at xx:xx:xx:xx:xx:xx on en0 ifscope &lt;span class="o"&gt;[&lt;/span&gt;ethernet]
? &lt;span class="o"&gt;(&lt;/span&gt;192.168.3.1&lt;span class="o"&gt;)&lt;/span&gt; at xx:xx:xx:xx:xx:xx on en7 ifscope &lt;span class="o"&gt;[&lt;/span&gt;ethernet]
? &lt;span class="o"&gt;(&lt;/span&gt;192.168.3.11&lt;span class="o"&gt;)&lt;/span&gt; at xx:xx:xx:xx:xx:xx on en7 ifscope &lt;span class="o"&gt;[&lt;/span&gt;ethernet]
? &lt;span class="o"&gt;(&lt;/span&gt;192.168.3.18&lt;span class="o"&gt;)&lt;/span&gt; at xx:xx:xx:xx:xx:xx on en0 ifscope &lt;span class="o"&gt;[&lt;/span&gt;ethernet]
? &lt;span class="o"&gt;(&lt;/span&gt;192.168.3.18&lt;span class="o"&gt;)&lt;/span&gt; at xx:xx:xx:xx:xx:xx on en7 ifscope &lt;span class="o"&gt;[&lt;/span&gt;ethernet]
? &lt;span class="o"&gt;(&lt;/span&gt;192.168.3.19&lt;span class="o"&gt;)&lt;/span&gt; at xx:xx:xx:xx:xx:xx on en0 ifscope &lt;span class="o"&gt;[&lt;/span&gt;ethernet]
? &lt;span class="o"&gt;(&lt;/span&gt;192.168.3.19&lt;span class="o"&gt;)&lt;/span&gt; at xx:xx:xx:xx:xx:xx on en7 ifscope &lt;span class="o"&gt;[&lt;/span&gt;ethernet]
? &lt;span class="o"&gt;(&lt;/span&gt;192.168.3.24&lt;span class="o"&gt;)&lt;/span&gt; at xx:xx:xx:xx:xx:xx on en7 ifscope &lt;span class="o"&gt;[&lt;/span&gt;ethernet]
? &lt;span class="o"&gt;(&lt;/span&gt;224.0.0.251&lt;span class="o"&gt;)&lt;/span&gt; at x:x:xx:x:x:xx on en0 ifscope permanent &lt;span class="o"&gt;[&lt;/span&gt;ethernet]
? &lt;span class="o"&gt;(&lt;/span&gt;224.0.0.251&lt;span class="o"&gt;)&lt;/span&gt; at x:x:xx:x:x:xx on en7 ifscope permanent &lt;span class="o"&gt;[&lt;/span&gt;ethernet]
? &lt;span class="o"&gt;(&lt;/span&gt;239.255.255.250&lt;span class="o"&gt;)&lt;/span&gt; at x:x:xx:xx:xx:xx on en0 ifscope permanent &lt;span class="o"&gt;[&lt;/span&gt;ethernet]
? &lt;span class="o"&gt;(&lt;/span&gt;239.255.255.250&lt;span class="o"&gt;)&lt;/span&gt; at x:x:xx:xx:xx:xx on en7 ifscope permanent &lt;span class="o"&gt;[&lt;/span&gt;ethernet]
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;重複している IP アドレスとマルチキャストアドレス (&lt;code&gt;224.0.0.0&lt;/code&gt;  〜 &lt;code&gt;239.255.255.255&lt;/code&gt; の範囲内にある IP アドレス、上記の例では下の 4 行) を除くと 5 つの IP アドレスが見つかりました。&lt;/p&gt;

&lt;div class="code-frame" data-lang="shell"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;sudo &lt;/span&gt;arp-scan &lt;span class="nt"&gt;-l&lt;/span&gt; &lt;span class="nt"&gt;--interface&lt;/span&gt; en0
Interface: en0, &lt;span class="nb"&gt;type&lt;/span&gt;: EN10MB, MAC: xx:xx:xx:xx:xx:xx, IPv4: 192.168.3.28
Starting arp-scan 1.9.7 with 256 hosts &lt;span class="o"&gt;(&lt;/span&gt;https://github.com/royhills/arp-scan&lt;span class="o"&gt;)&lt;/span&gt;
192.168.3.1     xx:xx:xx:xx:xx:xx   Hon Hai Precision Ind. Co.,Ltd.
192.168.3.11    xx:xx:xx:xx:xx:xx   Apple, Inc.
192.168.3.12    xx:xx:xx:xx:xx:xx   ELECOM CO.,LTD.
192.168.3.14    xx:xx:xx:xx:xx:xx   Raspberry Pi Trading Ltd
192.168.3.18    xx:xx:xx:xx:xx:xx   Luxshare Precision Industry Company Limited
192.168.3.20    xx:xx:xx:xx:xx:xx   ASIX ELECTRONICS CORP.
192.168.3.25    xx:xx:xx:xx:xx:xx   Sony Interactive Entertainment Inc.
192.168.3.19    xx:xx:xx:xx:xx:xx   &lt;span class="o"&gt;(&lt;/span&gt;Unknown: locally administered&lt;span class="o"&gt;)&lt;/span&gt;
192.168.3.26    xx:xx:xx:xx:xx:xx   Oculus VR, LLC
192.168.3.21    xx:xx:xx:xx:xx:xx   Texas Instruments
192.168.3.102   xx:xx:xx:xx:xx:xx   Belkin International Inc.
192.168.3.27    xx:xx:xx:xx:xx:xx   &lt;span class="o"&gt;(&lt;/span&gt;Unknown&lt;span class="o"&gt;)&lt;/span&gt;
192.168.3.23    xx:xx:xx:xx:xx:xx   Espressif Inc.

525 packets received by filter, 0 packets dropped by kernel
Ending arp-scan 1.9.7: 256 hosts scanned &lt;span class="k"&gt;in &lt;/span&gt;1.994 seconds &lt;span class="o"&gt;(&lt;/span&gt;128.39 hosts/sec&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="nb"&gt;.&lt;/span&gt; 13 responded
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code&gt;arp-scan&lt;/code&gt; コマンドを実行すると合計 13 個の IP アドレスが見つかりました。これがキャッシュではない本当のブロードキャストの結果です。&lt;/p&gt;

&lt;div class="code-frame" data-lang="shell"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;arp &lt;span class="nt"&gt;-na&lt;/span&gt;
? &lt;span class="o"&gt;(&lt;/span&gt;192.168.3.1&lt;span class="o"&gt;)&lt;/span&gt; at xx:xx:xx:xx:xx:xx on en0 ifscope &lt;span class="o"&gt;[&lt;/span&gt;ethernet]
? &lt;span class="o"&gt;(&lt;/span&gt;192.168.3.1&lt;span class="o"&gt;)&lt;/span&gt; at xx:xx:xx:xx:xx:xx on en7 ifscope &lt;span class="o"&gt;[&lt;/span&gt;ethernet]
? &lt;span class="o"&gt;(&lt;/span&gt;192.168.3.11&lt;span class="o"&gt;)&lt;/span&gt; at xx:xx:xx:xx:xx:xx on en0 ifscope &lt;span class="o"&gt;[&lt;/span&gt;ethernet]
? &lt;span class="o"&gt;(&lt;/span&gt;192.168.3.11&lt;span class="o"&gt;)&lt;/span&gt; at xx:xx:xx:xx:xx:xx on en7 ifscope &lt;span class="o"&gt;[&lt;/span&gt;ethernet]
? &lt;span class="o"&gt;(&lt;/span&gt;192.168.3.12&lt;span class="o"&gt;)&lt;/span&gt; at xx:xx:xx:xx:xx:xx on en0 ifscope &lt;span class="o"&gt;[&lt;/span&gt;ethernet]
? &lt;span class="o"&gt;(&lt;/span&gt;192.168.3.14&lt;span class="o"&gt;)&lt;/span&gt; at xx:xx:xx:xx:xx:xx on en0 ifscope &lt;span class="o"&gt;[&lt;/span&gt;ethernet]
? &lt;span class="o"&gt;(&lt;/span&gt;192.168.3.14&lt;span class="o"&gt;)&lt;/span&gt; at xx:xx:xx:xx:xx:xx on en7 ifscope &lt;span class="o"&gt;[&lt;/span&gt;ethernet]
? &lt;span class="o"&gt;(&lt;/span&gt;192.168.3.18&lt;span class="o"&gt;)&lt;/span&gt; at xx:xx:xx:xx:xx:xx on en0 ifscope &lt;span class="o"&gt;[&lt;/span&gt;ethernet]
? &lt;span class="o"&gt;(&lt;/span&gt;192.168.3.18&lt;span class="o"&gt;)&lt;/span&gt; at xx:xx:xx:xx:xx:xx on en7 ifscope &lt;span class="o"&gt;[&lt;/span&gt;ethernet]
? &lt;span class="o"&gt;(&lt;/span&gt;192.168.3.19&lt;span class="o"&gt;)&lt;/span&gt; at xx:xx:xx:xx:xx:xx on en0 ifscope &lt;span class="o"&gt;[&lt;/span&gt;ethernet]
? &lt;span class="o"&gt;(&lt;/span&gt;192.168.3.19&lt;span class="o"&gt;)&lt;/span&gt; at xx:xx:xx:xx:xx:xx on en7 ifscope &lt;span class="o"&gt;[&lt;/span&gt;ethernet]
? &lt;span class="o"&gt;(&lt;/span&gt;192.168.3.20&lt;span class="o"&gt;)&lt;/span&gt; at xx:xx:xx:xx:xx:xx on en0 ifscope &lt;span class="o"&gt;[&lt;/span&gt;ethernet]
? &lt;span class="o"&gt;(&lt;/span&gt;192.168.3.21&lt;span class="o"&gt;)&lt;/span&gt; at xx:xx:xx:xx:xx:xx on en0 ifscope &lt;span class="o"&gt;[&lt;/span&gt;ethernet]
? &lt;span class="o"&gt;(&lt;/span&gt;192.168.3.23&lt;span class="o"&gt;)&lt;/span&gt; at xx:xx:xx:xx:xx:xx on en0 ifscope &lt;span class="o"&gt;[&lt;/span&gt;ethernet]
? &lt;span class="o"&gt;(&lt;/span&gt;192.168.3.25&lt;span class="o"&gt;)&lt;/span&gt; at xx:xx:xx:xx:xx:xx on en0 ifscope &lt;span class="o"&gt;[&lt;/span&gt;ethernet]
? &lt;span class="o"&gt;(&lt;/span&gt;192.168.3.26&lt;span class="o"&gt;)&lt;/span&gt; at xx:xx:xx:xx:xx:xx on en0 ifscope &lt;span class="o"&gt;[&lt;/span&gt;ethernet]
? &lt;span class="o"&gt;(&lt;/span&gt;192.168.3.27&lt;span class="o"&gt;)&lt;/span&gt; at xx:xx:xx:xx:xx:xx on en0 ifscope &lt;span class="o"&gt;[&lt;/span&gt;ethernet]
? &lt;span class="o"&gt;(&lt;/span&gt;192.168.3.102&lt;span class="o"&gt;)&lt;/span&gt; at xx:xx:xx:xx:xx:xx on en0 ifscope &lt;span class="o"&gt;[&lt;/span&gt;ethernet]
? &lt;span class="o"&gt;(&lt;/span&gt;224.0.0.251&lt;span class="o"&gt;)&lt;/span&gt; at x:x:xx:x:x:xx on en0 ifscope permanent &lt;span class="o"&gt;[&lt;/span&gt;ethernet]
? &lt;span class="o"&gt;(&lt;/span&gt;224.0.0.251&lt;span class="o"&gt;)&lt;/span&gt; at x:x:xx:x:x:xx on en7 ifscope permanent &lt;span class="o"&gt;[&lt;/span&gt;ethernet]
? &lt;span class="o"&gt;(&lt;/span&gt;239.255.255.250&lt;span class="o"&gt;)&lt;/span&gt; at x:x:xx:xx:xx:xx on en0 ifscope permanent &lt;span class="o"&gt;[&lt;/span&gt;ethernet]
? &lt;span class="o"&gt;(&lt;/span&gt;239.255.255.250&lt;span class="o"&gt;)&lt;/span&gt; at x:x:xx:xx:xx:xx on en7 ifscope permanent &lt;span class="o"&gt;[&lt;/span&gt;ethernet]
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;もう一度実行すると、たしかに 13 個 (重複 IP アドレスとマルチキャストアドレス除く) になりました。というわけで、&lt;code&gt;arp&lt;/code&gt; コマンドはキャッシュを表示していたというわけです。&lt;/p&gt;

&lt;h1&gt;
&lt;span id="まとめ" class="fragment"&gt;&lt;/span&gt;&lt;a href="#%E3%81%BE%E3%81%A8%E3%82%81"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;まとめ&lt;/h1&gt;

&lt;p&gt;Raspberry Pi 本体で一切作業することなく Ubuntu をセットアップすることができました。&lt;/p&gt;

&lt;p&gt;この方法を知るまでは、毎回 Raspberry Pi にキーボードとモニターをつないで、SSH できるまで作業していたのですが、めちゃくちゃめんどくさかったです。その作業がなくなったのでとても気軽に OS の再インストールができるようになりました。&lt;/p&gt;

&lt;p&gt;ARP を使うというところが今回の方法のミソですね。Ubuntu のディスクをマウントして &lt;code&gt;/etc/netplan&lt;/code&gt; 以下に設定ファイルをおいて固定 IP アドレスにする、という方法もありますが、macOS では Linux のファイルシステムである ext4 をマウントできない&lt;sup id="fnref2"&gt;&lt;a href="#fn2" rel="footnote" title="厳密にはパッケージやアプリをインストールすれば可能ですが、ext4fuse はリードオンリーなので編集不可、extFS for Mac by Paragon Software は有料なのであまり良いソリューションにはならないです。"&gt;2&lt;/a&gt;&lt;/sup&gt;ので、IP アドレスの固定はインストール時点では諦めて、DHCP で割り当てられた IP アドレスを ARP で調べる、という方法をとりました。&lt;/p&gt;

&lt;p&gt;参考になりましたら幸いです。&lt;/p&gt;

&lt;h1&gt;
&lt;span id="参考サイト" class="fragment"&gt;&lt;/span&gt;&lt;a href="#%E5%8F%82%E8%80%83%E3%82%B5%E3%82%A4%E3%83%88"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;参考サイト&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://ubuntu.com/tutorials/how-to-install-ubuntu-on-your-raspberry-pi" rel="nofollow noopener" target="_blank"&gt;How to install Ubuntu Server on your Raspberry Pi&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://qiita.com/xshell/items/af4e2ef8d804cd29e38e" id="reference-f6d98bd4ac63a20ad478"&gt;同じLAN内に接続したRaspberry PiのIPアドレスを調べる&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="footnotes"&gt;
&lt;hr&gt;
&lt;ol&gt;

&lt;li id="fn1"&gt;
&lt;p&gt;Ubuntu Desktop ではデフォルトでインストールされていません。 &lt;a href="#fnref1"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li id="fn2"&gt;
&lt;p&gt;厳密にはパッケージやアプリをインストールすれば可能ですが、ext4fuse はリードオンリーなので編集不可、&lt;a href="https://www.paragon-software.com/jp/home/extfs-mac/" rel="nofollow noopener" target="_blank"&gt;extFS for Mac by Paragon Software&lt;/a&gt; は有料なのであまり良いソリューションにはならないです。 &lt;a href="#fnref2"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;/ol&gt;
&lt;/div&gt;
</content>
    <published>2020-12-20T18:02:35Z</published>
    <updated>2020-12-20T18:21:03Z</updated>
    <author>
      <name>noraworld</name>
    </author>
  </entry>
  <entry>
    <id>tag:qiita.com,2005:PublicArticle/1362545</id>
    <published>2020-12-20T11:31:54+09:00</published>
    <updated>2020-12-20T13:38:13+09:00</updated>
    <link rel="alternate" type="text/html" href="https://qiita.com/kojix2/items/340186d7d5dcfcae2a99"/>
    <url>https://qiita.com/kojix2/items/340186d7d5dcfcae2a99</url>
    <title>Cのヘッダーファイルを自動で解析してくれるc2ffiをUbuntuにインストールする方法</title>
    <content type="html">
&lt;h2&gt;
&lt;span id="c2ffiとは" class="fragment"&gt;&lt;/span&gt;&lt;a href="#c2ffi%E3%81%A8%E3%81%AF"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;c2ffiとは&lt;/h2&gt;

&lt;p&gt;C言語のバインディングを作成していると、CやC++のヘッダーファイルを自動的に解析してくれるツールがあったらなと思うことがあります。c2ffiはLLVMを利用したツールで、CやC++のヘッダーファイルを解析して、メタデータのjsonファイルを作成してくれる便利なツールです。&lt;/p&gt;

&lt;p&gt;この記事ではc2ffiをUbuntuでc2ffiを利用するまでに行った手順を記録しています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rpav/c2ffi" class="autolink" rel="nofollow noopener" target="_blank"&gt;https://github.com/rpav/c2ffi&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
&lt;span id="ソースコードを入手する" class="fragment"&gt;&lt;/span&gt;&lt;a href="#%E3%82%BD%E3%83%BC%E3%82%B9%E3%82%B3%E3%83%BC%E3%83%89%E3%82%92%E5%85%A5%E6%89%8B%E3%81%99%E3%82%8B"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;ソースコードを入手する&lt;/h2&gt;

&lt;div class="code-frame" data-lang="text"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;git clone https://github.com/rpav/c2ffi
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;LLVMのバージョンに合わせてブランチを切り替えます。ここではUbunutuの配布しているパッケージのLLVMはversion10であるため、10に切り替えます。&lt;/p&gt;

&lt;div class="code-frame" data-lang="text"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;sudo apt install llvm-10-dev libclang-cpp10-dev
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class="code-frame" data-lang="sh"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;git branch &lt;span class="nt"&gt;-a&lt;/span&gt; &lt;span class="c"&gt;# ブランチ一覧を表示&lt;/span&gt;
git checkout &lt;span class="nt"&gt;-b&lt;/span&gt; llvm-10.0.0 refs/remotes/origin/llvm-10.0.0
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2&gt;
&lt;span id="最新版のcmakeのインストール" class="fragment"&gt;&lt;/span&gt;&lt;a href="#%E6%9C%80%E6%96%B0%E7%89%88%E3%81%AEcmake%E3%81%AE%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;最新版のcmakeのインストール&lt;/h2&gt;

&lt;p&gt;ここで、公式READMEの言うとおりに、&lt;code&gt;build&lt;/code&gt; ディレクトリを作って &lt;code&gt;cmake ..&lt;/code&gt; を実行するとcmakeが古いと言われました。&lt;/p&gt;

&lt;div class="code-frame" data-lang="sh"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;mkdir &lt;/span&gt;build
&lt;span class="nb"&gt;cd &lt;/span&gt;build
cmake ..
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;エラーが発生する&lt;/p&gt;

&lt;div class="code-frame" data-lang="error"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;CMake Error at CMakeLists.txt:1 (cmake_minimum_required):
  CMake 3.17 or higher is required.  You are running version 3.16.3


-- Configuring incomplete, errors occurred!
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;そこで、仕方ないのでcmakeの最新版をインストールします。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/Kitware/CMake" class="autolink" rel="nofollow noopener" target="_blank"&gt;https://github.com/Kitware/CMake&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="code-frame" data-lang="text"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;cd ../../ # c2ffiのディレクトリの外へ
git clone https://github.com/Kitware/CMake
cd CMake
git checkout -b v3.19.2 refs/tags/v3.19.2 # 最新のリリース版
./bootstrap &amp;amp;&amp;amp; make # -j8
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;数分待ちます。&lt;br&gt;
CMakeは恐らく色々なツールで使われるので、あとからトラブルになる可能性も十分にあります。あとから簡単にアンインストールできるように&lt;code&gt;make install&lt;/code&gt;ではなく&lt;code&gt;checkinstall&lt;/code&gt;しておきます。&lt;/p&gt;

&lt;div class="code-frame" data-lang="text"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;sudo checkinstall
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;適当にオプションとかを修正してインストールします。cmakeが大きいので、この工程もそこそこ時間がかかります。終わったら一旦シェルを起動し直すとcmakeが使えるようになります。cmakeが使えるか確認します。&lt;/p&gt;

&lt;div class="code-frame" data-lang="text"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;# シェルの再起動
cmake --version
# cmake version 3.19.2
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;最新版のCMakeがインストールされました。c2ffiのディレクトリに戻ります。&lt;/p&gt;

&lt;div class="code-frame" data-lang="text"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;cd ../c2ffi
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2&gt;
&lt;span id="makeする時に環境変数の設定が必要" class="fragment"&gt;&lt;/span&gt;&lt;a href="#make%E3%81%99%E3%82%8B%E6%99%82%E3%81%AB%E7%92%B0%E5%A2%83%E5%A4%89%E6%95%B0%E3%81%AE%E8%A8%AD%E5%AE%9A%E3%81%8C%E5%BF%85%E8%A6%81"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;makeする時に環境変数の設定が必要&lt;/h2&gt;

&lt;p&gt;今度こそうまくいくかとおもいきや&lt;/p&gt;

&lt;div class="code-frame" data-lang="text"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;cd build
cmake ..
make # -j8
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code&gt;/usr/bin/ld: -lclang-cpp が見つかりません&lt;/code&gt; というエラーメッセージが出ます。これは &lt;code&gt;sudo apt install libclang-cpp10-dev&lt;/code&gt; などをしても消えません。以下のissueを参考に&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rpav/c2ffi/issues/59" class="autolink" rel="nofollow noopener" target="_blank"&gt;https://github.com/rpav/c2ffi/issues/59&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="code-frame" data-lang="text"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;LIBRARY_PATH=LIBRARY_PATH=/usr/lib/llvm-10/lib/ make
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;とします。これで最後までいきました。このissueの記事を読むと、Macでも別の環境変数が必要になる場合があるようです。&lt;br&gt;
checkinstallします。そのままだとSummaryやNameが正しく指定されないと思うので、c2ffiに書き直します。&lt;/p&gt;

&lt;div class="code-frame" data-lang="text"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;sudo checkinstall
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;こちらはすぐに終了します。&lt;code&gt;c2ffi&lt;/code&gt; とタイプして、c2ffiが正しく使えるか試してみましょう。&lt;/p&gt;

&lt;div class="code-frame" data-lang="text"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;c2ffi: unrecognized option '--version'
Usage: c2ffi [options ...] FILE

Options:
      -I, --include        Add a "LOCAL" include path
      -i, --sys-include    Add a &amp;lt;system&amp;gt; include path
      -D, --driver         Specify an output driver (default: json)

      -o, --output         Specify an output file (default: stdout)
      -M, --macro-file     Specify a file for macro definition output
      --with-macro-defs    Also include #defines for macro definitions

      -N, --namespace      Specify target namespace/package/etc

      -A, --arch           Specify the target triple for LLVM
                           (default: x86_64-pc-linux-gnu)
      -x, --lang           Specify language (c, c++, objc, objc++)
      --std                Specify the standard (c99, c++0x, c++11, ...)

      -E                   Preprocessed output only, a la clang -E
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;このように表示されればOKだと思います。&lt;/p&gt;

&lt;p&gt;あとはc2ffiをバインディング作成のお供に使っていきましょう。&lt;/p&gt;

&lt;p&gt;公式ではcommon-lispとRuby用のバインディグ生成ツールを提供していますが、Rubyの方は古いので今でも動くかどうかはわかりません。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rpav/cl-autowrap/" class="autolink" rel="nofollow noopener" target="_blank"&gt;https://github.com/rpav/cl-autowrap/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/rpav/c2ffi-ruby" class="autolink" rel="nofollow noopener" target="_blank"&gt;https://github.com/rpav/c2ffi-ruby&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;この記事は以上です。&lt;/p&gt;
</content>
    <published>2020-12-20T11:31:54Z</published>
    <updated>2020-12-20T13:38:13Z</updated>
    <author>
      <name>kojix2</name>
    </author>
  </entry>
  <entry>
    <id>tag:qiita.com,2005:PublicArticle/1361695</id>
    <published>2020-12-19T02:05:13+09:00</published>
    <updated>2020-12-19T02:58:55+09:00</updated>
    <link rel="alternate" type="text/html" href="https://qiita.com/7yultukuri7/items/88b47b4e56c89cf3cbdc"/>
    <url>https://qiita.com/7yultukuri7/items/88b47b4e56c89cf3cbdc</url>
    <title>[discord.js] [guilded.js] DiscordとGuildedを繋ぐクロスチャットの作り方</title>
    <content type="html">
&lt;h1&gt;
&lt;span id="読む前に" class="fragment"&gt;&lt;/span&gt;&lt;a href="#%E8%AA%AD%E3%82%80%E5%89%8D%E3%81%AB"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;読む前に！！&lt;/h1&gt;

&lt;p&gt;Guilded.jsは、できたホヤホヤのときに書いたので、&lt;strong&gt;&lt;strong&gt;バージョンが変わると使えなくなる場合&lt;/strong&gt;があります。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Guilded.jsをDiscord.jsの感覚でやるとエラーが起こります。&lt;/p&gt;

&lt;p&gt;一度読むことをおすすめします。&lt;a href="https://qiita.com/7yultukuri7/items/3165a142da819ce9749e" id="reference-28e4acc8252ebb76f745"&gt;Discord.jsとGuilded.js, Discord.pyとGuilded.pyの違いとGuildedのBOT作成の準備の説明&lt;br&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;BOTの導入・参加や Node.js 等のインストールはすでに済んでいるものとします。&lt;/p&gt;

&lt;h1&gt;
&lt;span id="環境" class="fragment"&gt;&lt;/span&gt;&lt;a href="#%E7%92%B0%E5%A2%83"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;環境&lt;/h1&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style="text-align: left"&gt;名称&lt;/th&gt;
&lt;th style="text-align: right"&gt;version&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style="text-align: left"&gt;Node.js&lt;/td&gt;
&lt;td style="text-align: right"&gt;v14.15.0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left"&gt;discord.js&lt;/td&gt;
&lt;td style="text-align: right"&gt;v12.2.0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left"&gt;guilded.js&lt;/td&gt;
&lt;td style="text-align: right"&gt;v1.1.2&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;strong&gt;OS : Windows10&lt;/strong&gt; &lt;/p&gt;

&lt;h1&gt;
&lt;span id="コード" class="fragment"&gt;&lt;/span&gt;&lt;a href="#%E3%82%B3%E3%83%BC%E3%83%89"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;コード&lt;/h1&gt;

&lt;div class="code-frame" data-lang="js"&gt;
&lt;div class="code-lang"&gt;&lt;span class="bold"&gt;index.js&lt;/span&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;EventEmitter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;events&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;WildExtendEventEmitter&lt;/span&gt; &lt;span class="kd"&gt;extends&lt;/span&gt; &lt;span class="nx"&gt;EventEmitter&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// emitされた内容を"*"に再emit&lt;/span&gt;
    &lt;span class="nx"&gt;emit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;emit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="k"&gt;super&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;emit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;*&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;// 拡張したEventEmitter&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;WildExtendEventEmitter&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="c1"&gt;// ワイルドカードでイベントを受ける&lt;/span&gt;
&lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;*&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="nx"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="err"&gt;name: &lt;/span&gt;&lt;span class="p"&gt;${&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt; |&lt;/span&gt;&lt;span class="s2"&gt;`&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(...&lt;/span&gt;&lt;span class="nx"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="c1"&gt;//--------------------------------------------------&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;discord&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;discord.js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;guilded&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;guilded.js&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Dclient&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;discord&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Client&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="kd"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;Gclient&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;guilded&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;Client&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="nx"&gt;Dclient&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;message&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;channel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;dm&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;author&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;bot&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;channel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;discord-guilded&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;channel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;channels&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cache&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;channel&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;channel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;channel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;channel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;discord-guilded&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;channel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;text&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;embed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;discord&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;MessageEmbed&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
                        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setAuthor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Discord: &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;author&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;tag&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;author&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;avatarURL&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
                        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setDescription&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setColor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;0x2c2f33&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                    &lt;span class="nx"&gt;channel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;embed&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;emit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;g-guilded&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;name&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;author&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;tag&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;avatar&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;author&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;avatarURL&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;msg&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;content&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;Gclient&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;message&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;channel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;author&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="c1"&gt;//get the message content for line 1&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;content&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;channel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;discord-guilded&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;channel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;channels&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cache&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cache&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;channel&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="c1"&gt;// -- これで動作するのが意味不明 (message.channel.client.channels.cache.forEach はエラーが起きる)&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;channel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;entry&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;channel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;channel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;entry&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;discord-guilded&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nx"&gt;channel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;entry&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;([{&lt;/span&gt;
                    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;type&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;embed&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;content&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;title&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Guilded: &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;author&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;description&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;color&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2895667&lt;/span&gt;
                    &lt;span class="p"&gt;}&lt;/span&gt;
                &lt;span class="p"&gt;}]);&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;emit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;g-discord&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;name&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;message&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;author&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="s1"&gt;msg&lt;/span&gt;&lt;span class="dl"&gt;'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;text&lt;/span&gt; &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;Dclient&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ready&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;[Discord] bot is ready!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;Dclient&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;user&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setActivity&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Acrivity&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;Dclient&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;channels&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cache&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;channel&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;channel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;discord-guilded&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;channel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;text&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;embed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;discord&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;MessageEmbed&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
                    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setAuthor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Discord BOTが起動しました！&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                    &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setColor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;0x2c2f33&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                    &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nx"&gt;channel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;embed&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;5000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="c1"&gt;//場合によって変える&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;g-discord&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;Dclient&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;channels&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cache&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;channel&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;channel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;discord-guilded&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;channel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;type&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;text&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;embed&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;discord&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;MessageEmbed&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
                        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setAuthor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Guilded: &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setDescription&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setColor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;0x2c2f33&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;channel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;embed&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;Gclient&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;ready&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;[Guilded] self bot is ready!&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;setTimeout&lt;/span&gt;&lt;span class="p"&gt;(()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;Gclient&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;channels&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cache&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cache&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;channel&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="c1"&gt;// -- これで動作するのが意味不明 (message.channel.client.channels.cache.forEach はエラーが起きる)&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;channel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;entry&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;discord-guilded&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nx"&gt;channel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;entry&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;([{&lt;/span&gt;
                    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;type&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;embed&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;content&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;title&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Guilded BOTが起動しました！&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;color&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2895667&lt;/span&gt;
                    &lt;span class="p"&gt;}&lt;/span&gt;
                &lt;span class="p"&gt;}]);&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="mi"&gt;5000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="c1"&gt;//場合によって変える&lt;/span&gt;
    &lt;span class="nx"&gt;event&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;g-guilded&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;let&lt;/span&gt; &lt;span class="nx"&gt;cache&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;Gclient&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;channels&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cache&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cache&lt;/span&gt;
        &lt;span class="nx"&gt;cache&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;forEach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;channel&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;channel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;entry&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;===&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;discord-guilded&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;channel&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;entry&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;send&lt;/span&gt;&lt;span class="p"&gt;([{&lt;/span&gt;
                    &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;type&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;embed&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;content&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;title&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Discord: &lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;description&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;msg&lt;/span&gt;
                    &lt;span class="p"&gt;}&lt;/span&gt;
                &lt;span class="p"&gt;}]);&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="nx"&gt;Dclient&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;login&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Discord Token&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;Gclient&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;login&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Guilded e-mail&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="s2"&gt;Guilded password&lt;/span&gt;&lt;span class="dl"&gt;"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;h1&gt;
&lt;span id="画像" class="fragment"&gt;&lt;/span&gt;&lt;a href="#%E7%94%BB%E5%83%8F"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;画像&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F480250%2F1d8173e3-c795-553e-0c44-6e0eec746e33.png?ixlib=rb-1.2.2&amp;amp;auto=format&amp;amp;gif-q=60&amp;amp;q=75&amp;amp;s=c25c774e232db82314bfc2e4a67f1bd3" target="_blank" rel="nofollow noopener"&gt;&lt;img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F480250%2F1d8173e3-c795-553e-0c44-6e0eec746e33.png?ixlib=rb-1.2.2&amp;amp;auto=format&amp;amp;gif-q=60&amp;amp;q=75&amp;amp;s=c25c774e232db82314bfc2e4a67f1bd3" alt="image.png" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/480250/1d8173e3-c795-553e-0c44-6e0eec746e33.png" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F480250%2F1d8173e3-c795-553e-0c44-6e0eec746e33.png?ixlib=rb-1.2.2&amp;amp;auto=format&amp;amp;gif-q=60&amp;amp;q=75&amp;amp;w=1400&amp;amp;fit=max&amp;amp;s=f80541426900e626b93c8b02492ba0dc 1x" loading="lazy"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F480250%2F73ed7b9f-e10f-8ce4-b913-508c54b72ede.png?ixlib=rb-1.2.2&amp;amp;auto=format&amp;amp;gif-q=60&amp;amp;q=75&amp;amp;s=1c7376dbbb7b4d2e99bfd80a44a3786e" target="_blank" rel="nofollow noopener"&gt;&lt;img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F480250%2F73ed7b9f-e10f-8ce4-b913-508c54b72ede.png?ixlib=rb-1.2.2&amp;amp;auto=format&amp;amp;gif-q=60&amp;amp;q=75&amp;amp;s=1c7376dbbb7b4d2e99bfd80a44a3786e" alt="image.png" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/480250/73ed7b9f-e10f-8ce4-b913-508c54b72ede.png" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F480250%2F73ed7b9f-e10f-8ce4-b913-508c54b72ede.png?ixlib=rb-1.2.2&amp;amp;auto=format&amp;amp;gif-q=60&amp;amp;q=75&amp;amp;w=1400&amp;amp;fit=max&amp;amp;s=43e949f4ab4f2dffdc588baf02973861 1x" loading="lazy"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
&lt;span id="まとめ" class="fragment"&gt;&lt;/span&gt;&lt;a href="#%E3%81%BE%E3%81%A8%E3%82%81"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;まとめ&lt;/h1&gt;

&lt;p&gt;クロスチャットはBOTが導入・参加されているサーバーで会話することができます。&lt;/p&gt;

&lt;p&gt;Guilded.jsは、意味不明なコードじゃないと動作しない場合があります。(いつか、修正されるはず)&lt;/p&gt;
</content>
    <published>2020-12-19T02:05:13Z</published>
    <updated>2020-12-19T02:58:55Z</updated>
    <author>
      <name>7yultukuri7</name>
    </author>
  </entry>
  <entry>
    <id>tag:qiita.com,2005:PublicArticle/1361687</id>
    <published>2020-12-19T01:49:15+09:00</published>
    <updated>2020-12-19T10:13:23+09:00</updated>
    <link rel="alternate" type="text/html" href="https://qiita.com/7yultukuri7/items/3165a142da819ce9749e"/>
    <url>https://qiita.com/7yultukuri7/items/3165a142da819ce9749e</url>
    <title>Discord.jsとGuilded.js, Discord.pyとGuilded.pyの違いとGuildedのBOT作成の準備の説明</title>
    <content type="html">
&lt;h1&gt;
&lt;span id="概要" class="fragment"&gt;&lt;/span&gt;&lt;a href="#%E6%A6%82%E8%A6%81"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;概要&lt;/h1&gt;

&lt;p&gt;Discord.jsとGuilded.js, Discord.pyとGuilded.pyの違いと、GuildedというチャットツールのBOT作成の準備の手順を書きました。&lt;/p&gt;

&lt;h1&gt;
&lt;span id="discordjsとguildedjsの違い" class="fragment"&gt;&lt;/span&gt;&lt;a href="#discordjs%E3%81%A8guildedjs%E3%81%AE%E9%81%95%E3%81%84"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;Discord.jsとGuilded.jsの違い&lt;/h1&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style="text-align: center"&gt;画像&lt;/th&gt;
&lt;th style="text-align: center"&gt;名称&lt;/th&gt;
&lt;th style="text-align: center"&gt;いつ誕生&lt;/th&gt;
&lt;th style="text-align: center"&gt;機能&lt;/th&gt;
&lt;th style="text-align: center"&gt;使用するAPI&lt;/th&gt;
&lt;th style="text-align: center"&gt;リンク&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style="text-align: center"&gt;&lt;a href="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F480250%2Ff9d9328c-b7df-6f37-867b-507489bcdc61.png?ixlib=rb-1.2.2&amp;amp;auto=format&amp;amp;gif-q=60&amp;amp;q=75&amp;amp;s=13fa71acdef04289c4656e3cab054b96" target="_blank" rel="nofollow noopener"&gt;&lt;img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F480250%2Ff9d9328c-b7df-6f37-867b-507489bcdc61.png?ixlib=rb-1.2.2&amp;amp;auto=format&amp;amp;gif-q=60&amp;amp;q=75&amp;amp;s=13fa71acdef04289c4656e3cab054b96" width="100px" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/480250/f9d9328c-b7df-6f37-867b-507489bcdc61.png" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F480250%2Ff9d9328c-b7df-6f37-867b-507489bcdc61.png?ixlib=rb-1.2.2&amp;amp;auto=format&amp;amp;gif-q=60&amp;amp;q=75&amp;amp;w=1400&amp;amp;fit=max&amp;amp;s=942093e60b1191c3255afabe40a537b1 1x" loading="lazy"&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td style="text-align: center"&gt;Discord.js&lt;/td&gt;
&lt;td style="text-align: center"&gt;2015/08/05&lt;/td&gt;
&lt;td style="text-align: center"&gt;多機能&lt;/td&gt;
&lt;td style="text-align: center"&gt;Discord公式が用意したBOT API&lt;/td&gt;
&lt;td style="text-align: center"&gt;ドキュメント: &lt;a href="https://discord.js.org/#/" class="autolink" rel="nofollow noopener" target="_blank"&gt;https://discord.js.org/#/&lt;/a&gt; &lt;br&gt;&lt;a href="https://github.com/discordjs/discord.js" class="autolink" rel="nofollow noopener" target="_blank"&gt;https://github.com/discordjs/discord.js&lt;/a&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: center"&gt;&lt;a href="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F480250%2F73215f4e-25c3-caed-51d5-421a394cb079.png?ixlib=rb-1.2.2&amp;amp;auto=format&amp;amp;gif-q=60&amp;amp;q=75&amp;amp;s=5b9f6865c367eac25b738ca923b3c2f1" target="_blank" rel="nofollow noopener"&gt;&lt;img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F480250%2F73215f4e-25c3-caed-51d5-421a394cb079.png?ixlib=rb-1.2.2&amp;amp;auto=format&amp;amp;gif-q=60&amp;amp;q=75&amp;amp;s=5b9f6865c367eac25b738ca923b3c2f1" width="100px" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/480250/73215f4e-25c3-caed-51d5-421a394cb079.png" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F480250%2F73215f4e-25c3-caed-51d5-421a394cb079.png?ixlib=rb-1.2.2&amp;amp;auto=format&amp;amp;gif-q=60&amp;amp;q=75&amp;amp;w=1400&amp;amp;fit=max&amp;amp;s=1c347205ef7c630a45f656c177024fa0 1x" loading="lazy"&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td style="text-align: center"&gt;Guilded.js&lt;/td&gt;
&lt;td style="text-align: center"&gt;2020/08/01&lt;/td&gt;
&lt;td style="text-align: center"&gt;数ヶ月しかたってないので少ない....&lt;/td&gt;
&lt;td style="text-align: center"&gt;セルフアカウントのAPI&lt;/td&gt;
&lt;td style="text-align: center"&gt;ドキュメント: &lt;a href="https://www.guilded.gg/guilded-api/groups/Q3myMlQ3/channels/9f1f95d8-bec2-464a-b8a9-8f7fd2d9013f/docs" class="autolink" rel="nofollow noopener" target="_blank"&gt;https://www.guilded.gg/guilded-api/groups/Q3myMlQ3/channels/9f1f95d8-bec2-464a-b8a9-8f7fd2d9013f/docs&lt;/a&gt; &lt;br&gt;&lt;a href="https://github.com/Chixel/guilded.js" class="autolink" rel="nofollow noopener" target="_blank"&gt;https://github.com/Chixel/guilded.js&lt;/a&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: center"&gt;&lt;a href="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F480250%2Fbf70333e-36d6-bf28-60f5-ad72e3bd5dfe.png?ixlib=rb-1.2.2&amp;amp;auto=format&amp;amp;gif-q=60&amp;amp;q=75&amp;amp;s=2537d38c346202cf2cf44ff3316d6e01" target="_blank" rel="nofollow noopener"&gt;&lt;img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F480250%2Fbf70333e-36d6-bf28-60f5-ad72e3bd5dfe.png?ixlib=rb-1.2.2&amp;amp;auto=format&amp;amp;gif-q=60&amp;amp;q=75&amp;amp;s=2537d38c346202cf2cf44ff3316d6e01" width="100px" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/480250/bf70333e-36d6-bf28-60f5-ad72e3bd5dfe.png" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F480250%2Fbf70333e-36d6-bf28-60f5-ad72e3bd5dfe.png?ixlib=rb-1.2.2&amp;amp;auto=format&amp;amp;gif-q=60&amp;amp;q=75&amp;amp;w=1400&amp;amp;fit=max&amp;amp;s=56d8feb0aded40bd49c0915c879f27d5 1x" loading="lazy"&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td style="text-align: center"&gt;Discord.py&lt;/td&gt;
&lt;td style="text-align: center"&gt;2015/08/25&lt;/td&gt;
&lt;td style="text-align: center"&gt;多機能&lt;/td&gt;
&lt;td style="text-align: center"&gt;Discord公式が用意したBOT API&lt;/td&gt;
&lt;td style="text-align: center"&gt;ドキュメント: &lt;a href="https://discordpy.readthedocs.io/ja/latest/" class="autolink" rel="nofollow noopener" target="_blank"&gt;https://discordpy.readthedocs.io/ja/latest/&lt;/a&gt; &lt;br&gt;&lt;a href="https://github.com/Rapptz/discord.py" class="autolink" rel="nofollow noopener" target="_blank"&gt;https://github.com/Rapptz/discord.py&lt;/a&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: center"&gt;&lt;a href="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F480250%2F46dc3efb-9cda-3b8b-b1cc-041ac472adf9.png?ixlib=rb-1.2.2&amp;amp;auto=format&amp;amp;gif-q=60&amp;amp;q=75&amp;amp;s=93221190bed8b38a2bf902c320aa7b17" target="_blank" rel="nofollow noopener"&gt;&lt;img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F480250%2F46dc3efb-9cda-3b8b-b1cc-041ac472adf9.png?ixlib=rb-1.2.2&amp;amp;auto=format&amp;amp;gif-q=60&amp;amp;q=75&amp;amp;s=93221190bed8b38a2bf902c320aa7b17" width="100px" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/480250/46dc3efb-9cda-3b8b-b1cc-041ac472adf9.png" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F480250%2F46dc3efb-9cda-3b8b-b1cc-041ac472adf9.png?ixlib=rb-1.2.2&amp;amp;auto=format&amp;amp;gif-q=60&amp;amp;q=75&amp;amp;w=1400&amp;amp;fit=max&amp;amp;s=f173ec5afcad7b832e363dace0227295 1x" loading="lazy"&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td style="text-align: center"&gt;Guilded.py&lt;/td&gt;
&lt;td style="text-align: center"&gt;2020/07/29&lt;/td&gt;
&lt;td style="text-align: center"&gt;数ヶ月しかたってないので少ない....&lt;/td&gt;
&lt;td style="text-align: center"&gt;セルフアカウントのAPI&lt;/td&gt;
&lt;td style="text-align: center"&gt;ドキュメント: &lt;a href="https://www.guilded.gg/guilded-api/groups/WD56qLmd/channels/b43d6028-8277-4a1f-93be-ba5f8af128a8/docs" class="autolink" rel="nofollow noopener" target="_blank"&gt;https://www.guilded.gg/guilded-api/groups/WD56qLmd/channels/b43d6028-8277-4a1f-93be-ba5f8af128a8/docs&lt;/a&gt; &lt;br&gt;&lt;a href="https://github.com/shayypy/guilded.py" class="autolink" rel="nofollow noopener" target="_blank"&gt;https://github.com/shayypy/guilded.py&lt;/a&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;なんか、アイコン似てる....&lt;/p&gt;

&lt;h1&gt;
&lt;span id="guildedのセルフアカウントについて" class="fragment"&gt;&lt;/span&gt;&lt;a href="#guilded%E3%81%AE%E3%82%BB%E3%83%AB%E3%83%95%E3%82%A2%E3%82%AB%E3%82%A6%E3%83%B3%E3%83%88%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;Guildedのセルフアカウントについて&lt;/h1&gt;

&lt;p&gt;GUildedは、公式が用意したBOT APIがないので、自分でセルフアカウント作成して、使います。(ずいぶん前のDiscordみたいにセルフアカウントを作成する)&lt;br&gt;
Guilded運営の人たちは、いろんな人たちがセルフアカウントでBOTを作っていることは認知されています。&lt;br&gt;
Guilded.jsやGuilded.pyにメールとパスワードを入れてログインすればセルフアカウントのAPIが使えます。(Discordは、ずいぶん前はOK!だったらしいけど、現在は、利用規約で禁止されています。)&lt;/p&gt;

&lt;h1&gt;
&lt;span id="準備の仕方" class="fragment"&gt;&lt;/span&gt;&lt;a href="#%E6%BA%96%E5%82%99%E3%81%AE%E4%BB%95%E6%96%B9"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;準備の仕方&lt;/h1&gt;

&lt;p&gt;1, まず、&lt;a href="https://www.guilded.gg" class="autolink" rel="nofollow noopener" target="_blank"&gt;https://www.guilded.gg&lt;/a&gt; でボット用のセルフアカウントを作成します。&lt;br&gt;
2. ボットを動作させたいサーバーに参加させます。&lt;/p&gt;

&lt;h2&gt;
&lt;span id="guildedjs-nodejs-v14をインストールされている前提" class="fragment"&gt;&lt;/span&gt;&lt;a href="#guildedjs-nodejs-v14%E3%82%92%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB%E3%81%95%E3%82%8C%E3%81%A6%E3%81%84%E3%82%8B%E5%89%8D%E6%8F%90"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;Guilded.js (Node.js V14をインストールされている前提)&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;code&gt;npm install guilded.js&lt;/code&gt;を実行してインストールします。&lt;/li&gt;
&lt;li&gt;プログラミングします。&lt;/li&gt;
&lt;li&gt;以上&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
&lt;span id="guildedpy-python-3をインストールされている前提" class="fragment"&gt;&lt;/span&gt;&lt;a href="#guildedpy-python-3%E3%82%92%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB%E3%81%95%E3%82%8C%E3%81%A6%E3%81%84%E3%82%8B%E5%89%8D%E6%8F%90"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;Guilded.py (python 3をインストールされている前提)&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;code&gt;pip install guilded.py&lt;/code&gt;を実行してインストールします。&lt;/li&gt;
&lt;li&gt;プログラミングします。&lt;/li&gt;
&lt;li&gt;以上&lt;/li&gt;
&lt;/ol&gt;

&lt;h1&gt;
&lt;span id="注意事項" class="fragment"&gt;&lt;/span&gt;&lt;a href="#%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A0%85"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;注意事項&lt;/h1&gt;

&lt;p&gt;Guilded.jsをDiscord.jsの感覚でやるとエラーが起こります。そのため、&lt;code&gt;console.log&lt;/code&gt;を使うなどしていろんな手段で地道に解決してください。&lt;br&gt;
&lt;a href="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F480250%2F9aa077a6-2468-4528-1ed9-a522bc494428.png?ixlib=rb-1.2.2&amp;amp;auto=format&amp;amp;gif-q=60&amp;amp;q=75&amp;amp;s=b08ea2909699896a68b087cf6c01dc8c" target="_blank" rel="nofollow noopener"&gt;&lt;img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F480250%2F9aa077a6-2468-4528-1ed9-a522bc494428.png?ixlib=rb-1.2.2&amp;amp;auto=format&amp;amp;gif-q=60&amp;amp;q=75&amp;amp;s=b08ea2909699896a68b087cf6c01dc8c" alt="image.png" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/480250/9aa077a6-2468-4528-1ed9-a522bc494428.png" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F480250%2F9aa077a6-2468-4528-1ed9-a522bc494428.png?ixlib=rb-1.2.2&amp;amp;auto=format&amp;amp;gif-q=60&amp;amp;q=75&amp;amp;w=1400&amp;amp;fit=max&amp;amp;s=67d29f21fff62bb4c97ec1ed060f9c2e 1x" loading="lazy"&gt;&lt;/a&gt;&lt;br&gt;
できたホヤホヤなので、場合によっては動作しなかったりすることがあります。&lt;/p&gt;

&lt;p&gt;※できたホヤホヤを他の視点で捉えれば、コード管理がしやすい点とコードが複雑ではない点が上げられます。&lt;/p&gt;
</content>
    <published>2020-12-19T01:49:15Z</published>
    <updated>2020-12-19T10:13:23Z</updated>
    <author>
      <name>7yultukuri7</name>
    </author>
  </entry>
  <entry>
    <id>tag:qiita.com,2005:PublicArticle/1361161</id>
    <published>2020-12-18T14:47:41+09:00</published>
    <updated>2020-12-20T13:35:03+09:00</updated>
    <link rel="alternate" type="text/html" href="https://qiita.com/kojix2/items/e5704aeb0bbe0f114166"/>
    <url>https://qiita.com/kojix2/items/e5704aeb0bbe0f114166</url>
    <title>次世代シーケンサーのデータをRubyで操作するライブラリを作りたい話 ruby-htslib</title>
    <content type="html">
&lt;h2&gt;
&lt;span id="はじめに" class="fragment"&gt;&lt;/span&gt;&lt;a href="#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;はじめに&lt;/h2&gt;

&lt;p&gt;　こんにちは。この記事はバイオインフォマティクス Advent Calendar 2020 の記事です。&lt;/p&gt;

&lt;p&gt;　本当は、今日までに&lt;a href="https://github.com/kojix2/ruby-htslib" rel="nofollow noopener" target="_blank"&gt;Ruby-htslib&lt;/a&gt;の開発を進めて、公開したかったのですが、あまり進んでないので、もうあきらめて、背景的なことをタラタラと書いていこうと思います。&lt;/p&gt;

&lt;p&gt;　この記事は未完成ですが見切りをつけて公開します。ruby-htslibの開発が進んだら更新しようと思います。&lt;/p&gt;

&lt;h2&gt;
&lt;span id="rubyに対するこだわり" class="fragment"&gt;&lt;/span&gt;&lt;a href="#ruby%E3%81%AB%E5%AF%BE%E3%81%99%E3%82%8B%E3%81%93%E3%81%A0%E3%82%8F%E3%82%8A"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;Rubyに対するこだわり&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F144608%2F42235432-c1f1-e460-1825-f1e1ab265036.png?ixlib=rb-1.2.2&amp;amp;auto=format&amp;amp;gif-q=60&amp;amp;q=75&amp;amp;s=c232426ac9e339fb394576cc0c313ee9" target="_blank" rel="nofollow noopener"&gt;&lt;img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F144608%2F42235432-c1f1-e460-1825-f1e1ab265036.png?ixlib=rb-1.2.2&amp;amp;auto=format&amp;amp;gif-q=60&amp;amp;q=75&amp;amp;s=c232426ac9e339fb394576cc0c313ee9" alt="image.png" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/144608/42235432-c1f1-e460-1825-f1e1ab265036.png" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F144608%2F42235432-c1f1-e460-1825-f1e1ab265036.png?ixlib=rb-1.2.2&amp;amp;auto=format&amp;amp;gif-q=60&amp;amp;q=75&amp;amp;w=1400&amp;amp;fit=max&amp;amp;s=404ecb88c926543e084cbfa462550717 1x" loading="lazy"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;　R、Python, Perl, Julia, C++..世の中には星の数ほど素晴らしい言語があります。しかし私はRuby言語が好きです。私がたまたま最初に書けるようになったのはRuby言語だったからです。そこで、あたかもカルガモのヒナが最初に見たプログラミング言語を親だと思いこむように、Rubyが母国語になりました。(嘘です。Ruby言語の前にObjective-C言語とかに挑戦したことがありますが諦めました。Objective-C言語に比較すると、Rubyは単純で美しく見えました）&lt;/p&gt;

&lt;p&gt;　そんなRuby言語の特徴は、RやJulia等と比較すると、ほとんどあらゆるものがオブジェクトで構成され、関数のかわりにメソッドを使うことです。この世界では「データ」と「手続き」がひとまとまりの「オブジェクト」として存在しています。これは一般的にデータ解析では不利な性質だと思います。一方で「何かを道具を作りたい」という人にとっては、力強いサポートになります。私も気がつくと、Rubyでツールを作ろうとしてしまいます。&lt;/p&gt;

&lt;h2&gt;
&lt;span id="rubyでも次世代シーケンサーのデータを扱いたい" class="fragment"&gt;&lt;/span&gt;&lt;a href="#ruby%E3%81%A7%E3%82%82%E6%AC%A1%E4%B8%96%E4%BB%A3%E3%82%B7%E3%83%BC%E3%82%B1%E3%83%B3%E3%82%B5%E3%83%BC%E3%81%AE%E3%83%87%E3%83%BC%E3%82%BF%E3%82%92%E6%89%B1%E3%81%84%E3%81%9F%E3%81%84"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;Rubyでも次世代シーケンサーのデータを扱いたい&lt;/h2&gt;

&lt;p&gt;　さて、Ruby言語はデータ解析にはあまり向いていないかもしれないと言いましたが、中には根強いファンもいて、BioRubyという生命情報用のライブラリもります。&lt;/p&gt;

&lt;p&gt;&lt;a href="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F144608%2Fefd5d000-1568-0662-b8c5-993921a48cad.png?ixlib=rb-1.2.2&amp;amp;auto=format&amp;amp;gif-q=60&amp;amp;q=75&amp;amp;s=25753431174bedbe78fe03b502e9e907" target="_blank" rel="nofollow noopener"&gt;&lt;img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F144608%2Fefd5d000-1568-0662-b8c5-993921a48cad.png?ixlib=rb-1.2.2&amp;amp;auto=format&amp;amp;gif-q=60&amp;amp;q=75&amp;amp;s=25753431174bedbe78fe03b502e9e907" alt="image.png" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/144608/efd5d000-1568-0662-b8c5-993921a48cad.png" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F144608%2Fefd5d000-1568-0662-b8c5-993921a48cad.png?ixlib=rb-1.2.2&amp;amp;auto=format&amp;amp;gif-q=60&amp;amp;q=75&amp;amp;w=1400&amp;amp;fit=max&amp;amp;s=d7f6fed106ae9733023451e8fb64acd1 1x" loading="lazy"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;BioRuby：　&lt;a href="http://bioruby.org/" class="autolink" rel="nofollow noopener" target="_blank"&gt;http://bioruby.org/&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;リポジトリ：　&lt;a href="https://github.com/bioruby/bioruby%E3%80%80" class="autolink" rel="nofollow noopener" target="_blank"&gt;https://github.com/bioruby/bioruby　&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;ドキュメント：　&lt;a href="http://bioruby.org/rdoc/" class="autolink" rel="nofollow noopener" target="_blank"&gt;http://bioruby.org/rdoc/&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;　けれども、今日の、何やらすごい研究のデータは、次世代シーケンサーの出力するデータを利用していることが多いです。そういった次世代シーケンサー関連のデータのファイル形式、つまり&lt;code&gt;SAM&lt;/code&gt;, &lt;code&gt;BAM&lt;/code&gt;, &lt;code&gt;VCF&lt;/code&gt;, &lt;code&gt;BCF&lt;/code&gt;といったフォーマットを扱います。これを扱うのはBioRubyでは難しいらしい、ということが私にもわかってきました。&lt;/p&gt;

&lt;p&gt;　誰か素敵なライブラリを作っていないのかな？　と思って探しました。ひとつありました。Bioruby-samtoolsです。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;リポジトリ：　&lt;a href="https://github.com/helios/bioruby-samtools" class="autolink" rel="nofollow noopener" target="_blank"&gt;https://github.com/helios/bioruby-samtools&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;論文：　&lt;a href="https://scfbm.biomedcentral.com/articles/10.1186/1751-0473-7-6" rel="nofollow noopener" target="_blank"&gt;Bio-samtools: Ruby bindings for SAMtools, a library for accessing BAM files containing high-throughput sequence alignments&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;　けれどもこのプロジェクトはSamtoolsをコマンドラインから呼び出すツールでして、細かくファイルを操作できるツールとはちょっと違う感じでした。（このプロジェクトは以前FFIを利用してSamtoolsのバインディングとして構成されていましたが、SamtoolsからHTSlibが分離された時にOpen3を使用するようになったそうです。Open3とは、プログラムを実行し、そのプロセスの標準入力・標準出力・標準エラー出力にパイプをつなぎます。つまりバインディングではありません。APIが安定したらFFIを利用してHTSlibのバインディングを作成する予定だったそうですが、開発者の方は余裕がなくてなかなか作成できなかったそうです）&lt;/p&gt;

&lt;p&gt;　一方で、Python、Rといった言語では次世代シーケンサーのファイルを利用できるライブラリが存在します。そして結果として解析用のtoolやパイプラインも多く開発されています。&lt;/p&gt;

&lt;p&gt;　普通であれば、目的に応じてツールを選択するということで、柔軟に言語を切り替えて利用するべきです。私も頭ではわかっているのですが、なかなかそのような合理的な方法をとることができません。モグラのように、なんとかしてRuby言語でもこれらのファイルを扱う方法はないだろうかと考えはじめました。&lt;/p&gt;

&lt;h2&gt;
&lt;span id="sambamというフォーマット" class="fragment"&gt;&lt;/span&gt;&lt;a href="#sambam%E3%81%A8%E3%81%84%E3%81%86%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%83%E3%83%88"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;SAM/BAMというフォーマット&lt;/h2&gt;

&lt;p&gt;　&lt;code&gt;SAM&lt;/code&gt; ファイルや &lt;code&gt;BAM&lt;/code&gt; ファイルといった形式は、リードのアラインメントを表したファイルです。次世代シーケンサーはFASTQというリードのファイルを生成します。このファイルを、&lt;code&gt;bwa&lt;/code&gt;や&lt;code&gt;STAR&lt;/code&gt;といったアライナーでリファレンスゲノムにマッピングした結果のファイルがSAM/BAMファイルです。&lt;/p&gt;

&lt;p&gt;　これは少し奇妙なファイル形式だと思います。私たちの身の回りには、SQLiteなどもっと一般的なデータベースがあります。タブ区切りテキストや、MS Excelといったファイル形式もあります。しかし生命情報の世界ではそれらのファイルではなく、SAM/BAMファイルが好んで利用されているようです。&lt;/p&gt;

&lt;div class="code-frame" data-lang="bam"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;@HD VN:1.6 SO:coordinate
@SQ SN:ref LN:45
r001   99 ref  7 30 8M2I4M1D3M = 37  39 TTAGATAAAGGATACTG *
r002    0 ref  9 30 3S6M1P1I4M *  0   0 AAAAGATAAGGATA    *
r003    0 ref  9 30 5S6M       *  0   0 GCCTAAGCTAA       * SA:Z:ref,29,-,6H5M,17,0;
r004    0 ref 16 30 6M14N5M    *  0   0 ATAGCTTCAGC       *
r003 2064 ref 29 17 6H5M       *  0   0 TAGGC             * SA:Z:ref,9,+,5S6M,30,1;
r001  147 ref 37 30 9M         =  7 -39 CAGCGGCAT         * NM:i:1
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;↑ 仕様書(hts-spec)に載っているSAMファイルの例。見慣れないヘッダー、フラグ、タグがついている。フラグは、リードがマッピングされているかいないかといった非常に重要な情報が含まれている。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;SAM/BAMに関連するリンク

&lt;ul&gt;
&lt;li&gt;SAM/BAM仕様書：　&lt;a href="https://github.com/samtools/hts-specs" class="autolink" rel="nofollow noopener" target="_blank"&gt;https://github.com/samtools/hts-specs&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;a href="https://qiita.com/kojix2/items/af002097ac12117f458a" id="reference-9acced18cef0a062d86e"&gt;SAM形式とBAM形式&lt;/a&gt;&lt;br&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://kazumaxneo.hatenablog.com/entry/2017/06/19/225006" rel="nofollow noopener" target="_blank"&gt;macでインフォマティクス - sam/bam関係のツールまとめ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;フラグは２進数で表記されており、パット見ても何を意味しているのか人間にはわかりません。&lt;code&gt;samtools flag&lt;/code&gt; コマンドを使うと、フラグの意味を表示してくれます。&lt;/p&gt;

&lt;div class="code-frame" data-lang="text"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;samtools flag 2064
# 0x810 2064    REVERSE,SUPPLEMENTARY
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;↑ samtoolsでフラグの意味を表示したところ&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Integer&lt;/th&gt;
&lt;th&gt;Binary&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;000000000001&lt;/td&gt;
&lt;td&gt;ペアリードがある&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;000000000010&lt;/td&gt;
&lt;td&gt;両方マップされている&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;000000000100&lt;/td&gt;
&lt;td&gt;read1 はマップされていない&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;000000001000&lt;/td&gt;
&lt;td&gt;read2（相方） はマップされていない&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;16&lt;/td&gt;
&lt;td&gt;000000010000&lt;/td&gt;
&lt;td&gt;read1 は逆相補鎖にマップされている&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;32&lt;/td&gt;
&lt;td&gt;000000100000&lt;/td&gt;
&lt;td&gt;read2（相方） は逆相補鎖にマップされてる&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;64&lt;/td&gt;
&lt;td&gt;000001000000&lt;/td&gt;
&lt;td&gt;read1 である&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;128&lt;/td&gt;
&lt;td&gt;000010000000&lt;/td&gt;
&lt;td&gt;read2 である&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;256&lt;/td&gt;
&lt;td&gt;000100000000&lt;/td&gt;
&lt;td&gt;複数個所にマップされている&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;512&lt;/td&gt;
&lt;td&gt;001000000000&lt;/td&gt;
&lt;td&gt;マッピングＱＶが低い&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1024&lt;/td&gt;
&lt;td&gt;010000000000&lt;/td&gt;
&lt;td&gt;PCR or optical duplicate&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2048&lt;/td&gt;
&lt;td&gt;100000000000&lt;/td&gt;
&lt;td&gt;supplementary alignment (e.g. aligner specific, could be a portion of a split read or a tied region)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;↑ フラグの表&lt;/p&gt;

&lt;p&gt;BAMファイルはSAMファイルの圧縮形式で、gzipと互換性のあるフォーマットだそうです。BAMファイルは圧縮されても検索しやすくなるように工夫されているようです。&lt;code&gt;CRAM&lt;/code&gt; というよく似たファイル形式もあります。こちらはBAMよりも圧縮率が高いファイル形式のようです。これら特殊な形式のファイルを、Samtoolsというコマンドラインツールを使っていろいろ操作していくのです。&lt;/p&gt;

&lt;p&gt;　実際のところ、この初心者に対する嫌がらせのようにも思えるファイル形式が使われている理由は、歴史的な経緯と、人類の技術的限界によるところが大きいのだと思います。RNA-SeqのBAMファイルは小さいものでも数GBあったりしますし、全ゲノムシーケンスなら数十GBにおよびます。これだけでも十分に巨大ですが、SQLiteやTSVにするとその数倍以上のサイズになるでしょう。そのような巨大なファイルをエクセルで検索することは当然難しくなります。解析するのも大変でしょうし、保存するスペースを確保するのも大変でしょう。サイズの問題、そして可能な限り高速に検索するために、特殊なフォーマットが開発されたということなのでしょう。（興味がある方は下のエントリーをお読みください）&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;a href="https://www.biostars.org/p/456664/" rel="nofollow noopener" target="_blank"&gt;Forum: Why does bioinformatics use a special format like a BAM file instead of a database like SQLite?&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;煽り気味の質問にも親切に答えてくれるBiostarsのみなさん&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;　しかしながら、コンピュータの性能は上がり続けています。いつまでも同じ状況が続くとは限りません。10年後、20年後には、現在の配列情報の処理は、スマートフォンで十分であるという時代が来るかも知れません。たとえばbiowasmとかいうプロジェクトがあります。これは、なんとWebAssemblyを使うことでブラウザ上で&lt;code&gt;samtools&lt;/code&gt; &lt;code&gt;bedtools&lt;/code&gt; &lt;code&gt;bowtie&lt;/code&gt; &lt;code&gt;seqkit&lt;/code&gt; 等を動かしてしまうというようなものだそうです。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/biowasm/biowasm/" class="autolink" rel="nofollow noopener" target="_blank"&gt;https://github.com/biowasm/biowasm/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F144608%2F25b265f5-b3bf-08a5-d1a0-53325c9bb016.png?ixlib=rb-1.2.2&amp;amp;auto=format&amp;amp;gif-q=60&amp;amp;q=75&amp;amp;s=1abd68015f8a837089cba0a18f4a3c97" target="_blank" rel="nofollow noopener"&gt;&lt;img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F144608%2F25b265f5-b3bf-08a5-d1a0-53325c9bb016.png?ixlib=rb-1.2.2&amp;amp;auto=format&amp;amp;gif-q=60&amp;amp;q=75&amp;amp;s=1abd68015f8a837089cba0a18f4a3c97" alt="image.png" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/144608/25b265f5-b3bf-08a5-d1a0-53325c9bb016.png" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F144608%2F25b265f5-b3bf-08a5-d1a0-53325c9bb016.png?ixlib=rb-1.2.2&amp;amp;auto=format&amp;amp;gif-q=60&amp;amp;q=75&amp;amp;w=1400&amp;amp;fit=max&amp;amp;s=d30f10ae02086cf642a36450783ad82c 1x" loading="lazy"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;↑ ブラウザ上でゲノミクスのツールを動かす野心的なプロジェクトbiowasm&lt;/p&gt;

&lt;p&gt;　現状ではこのようなツールは役に立たないかも知れません。世間的には巨額な予算を獲得して、ワークフロー言語を使ってクラウド環境やスーパーコンピューターなど多数のPCを操作して、数の暴力により効率的に大量に検体を処理して新事実を発見しないとなかなか評価の対象にならないのかもしれません。しかしそんな勇ましいことを言っても、そんなことができるのは現実的には地球上でもごく少数の人だけでしょう。ですから、そのように物事をとらえてしまうと、どんどんと暗い気持ちになってしまうのではないでしょうかね。（少なくとも私は暗い気持ちになります）&lt;/p&gt;

&lt;p&gt;　ですから、そういった世知辛さとは遠いところにあるツールに触れたり眺めたりしている時間こそ、心あたたまる大切な時間だという気がいたします。&lt;/p&gt;

&lt;h3&gt;
&lt;span id="sambamのアイコンが見当たらない話" class="fragment"&gt;&lt;/span&gt;&lt;a href="#sambam%E3%81%AE%E3%82%A2%E3%82%A4%E3%82%B3%E3%83%B3%E3%81%8C%E8%A6%8B%E5%BD%93%E3%81%9F%E3%82%89%E3%81%AA%E3%81%84%E8%A9%B1"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;SAM/BAMのアイコンが見当たらない話&lt;/h3&gt;

&lt;p&gt;　話がとびましたが、さらに話がとびます。&lt;/p&gt;

&lt;p&gt;　SAMファイルやBAMファイルのアイコンというものが見つからないことが気になっています。バイオインフォ用アイコンセットというものがないか結構探しました。コマンドライン上の操作に強い人はそんなの気にならないのかもしれませんが、個人的には気持ちよく作業をするためにはファイル・アイコンの存在はとても大事なことだと考えています。&lt;/p&gt;

&lt;p&gt;　もしもバイオインフォ用の素晴らしいアイコンセットを知っている方はコメント欄で教えてほしいなと思います。多分世界のどこかにはそういうものを作っている人がいるけれども、見つかってないだけだと思います。まあ自分でデザインして、身銭を切ってデザイナーの方に仕上げてもらい、それを著作権フリーで公開するという最終手段もありますが。&lt;/p&gt;

&lt;h2&gt;
&lt;span id="sambamの仕様書を読む" class="fragment"&gt;&lt;/span&gt;&lt;a href="#sambam%E3%81%AE%E4%BB%95%E6%A7%98%E6%9B%B8%E3%82%92%E8%AA%AD%E3%82%80"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;SAM/BAMの仕様書を読む&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;SAM/BAM仕様書：　&lt;a href="https://github.com/samtools/hts-specs" class="autolink" rel="nofollow noopener" target="_blank"&gt;https://github.com/samtools/hts-specs&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;は、Githubのリポジトリとして公開されています。日本語の情報があまりないので、詳しい内容を知りたい時は原典にあたる必要があります。しかし、PDFファイルであるため、Google翻訳がなかなか効きません。なので、PDFから文字起こしをして、Qiitaに記事として投稿しました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://qiita.com/kojix2/items/0b7f21e858c4f196e2f1" id="reference-8befb3feea1a13ac2d2a"&gt;【機械翻訳用】Sequence Alignment/Map Format Specification&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;↑のサイトをGoogle翻訳することによって、ある程度日本語でSAM/BAMファイルの仕様を把握することができます。&lt;/p&gt;

&lt;h2&gt;
&lt;span id="vcf形式とbcf形式" class="fragment"&gt;&lt;/span&gt;&lt;a href="#vcf%E5%BD%A2%E5%BC%8F%E3%81%A8bcf%E5%BD%A2%E5%BC%8F"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;VCF形式とBCF形式&lt;/h2&gt;

&lt;p&gt;　VCF/BCFは突然変異の形式です。こちらはまだ表面的にも理解できているとは言えないので、今後の勉強が必要です。まずはSAM/BAM形式のように仕様書を機械翻訳して全体の概要をつかもうと考えています。&lt;/p&gt;

&lt;h2&gt;
&lt;span id="samtoolsの内部ではhtslibが動いている" class="fragment"&gt;&lt;/span&gt;&lt;a href="#samtools%E3%81%AE%E5%86%85%E9%83%A8%E3%81%A7%E3%81%AFhtslib%E3%81%8C%E5%8B%95%E3%81%84%E3%81%A6%E3%81%84%E3%82%8B"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;Samtoolsの内部ではHTSlibが動いている&lt;/h2&gt;

&lt;p&gt;　さて、このSamtoolsはC言語で作られていて、Samtoolsの内部ではhtslibというライブラリが、いわばエンジンのように動いていることがわかりました。HTSLibは、もともとSamtoolsの一部だったものをHTSLibとして切り分けたようです。そして、Python言語やJava言語など、いろいろな言語でhtslibに対するバインディングが作成されていることがわかりました。PythonやRのような言語でも、SAM/BAM/VCF/BCFを直接扱うようなツールは、htslibを間接的に利用していることを知りました。&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;言語&lt;/th&gt;
&lt;th&gt;URL&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Python&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/pysam-developers/pysam" class="autolink" rel="nofollow noopener" target="_blank"&gt;https://github.com/pysam-developers/pysam&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;JAVA&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/samtools/htsjdk" class="autolink" rel="nofollow noopener" target="_blank"&gt;https://github.com/samtools/htsjdk&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Rust&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/rust-bio/rust-htslib" class="autolink" rel="nofollow noopener" target="_blank"&gt;https://github.com/rust-bio/rust-htslib&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Nim&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/brentp/hts-nim" class="autolink" rel="nofollow noopener" target="_blank"&gt;https://github.com/brentp/hts-nim&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Julia&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/bicycle1885/HTSLib.jl" class="autolink" rel="nofollow noopener" target="_blank"&gt;https://github.com/bicycle1885/HTSLib.jl&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;R&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/Bioconductor/Rhtslib" class="autolink" rel="nofollow noopener" target="_blank"&gt;https://github.com/Bioconductor/Rhtslib&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Perl&lt;/td&gt;
&lt;td&gt;&lt;a href="https://github.com/Ensembl/Bio-DB-HTS" class="autolink" rel="nofollow noopener" target="_blank"&gt;https://github.com/Ensembl/Bio-DB-HTS&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;↑ 各種言語におけるhtslibバインディング&lt;/p&gt;

&lt;p&gt;　面白いところはRustやNimといった、新しい静的型付き言語において熱心にバインディングが開発されていることです。これは、速度に対する需要が大きいのだろうなと思います。ゲノムのデータは膨大なので、Pythonのようなスクリプト言語よりも、RustやNim、Goといった言語を使って高速に処理することが求められているのでしょう。&lt;/p&gt;

&lt;p&gt;　上から5番目のJulia言語のバインディングは日本の方が開発されているようです。中をみてみますと、C言語のヘッダーファイルをパースしてバインディングをある程度自動生成しているようでした。&lt;/p&gt;

&lt;p&gt;&lt;a href="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F144608%2F506d7d9c-ed96-6b31-75dc-139b16dd3588.png?ixlib=rb-1.2.2&amp;amp;auto=format&amp;amp;gif-q=60&amp;amp;q=75&amp;amp;s=708f82318ede68532ba61b802009bb0f" target="_blank" rel="nofollow noopener"&gt;&lt;img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F144608%2F506d7d9c-ed96-6b31-75dc-139b16dd3588.png?ixlib=rb-1.2.2&amp;amp;auto=format&amp;amp;gif-q=60&amp;amp;q=75&amp;amp;s=708f82318ede68532ba61b802009bb0f" width="60%" height="60%" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/144608/506d7d9c-ed96-6b31-75dc-139b16dd3588.png" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F144608%2F506d7d9c-ed96-6b31-75dc-139b16dd3588.png?ixlib=rb-1.2.2&amp;amp;auto=format&amp;amp;gif-q=60&amp;amp;q=75&amp;amp;w=1400&amp;amp;fit=max&amp;amp;s=da040f9d5ebbc3773a63c21d59740ad4 1x" loading="lazy"&gt;&lt;/a&gt;&lt;br&gt;
図：HTSLib.jl には独自のバインディング&lt;a href="https://github.com/bicycle1885/HTSLib.jl/blob/master/scripts/translate_exported_functions.jl" rel="nofollow noopener" target="_blank"&gt;自動生成スクリプト&lt;/a&gt;が付属している&lt;/p&gt;

&lt;p&gt;　そこで私は考えました。Ruby言語も　htslibのバインディングを作成すれば、ある程度は次世代シーケンサーのファイルが扱えるようになるのではないかと。&lt;/p&gt;

&lt;p&gt;　こういう時、PythonやR、Juliaなど流行の言語であれば、世界の素晴らしい方が作ったバインディングを探してどれを使えばいいか悩むのかも知れませんが、Rubyでは解決策は一つしかないのであれこれ悩む必要はありません。&lt;/p&gt;

&lt;p&gt;　自分で作るか、作らないかです。&lt;/p&gt;

&lt;h2&gt;
&lt;span id="htslibの論文が出たようです" class="fragment"&gt;&lt;/span&gt;&lt;a href="#htslib%E3%81%AE%E8%AB%96%E6%96%87%E3%81%8C%E5%87%BA%E3%81%9F%E3%82%88%E3%81%86%E3%81%A7%E3%81%99"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;HTSLibの論文が出たようです&lt;/h2&gt;

&lt;p&gt;　また話がずれますが、偶然にも、HTSLibの論文が12月16日にアップロードされました。これを受けて、いろいろな言語でhtslibのバインディングの作成が活性化するかも知れません。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.biorxiv.org/content/10.1101/2020.12.16.423064v1" class="autolink" rel="nofollow noopener" target="_blank"&gt;https://www.biorxiv.org/content/10.1101/2020.12.16.423064v1&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F144608%2F50f5ecb7-34e5-28de-c342-eabc6560e6df.png?ixlib=rb-1.2.2&amp;amp;auto=format&amp;amp;gif-q=60&amp;amp;q=75&amp;amp;s=ac192ef1bb9b96f97352b7fc48ffd7ba" target="_blank" rel="nofollow noopener"&gt;&lt;img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F144608%2F50f5ecb7-34e5-28de-c342-eabc6560e6df.png?ixlib=rb-1.2.2&amp;amp;auto=format&amp;amp;gif-q=60&amp;amp;q=75&amp;amp;s=ac192ef1bb9b96f97352b7fc48ffd7ba" alt="image.png" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/144608/50f5ecb7-34e5-28de-c342-eabc6560e6df.png" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F144608%2F50f5ecb7-34e5-28de-c342-eabc6560e6df.png?ixlib=rb-1.2.2&amp;amp;auto=format&amp;amp;gif-q=60&amp;amp;q=75&amp;amp;w=1400&amp;amp;fit=max&amp;amp;s=2406a116037b717f3689dc2589440977 1x" loading="lazy"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F144608%2Fbdb2fac3-189e-e166-187e-72702833bb94.png?ixlib=rb-1.2.2&amp;amp;auto=format&amp;amp;gif-q=60&amp;amp;q=75&amp;amp;s=dc422a98bdf99e5280d39bf02648a8f9" target="_blank" rel="nofollow noopener"&gt;&lt;img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F144608%2Fbdb2fac3-189e-e166-187e-72702833bb94.png?ixlib=rb-1.2.2&amp;amp;auto=format&amp;amp;gif-q=60&amp;amp;q=75&amp;amp;s=dc422a98bdf99e5280d39bf02648a8f9" width="50%" height="50%" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/144608/bdb2fac3-189e-e166-187e-72702833bb94.png" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F144608%2Fbdb2fac3-189e-e166-187e-72702833bb94.png?ixlib=rb-1.2.2&amp;amp;auto=format&amp;amp;gif-q=60&amp;amp;q=75&amp;amp;w=1400&amp;amp;fit=max&amp;amp;s=12b77de0c6901f63e51bddeca225870b 1x" loading="lazy"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;↑ 論文中の図&lt;/p&gt;

&lt;p&gt;&lt;a href="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F144608%2F70db75f9-e62f-9b36-2bf6-fcbb8b9f86e2.png?ixlib=rb-1.2.2&amp;amp;auto=format&amp;amp;gif-q=60&amp;amp;q=75&amp;amp;s=cddeacfadfad67d03b2338312a49b09c" target="_blank" rel="nofollow noopener"&gt;&lt;img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F144608%2F70db75f9-e62f-9b36-2bf6-fcbb8b9f86e2.png?ixlib=rb-1.2.2&amp;amp;auto=format&amp;amp;gif-q=60&amp;amp;q=75&amp;amp;s=cddeacfadfad67d03b2338312a49b09c" width="50%" height="50%" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/144608/70db75f9-e62f-9b36-2bf6-fcbb8b9f86e2.png" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F144608%2F70db75f9-e62f-9b36-2bf6-fcbb8b9f86e2.png?ixlib=rb-1.2.2&amp;amp;auto=format&amp;amp;gif-q=60&amp;amp;q=75&amp;amp;w=1400&amp;amp;fit=max&amp;amp;s=6b0ff0dbdbd232969d39e5cf7d6f6628 1x" loading="lazy"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;↑ Nim言語のバインディングhts-nimの作者が「便利そうダナー」とコメントしているツイッター&lt;/p&gt;

&lt;h2&gt;
&lt;span id="c言語のrubyのバインディングを作るということ" class="fragment"&gt;&lt;/span&gt;&lt;a href="#c%E8%A8%80%E8%AA%9E%E3%81%AEruby%E3%81%AE%E3%83%90%E3%82%A4%E3%83%B3%E3%83%87%E3%82%A3%E3%83%B3%E3%82%B0%E3%82%92%E4%BD%9C%E3%82%8B%E3%81%A8%E3%81%84%E3%81%86%E3%81%93%E3%81%A8"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;C言語のRubyのバインディングを作るということ&lt;/h2&gt;

&lt;p&gt;　では、どうやってRubyのバインディングを作っていけばいいのだろうか、ということになります。方法は大きく分けて2通りあります。ネイティブ拡張を利用する方法と、FFIを利用する方法です。ネイティブ拡張を使う方法は、C言語をゴリゴリ書いていく必要があります。私はC言語を扱えませんのでこの方法を採用することはできません。もうひとつはFFIを利用する方法は簡単で、あまりC言語に詳しくなくても、Rubyバインディングを作ることができます。&lt;/p&gt;

&lt;p&gt;　私は1年前から、&lt;a href="https://qiita.com/kojix2/items/456259f40d5563005cd1" id="reference-190b96c2918a8defa966"&gt;GR.rb&lt;/a&gt;というRubyでグラフを描出するツールを作っています。&lt;/p&gt;

&lt;p&gt;&lt;a href="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F144608%2F098d75a9-b619-3f54-b114-668d62ef8ca4.png?ixlib=rb-1.2.2&amp;amp;auto=format&amp;amp;gif-q=60&amp;amp;q=75&amp;amp;s=d3956d6a91676c53b8e8cb29161d7758" target="_blank" rel="nofollow noopener"&gt;&lt;img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F144608%2F098d75a9-b619-3f54-b114-668d62ef8ca4.png?ixlib=rb-1.2.2&amp;amp;auto=format&amp;amp;gif-q=60&amp;amp;q=75&amp;amp;s=d3956d6a91676c53b8e8cb29161d7758" alt="image.png" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/144608/098d75a9-b619-3f54-b114-668d62ef8ca4.png" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F144608%2F098d75a9-b619-3f54-b114-668d62ef8ca4.png?ixlib=rb-1.2.2&amp;amp;auto=format&amp;amp;gif-q=60&amp;amp;q=75&amp;amp;w=1400&amp;amp;fit=max&amp;amp;s=33c1aebe0a7b9342050bdf04afa0495e 1x" loading="lazy"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;↑ Rubyでもきれいなグラフや図が描出できるGR.rb&lt;/p&gt;

&lt;p&gt;　Julia言語では事実上のデファクトスタンダードとなっているGRというグラフ描出ライブラリのバインディングです。FFIはFiddleというRuby標準ライブラリを使っています。Rubyバインディングを作るのは、配線をつなぎ合わせてプラモデルを作るようなもので、そこまで高度な技術がなくてもできてしまいます。&lt;/p&gt;

&lt;p&gt;　先行している素晴らしいバインディングのコードを観察してパターンを学び、同じように作れば、ほとんどの場合うまく動作するものが作れます。このプロッティングツールも、Rubyでグラフを描出できるライブラリが足りないため、自分で作り始めたものです。&lt;/p&gt;

&lt;p&gt;　Rubyコミュニティでは&lt;a href="https://github.com/ankane" rel="nofollow noopener" target="_blank"&gt;Andrew Kane&lt;/a&gt;さんという方が、2年ほど前から精力的にC言語の機械学習のツールのバインディングを作成されており、RubyでC言語のバインディングをFFIを利用して作ろうとする方は、Ankaneさんのリポジトリを観察すると、とても参考になると思います。&lt;/p&gt;

&lt;h2&gt;
&lt;span id="rubyのhtslibバインディングを作る意味" class="fragment"&gt;&lt;/span&gt;&lt;a href="#ruby%E3%81%AEhtslib%E3%83%90%E3%82%A4%E3%83%B3%E3%83%87%E3%82%A3%E3%83%B3%E3%82%B0%E3%82%92%E4%BD%9C%E3%82%8B%E6%84%8F%E5%91%B3"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;Rubyのhtslibバインディングを作る意味&lt;/h2&gt;

&lt;p&gt;　次に、htslibのRubyバインディングを作る意義は何かという話になります。&lt;/p&gt;

&lt;p&gt;　開発する個人的なメリットとしては、ruby-htslibを作っているうちに、SAMやVCFのファイル仕様を読む必要が出てくるため、自然にフォーマットに対する知識がいろいろ身につくのではないかという気がします。また、これから先、次世代シーケンサーを超えて、さまざまな新しいモダリティが出現する時がかならず来ると思います。その場合も、いろいろなフォーマットが出現し、それを処理する基盤となるツールやライブラリが作成されて、各種言語からのバインディングが作られるという人間の営みは大きく変わりません。共通の課題に対していろいろな人々が頑張っている場を学ぶことには大きな意義がある気がします。&lt;/p&gt;

&lt;p&gt;　つぎに、Rubyよりももっとデータ解析に適した言語がいろいろ存在する中で、Ruby言語でバインディングを作る社会的な意味を考えます。これはやってみないとわかりません。RubyはActiveRecordに代表されるように、データをオブジェクトに変換して扱うという分野では使いやすさに定評があります。ですから、作り続けていくうちにHTSLibのRubyバインディングの良さのようなものが現れるとしたら、一つそういった方面があると思います。もちろんRuby言語を利用した解析ツールや、解析パイプラインのようなものが作れればそれに越したことはないですが、これはなかなか実現が難しいのではないかと考えています。いずれにせよ、プログラミング言語の世界でも多様性は大事であると考えます。&lt;/p&gt;

&lt;h2&gt;
&lt;span id="基本的な方針" class="fragment"&gt;&lt;/span&gt;&lt;a href="#%E5%9F%BA%E6%9C%AC%E7%9A%84%E3%81%AA%E6%96%B9%E9%87%9D"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;基本的な方針&lt;/h2&gt;

&lt;p&gt;　さて、ここから先は、技術力がない人が、どうすればruby-htslibを作れるだろうか？という現実的な話になります。&lt;/p&gt;

&lt;p&gt;　最初のポイントはFFIのライブラリ選びです。Ruby言語では、Ruby-FFIと、Fiddleの2種類のFFIバインディング作成のためのライブラリがあります。どちらも歴史あるライブラリです。Ruby-FFIはより高機能なサードパーティのライブラリです。FiddleはRubyの標準ライブラリですが機能は簡易的で普及度はあまり高くありません。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Ruby-FFI：　&lt;a href="https://github.com/ffi/ffi" class="autolink" rel="nofollow noopener" target="_blank"&gt;https://github.com/ffi/ffi&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Fiddle：　&lt;a href="https://github.com/ruby/fiddle" class="autolink" rel="nofollow noopener" target="_blank"&gt;https://github.com/ruby/fiddle&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;　今回Ruby-FFIを採用することにしました。Ruby-FFIは多くのプロジェクトで採用されており、Ruby配列とCポインタの相互変換、ネストされた構造体などを扱うのが得意です。Ruby-FFIのあまりよろしくない点としては、Ruby標準ライブラリではないため追加のライブラリのインストールが必要になることと、将来的にRubyの構成が大きく変わった時に変化についていけないリスクがあること、日本人開発者がいないため、日本語で質問しにくいという点があります。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://qiita.com/kojix2/items/d3e44a559a822715ce80" id="reference-e59ccfa98d75abb14852"&gt;Ruby FFI wiki の日本語訳&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;↑まずはRuby FFIの全体像を得るために、Google翻訳を使って FFI wikiの全訳を作成しました。&lt;/p&gt;

&lt;p&gt;　さて、低レベルのバインディングでRuby-FFIを利用しても作るのが大変だというところは2点ほど思いつきます。&lt;/p&gt;

&lt;p&gt;　一つはRuby-FFIがC言語の &lt;a href="https://ja.wikipedia.org/wiki/%E3%83%93%E3%83%83%E3%83%88%E3%83%95%E3%82%A3%E3%83%BC%E3%83%AB%E3%83%89" rel="nofollow noopener" target="_blank"&gt;bit field&lt;/a&gt; に対応していないところです。FFIを bit field に対応させましたというGemもあるのですが、公開日が古く、そのまま使うわけにはいかないと思っています。&lt;/p&gt;

&lt;p&gt;　もう一つ難しい点は、メモリ管理です。&lt;br&gt;
　Rubyではガーベッジコレクションが参照されなくなったオブジェクトを自動的に削除します。そのタイミングでFFIもメモリを開放するようです。しかし、何かの理由でうまく動作せず、開放するべきメモリが開放されなかったり、逆にGCが勝手にメモリを開放してしまうような場面が出現するかも知れません。そうなったとき、その問題を発見したり、デバッグしたりするのは私には大変難しいだろうなと考えています。&lt;br&gt;
　そういったものに当たったときには、人の助けを借りるしかないと思います。&lt;/p&gt;

&lt;h2&gt;
&lt;span id="自動的にcのヘッダーファイルをパースしてバインディングを生成できないのか" class="fragment"&gt;&lt;/span&gt;&lt;a href="#%E8%87%AA%E5%8B%95%E7%9A%84%E3%81%ABc%E3%81%AE%E3%83%98%E3%83%83%E3%83%80%E3%83%BC%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%82%92%E3%83%91%E3%83%BC%E3%82%B9%E3%81%97%E3%81%A6%E3%83%90%E3%82%A4%E3%83%B3%E3%83%87%E3%82%A3%E3%83%B3%E3%82%B0%E3%82%92%E7%94%9F%E6%88%90%E3%81%A7%E3%81%8D%E3%81%AA%E3%81%84%E3%81%AE%E3%81%8B"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;自動的にCのヘッダーファイルをパースしてバインディングを生成できないのか？&lt;/h2&gt;

&lt;p&gt;　FFIのバインディングを作る場合、通常はC言語で書かれたヘッダーファイルの関数を、正規表現などを用いて置換を繰り返して、RubyのFFIモジュールに書き換えるのではないかと思います。けれども自分で一つ一つ関数をメソッドに書き換えるケースも悪くはありません。一つ一つのメソッドを手書きして実装するのは、時間と手間をかければ、誰でもやることができます。単調な作業に見えますが、実は大きなメリットがあります。それはライブラリのAPIを写経することで、ツールの全体像を深く理解できるようになることです。&lt;/p&gt;

&lt;p&gt;　けれども人間が手作業でバインディングを作成する場合、どうしても書き損じやタイポが生じます。HTSLibは現在でも開発が続いており、今後も関数は追加されたり、変更されたりします。HTSLibのバージョンが上がれば、Rubyバインディングも微修正を加えなければなりません。私は手作業は好きですし大事だと思っていますが、それでけでなく、何らかの自動化も考えていきたいところです。&lt;/p&gt;

&lt;p&gt;　一つの方針は、Julia言語のケースのように自分で変換器を作成することです。この場合、正規表現による置換を利用したり、Ruby言語で実装されたC言語のパーサを使って、バインディングを自動生成するスクリプトを作成すれば良いでしょう。もう一つは、RustのHTSlibバインディングのように、すでにある誰かが作った変換器を利用することも考えられます。&lt;/p&gt;

&lt;p&gt;　Ruby-FFIには自動的にバインディングを生成するプロジェクトがありましたが開発が事実上中断しています。最終更新日が古いのでそのまま使うことはできないでしょう。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/colstrom/ffi_gen" class="autolink" rel="nofollow noopener" target="_blank"&gt;https://github.com/colstrom/ffi_gen&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;また、次のようなプロジェクトもあるようです。こちらはうまく動作するようですので、利用できないかどうか検討しています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/rpav/c2ffi" class="autolink" rel="nofollow noopener" target="_blank"&gt;https://github.com/rpav/c2ffi&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
&lt;span id="nmコマンド" class="fragment"&gt;&lt;/span&gt;&lt;a href="#nm%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;nmコマンド&lt;/h2&gt;

&lt;p&gt;関連する方法として、共有ライブラリのバイナリファイルを直接観察するという考え方があります。&lt;/p&gt;

&lt;div class="code-frame" data-lang="text"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;nm htslib.so
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;とすると、共有ライブラリのバイナリファイルから直接関数の名前を見ることができます。&lt;br&gt;
実装できる関数をなるべくカバーするという目的では、このようなバイナリを直接見る手段もどこかで役に立つかも知れません。&lt;/p&gt;

&lt;h2&gt;
&lt;span id="fat-gemの問題共有ライブラリをパッケージに含めるべきかどうか" class="fragment"&gt;&lt;/span&gt;&lt;a href="#fat-gem%E3%81%AE%E5%95%8F%E9%A1%8C%E5%85%B1%E6%9C%89%E3%83%A9%E3%82%A4%E3%83%96%E3%83%A9%E3%83%AA%E3%82%92%E3%83%91%E3%83%83%E3%82%B1%E3%83%BC%E3%82%B8%E3%81%AB%E5%90%AB%E3%82%81%E3%82%8B%E3%81%B9%E3%81%8D%E3%81%8B%E3%81%A9%E3%81%86%E3%81%8B"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;Fat Gemの問題　共有ライブラリをパッケージに含めるべきかどうか？&lt;/h2&gt;

&lt;p&gt;　共有ライブラリをパッケージ含めるメリットは、バージョンの調節が容易になることです。しかしGemのサイズが大きくなりますし、ユーザーによってはGemの中にバイナリファイルが含まれていることは好まず、自分で用意したhtslibを使いたいと考えるはずです。また、クロスプラットフォームにすることを考えた時、gemをプラットフォームごとに分割しない場合は、Windows, Mac, Linuxの3種類のバイナリを梱包しておく必要があります。（詳しくないのでもっとよい方法があるかも）&lt;/p&gt;

&lt;p&gt;　共有ライブラリを探す/指定する方法には、環境変数でパスを指定する方法のほか、Pkg-configを利用して、ファイルを見つける方法などがあります。htslibもpkg-configに対応しているっぽいです。しかしAnacondaなどでhtslibを入れた場合などの動作確認が必要と思われます。&lt;/p&gt;

&lt;h2&gt;
&lt;span id="高レベルのapi" class="fragment"&gt;&lt;/span&gt;&lt;a href="#%E9%AB%98%E3%83%AC%E3%83%99%E3%83%AB%E3%81%AEapi"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;高レベルのAPI&lt;/h2&gt;

&lt;p&gt;　ffiを使ったバインディングは、2種類のAPIを作成します。&lt;/p&gt;

&lt;p&gt;　低レベルのAPIは、FFIモジュールを作成して、特異メソッドとして用意します。FFIモジュールの特異メソッドを呼び出すと、htslibの関数が呼び出されます。&lt;/p&gt;

&lt;p&gt;　高レベルのAPIでは、よりRubyらしいAPIを提供します。Rubyらしさとは何か、というのは難しい問題です。NGS関連ファイルを無理なくオブジェクト指向で扱えることが目標になると思います。まだしっかり理解できていないのでhts-pythonを移植して、それを改良することを考えています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/brentp/hts-python" class="autolink" rel="nofollow noopener" target="_blank"&gt;https://github.com/brentp/hts-python&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;　bamファイルを検索するような使い方では、ActiveRecordsのAPIが参考になるかもしれません。私はActiveRecordの使い方は詳しくないので、いろいろ勉強する必要があります。&lt;/p&gt;

&lt;p&gt;　高レベルのAPIを考えるためには他の言語のツールとかをよく使ってみてhtslib全体を理解する必要がありそうです。私の実力はまだまだで、ここからかなり勉強と経験が必要な気がするので、年単位で実現していけばなあと思っています。&lt;/p&gt;

&lt;h2&gt;
&lt;span id="現在の進捗状況" class="fragment"&gt;&lt;/span&gt;&lt;a href="#%E7%8F%BE%E5%9C%A8%E3%81%AE%E9%80%B2%E6%8D%97%E7%8A%B6%E6%B3%81"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;現在の進捗状況&lt;/h2&gt;

&lt;p&gt;今の段階では、低レベルのAPIを主に手書きで作り終えたところです。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/kojix2/ruby-htslib" class="autolink" rel="nofollow noopener" target="_blank"&gt;https://github.com/kojix2/ruby-htslib&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;次のようなサンプルで、bamファイルを読み込むことができます。&lt;/p&gt;

&lt;div class="code-frame" data-lang="ruby"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;
&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;'htslib'&lt;/span&gt;

&lt;span class="n"&gt;bam_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;File&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;expand_path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'../assets/poo.sort.bam'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;__dir__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;htf&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;HTS&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;FFI&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;hts_open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bam_path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'r'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;idx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;HTS&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;FFI&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;sam_index_load&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;htf&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bam_path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;hdr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;HTS&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;FFI&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;sam_hdr_read&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;htf&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;b&lt;/span&gt;   &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;HTS&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;FFI&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;bam_init1&lt;/span&gt;

&lt;span class="n"&gt;nuc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'A'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'C'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'G'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'T'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s1"&gt;'N'&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;cig&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="ss"&gt;:BAM_CMATCH&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="ss"&gt;:BAM_CINS&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="ss"&gt;:BAM_CDEL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="ss"&gt;:BAM_CREF_SKIP&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="ss"&gt;:BAM_CSOFT_CLIP&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="ss"&gt;:BAM_CHARD_CLIP&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="mi"&gt;6&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="ss"&gt;:BAM_CPAD&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="mi"&gt;7&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="ss"&gt;:BAM_CEQUAL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="mi"&gt;8&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="ss"&gt;:BAM_CDIFF&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="mi"&gt;9&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="ss"&gt;:BAM_CBACK&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;times&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="no"&gt;HTS&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;FFI&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;sam_read1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;htf&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;hdr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nb"&gt;p&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:core&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nf"&gt;members&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;zip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:core&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nf"&gt;values&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nb"&gt;p&lt;/span&gt; &lt;span class="ss"&gt;name: &lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:data&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nf"&gt;read_string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="ss"&gt;flag: &lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:core&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="ss"&gt;:flag&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="ss"&gt;pos: &lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:core&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="ss"&gt;:pos&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="ss"&gt;mpos: &lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:core&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="ss"&gt;:mpos&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="ss"&gt;mqual: &lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:core&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="ss"&gt;:qual&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="ss"&gt;seq: &lt;/span&gt;&lt;span class="no"&gt;HTS&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;FFI&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;bam_get_seq&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;read_bytes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:core&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="ss"&gt;:l_qseq&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;unpack1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'B*'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                 &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;each_char&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;each_slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;map&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;nuc&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;join&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;to_i&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt; &lt;span class="p"&gt;}.&lt;/span&gt;&lt;span class="nf"&gt;join&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="ss"&gt;cigar: &lt;/span&gt;&lt;span class="no"&gt;HTS&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;FFI&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;bam_get_cigar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;read_array_of_uint32&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:core&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="ss"&gt;:n_cigar&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
                   &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;map&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'%32d'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;to_s&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;27&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nf"&gt;to_i&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;cig&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;28&lt;/span&gt;&lt;span class="o"&gt;..-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nf"&gt;to_i&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)]]&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="n"&gt;qu&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;ご覧のように、低レベルのAPIだけ使って無理やり表示しているのでごちゃついています。&lt;br&gt;
まだまだですね…。先は長いです。これを実行すると次のように表示されます。&lt;/p&gt;

&lt;div class="code-frame" data-lang="text"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;[[:pos, 3289], [:tid, 0], [:bin, 4681], [:qual, 0], [:l_extranul, 2], [:flag, 133], [:l_qname, 32], [:n_cigar, 0], [:l_qseq, 70], [:mtid, 0], [:mpos, 3289], [:isize, 0]]
{:name=&amp;gt;"poo_3290_3833_2:0:0_2:0:0_119", :flag=&amp;gt;133, :pos=&amp;gt;3290, :mpos=&amp;gt;3290, :mqual=&amp;gt;0, :seq=&amp;gt;"GGGGCAGCTTGTTCGAAGCGTGACCCCCAAGACGTCGTCCTGACGAGCACAAACTCCCATTGAGAGTGGC", :cigar=&amp;gt;[], :qual=&amp;gt;"2222222222222222222222222222222222222222222222222222222222222222222222"}
[[:pos, 3292], [:tid, 0], [:bin, 4681], [:qual, 0], [:l_extranul, 3], [:flag, 133], [:l_qname, 32], [:n_cigar, 0], [:l_qseq, 70], [:mtid, 0], [:mpos, 3292], [:isize, 0]]
{:name=&amp;gt;"poo_3293_3822_1:0:0_0:0:0_76", :flag=&amp;gt;133, :pos=&amp;gt;3293, :mpos=&amp;gt;3293, :mqual=&amp;gt;0, :seq=&amp;gt;"TTCGATGCGGGACCCCCAAGACGTCGTCCTGACGAGCACAAACTCCCATTGAGAGTGGCACATGATTTCC", :cigar=&amp;gt;[], :qual=&amp;gt;"2222222222222222222222222222222222222222222222222222222222222222222222"}
[[:pos, 3293], [:tid, 0], [:bin, 4681], [:qual, 0], [:l_extranul, 2], [:flag, 69], [:l_qname, 32], [:n_cigar, 0], [:l_qseq, 70], [:mtid, 0], [:mpos, 3293], [:isize, 0]]
{:name=&amp;gt;"poo_3294_3861_2:0:0_2:0:0_2d7", :flag=&amp;gt;69, :pos=&amp;gt;3294, :mpos=&amp;gt;3294, :mqual=&amp;gt;0, :seq=&amp;gt;"TGGGGACCGTGTGACTATCAGAAGGGTGGGGTCAGCTTGTTCGATGCGGGACCCCCAAGACGTCGTCCTG", :cigar=&amp;gt;[], :qual=&amp;gt;"2222222222222222222222222222222222222222222222222222222222222222222222"}
[[:pos, 3298], [:tid, 0], [:bin, 4681], [:qual, 0], [:l_extranul, 2], [:flag, 69], [:l_qname, 32], [:n_cigar, 0], [:l_qseq, 70], [:mtid, 0], [:mpos, 3298], [:isize, 0]]
{:name=&amp;gt;"poo_3299_3808_0:0:0_4:0:0_2e0", :flag=&amp;gt;69, :pos=&amp;gt;3299, :mpos=&amp;gt;3299, :mqual=&amp;gt;0, :seq=&amp;gt;"CCCAAGACGTCGACCTGAGGAGCACAAACTCCCAATGAGAGTGGCACATGATTTGCCCAACCATACCATT", :cigar=&amp;gt;[], :qual=&amp;gt;"2222222222222222222222222222222222222222222222222222222222222222222222"}
[[:pos, 3303], [:tid, 0], [:bin, 4681], [:qual, 0], [:l_extranul, 2], [:flag, 133], [:l_qname, 32], [:n_cigar, 0], [:l_qseq, 70], [:mtid, 0], [:mpos, 3303], [:isize, 0]]
{:name=&amp;gt;"poo_3304_3813_0:0:0_2:0:0_2f5", :flag=&amp;gt;133, :pos=&amp;gt;3304, :mpos=&amp;gt;3304, :mqual=&amp;gt;0, :seq=&amp;gt;"GGACCCCCAAGACGTCGTCCTGACGCGCACAAACTCCCATTGAGAGTGGCACATTATTTCCCCAACCATA", :cigar=&amp;gt;[], :qual=&amp;gt;"2222222222222222222222222222222222222222222222222222222222222222222222"}
[[:pos, 3311], [:tid, 0], [:bin, 4681], [:qual, 0], [:l_extranul, 3], [:flag, 133], [:l_qname, 32], [:n_cigar, 0], [:l_qseq, 70], [:mtid, 0], [:mpos, 3311], [:isize, 0]]
{:name=&amp;gt;"poo_3312_3825_0:0:0_1:0:0_6f", :flag=&amp;gt;133, :pos=&amp;gt;3312, :mpos=&amp;gt;3312, :mqual=&amp;gt;0, :seq=&amp;gt;"TTGTTCGATGCGGGACCCCCAATACGTCGTCCTGACGAGCACAAACTCCCATTGAGAGTGGCACATGATT", :cigar=&amp;gt;[], :qual=&amp;gt;"2222222222222222222222222222222222222222222222222222222222222222222222"}
[[:pos, 3317], [:tid, 0], [:bin, 4681], [:qual, 0], [:l_extranul, 2], [:flag, 133], [:l_qname, 32], [:n_cigar, 0], [:l_qseq, 70], [:mtid, 0], [:mpos, 3317], [:isize, 0]]
{:name=&amp;gt;"poo_3318_3847_3:0:0_1:0:0_142", :flag=&amp;gt;133, :pos=&amp;gt;3318, :mpos=&amp;gt;3318, :mqual=&amp;gt;0, :seq=&amp;gt;"CTATCAGAAGGGTGGGGGCAGCTTGTTCGATGCGGGACCCCCAAGACGACGTCCTGACGAGCACAAACTC", :cigar=&amp;gt;[], :qual=&amp;gt;"2222222222222222222222222222222222222222222222222222222222222222222222"}
[[:pos, 3319], [:tid, 0], [:bin, 4681], [:qual, 0], [:l_extranul, 2], [:flag, 69], [:l_qname, 32], [:n_cigar, 0], [:l_qseq, 70], [:mtid, 0], [:mpos, 3319], [:isize, 0]]
{:name=&amp;gt;"poo_3320_3822_3:0:0_6:0:0_333", :flag=&amp;gt;69, :pos=&amp;gt;3320, :mpos=&amp;gt;3320, :mqual=&amp;gt;0, :seq=&amp;gt;"TTCGATGCGGGACCCCCAAGACGTCGTGCTGACGAGCACAACCTCGCAATGAGAGTGGCACAAGATTTGC", :cigar=&amp;gt;[], :qual=&amp;gt;"2222222222222222222222222222222222222222222222222222222222222222222222"}
[[:pos, 3321], [:tid, 0], [:bin, 4681], [:qual, 0], [:l_extranul, 2], [:flag, 69], [:l_qname, 32], [:n_cigar, 0], [:l_qseq, 70], [:mtid, 0], [:mpos, 3321], [:isize, 0]]
{:name=&amp;gt;"poo_3322_3847_1:0:0_0:0:0_2cb", :flag=&amp;gt;69, :pos=&amp;gt;3322, :mpos=&amp;gt;3322, :mqual=&amp;gt;0, :seq=&amp;gt;"CTATCAGAAGGGTGGGGGCAGCTTGTTCGATGCGGGACCCCCAAGACGTCGTCCTGACGAGCACAAACTC", :cigar=&amp;gt;[], :qual=&amp;gt;"2222222222222222222222222222222222222222222222222222222222222222222222"}
[[:pos, 3327], [:tid, 0], [:bin, 4681], [:qual, 0], [:l_extranul, 2], [:flag, 69], [:l_qname, 32], [:n_cigar, 0], [:l_qseq, 70], [:mtid, 0], [:mpos, 3327], [:isize, 0]]
{:name=&amp;gt;"poo_3328_3840_1:0:0_2:0:0_211", :flag=&amp;gt;69, :pos=&amp;gt;3328, :mpos=&amp;gt;3328, :mqual=&amp;gt;0, :seq=&amp;gt;"AAGGGTGGGGGCAGCTTGTTCGATGCGGGACCCCCAAGACGTCGTCCTGACGAGCACCAACTCCGATTGA", :cigar=&amp;gt;[], :qual=&amp;gt;"2222222222222222222222222222222222222222222222222222222222222222222222"}
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;pooというのは、wgsimを利用して作られた適当なbamファイルです。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://qiita.com/kojix2/items/caafa0ec0ff634be35bc" id="reference-032864bc0e1e6f9ec206"&gt;NGSシミュレーションの古典的ソフトwgsimで遊ぶ 〜謎の生物プー〜&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
&lt;span id="rubyアソシエーション開発助成" class="fragment"&gt;&lt;/span&gt;&lt;a href="#ruby%E3%82%A2%E3%82%BD%E3%82%B7%E3%82%A8%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E9%96%8B%E7%99%BA%E5%8A%A9%E6%88%90"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;Rubyアソシエーション開発助成&lt;/h2&gt;

&lt;p&gt;このプロジェクトは2020年度のRubyアソシエーション開発助成に選ばれました。&lt;/p&gt;

&lt;p&gt;&lt;a href="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F144608%2Fdbebd708-feec-2108-d546-cb94a545ed4d.png?ixlib=rb-1.2.2&amp;amp;auto=format&amp;amp;gif-q=60&amp;amp;q=75&amp;amp;s=db45d32fb7b5ec1852a05fb64097eccc" target="_blank" rel="nofollow noopener"&gt;&lt;img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F144608%2Fdbebd708-feec-2108-d546-cb94a545ed4d.png?ixlib=rb-1.2.2&amp;amp;auto=format&amp;amp;gif-q=60&amp;amp;q=75&amp;amp;s=db45d32fb7b5ec1852a05fb64097eccc" alt="image.png" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/144608/dbebd708-feec-2108-d546-cb94a545ed4d.png" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F144608%2Fdbebd708-feec-2108-d546-cb94a545ed4d.png?ixlib=rb-1.2.2&amp;amp;auto=format&amp;amp;gif-q=60&amp;amp;q=75&amp;amp;w=1400&amp;amp;fit=max&amp;amp;s=84dda45a237eef5673777728ee3790f8 1x" loading="lazy"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;この記事は以上です（未完）&lt;/p&gt;
</content>
    <published>2020-12-18T14:47:41Z</published>
    <updated>2020-12-20T13:35:03Z</updated>
    <author>
      <name>kojix2</name>
    </author>
  </entry>
  <entry>
    <id>tag:qiita.com,2005:PublicArticle/1360080</id>
    <published>2020-12-17T00:20:31+09:00</published>
    <updated>2020-12-17T01:08:53+09:00</updated>
    <link rel="alternate" type="text/html" href="https://qiita.com/noraworld/items/5e8d7693216f112cb50f"/>
    <url>https://qiita.com/noraworld/items/5e8d7693216f112cb50f</url>
    <title>Mac で Linux のディスクの中身にアクセスする方法 (ただしリードオンリー)</title>
    <content type="html">
&lt;h1&gt;
&lt;span id="はじめに" class="fragment"&gt;&lt;/span&gt;&lt;a href="#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;はじめに&lt;/h1&gt;

&lt;p&gt;Raspberry Pi 4 に Ubuntu を入れて遊んでいたのですが、操作を誤って OS が起動不能に。再インストールする前に、ディスク内のデータのバックアップを取ろうと思い、SD カードを Mac に接続したのですが、マウントすることができませんでした。&lt;/p&gt;

&lt;div class="code-frame" data-lang="shell"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;diskutil list
&lt;span class="c"&gt;# /dev/disk0 と /dev/disk1 は macOS のものなので省略&lt;/span&gt;

/dev/disk2 &lt;span class="o"&gt;(&lt;/span&gt;external, physical&lt;span class="o"&gt;)&lt;/span&gt;:
   &lt;span class="c"&gt;#:                       TYPE NAME                    SIZE       IDENTIFIER&lt;/span&gt;
   0:     FDisk_partition_scheme                        &lt;span class="k"&gt;*&lt;/span&gt;63.9 GB    disk2
   1:             Windows_FAT_32 ⁨system-boot⁩             268.4 MB   disk2s1
   2:                      Linux ⁨⁩                        63.6 GB    disk2s2

&lt;span class="c"&gt;# /dev/disk2s2 が Linux のディスクということがわかったが、マウントできず...&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;diskutil mount /dev/disk2s2
Volume on disk2s2 failed to mount
Perhaps the operation is not supported &lt;span class="o"&gt;(&lt;/span&gt;kDAReturnUnsupported&lt;span class="o"&gt;)&lt;/span&gt;
If you think the volume is supported but damaged, try the &lt;span class="s2"&gt;"readOnly"&lt;/span&gt; option
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;SD カードを接続した際に自動的に &lt;code&gt;/dev/disk2s1&lt;/code&gt; がマウントされるのですが、これはシステムブートなので Linux の中身ではありません。&lt;/p&gt;

&lt;p&gt;調べてみると、どうやら macOS では Linux のファイルシステムである &lt;strong&gt;ext4&lt;/strong&gt; をサポートしていないようです。ext4 をマウントできるようにするためには &lt;code&gt;ex4fuse&lt;/code&gt; と呼ばれるツールが必要のようなので、今回はそれのインストール方法と使い方を紹介します。&lt;/p&gt;

&lt;h1&gt;
&lt;span id="環境" class="fragment"&gt;&lt;/span&gt;&lt;a href="#%E7%92%B0%E5%A2%83"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;環境&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;macOS Big Sur 11.1&lt;/li&gt;
&lt;li&gt;Ubuntu Desktop 20.10 (今回検証した SD カード内の Linux ディスクの OS)&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
&lt;span id="インストール" class="fragment"&gt;&lt;/span&gt;&lt;a href="#%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;インストール&lt;/h1&gt;

&lt;div class="code-frame" data-lang="shell"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;brew &lt;span class="nb"&gt;install&lt;/span&gt; &lt;span class="nt"&gt;--cask&lt;/span&gt; osxfuse
&lt;span class="nv"&gt;$ &lt;/span&gt;brew &lt;span class="nb"&gt;install &lt;/span&gt;ext4fuse
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;インストールに失敗する場合はアプリケーションを許可する必要があります。「システム環境設定」 &amp;gt; 「セキュリティとプライバシー」 &amp;gt; 「一般」 &amp;gt; 「ダウンロードしたアプリケーションの実行許可」の項目に許可されていない項目が出てきたら許可します。許可するためには事前に左下の南京錠をクリックする必要があります。&lt;/p&gt;

&lt;p&gt;&lt;a href="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F113895%2Ffeb5adbe-89a7-c4c2-e059-bca5a988709c.png?ixlib=rb-1.2.2&amp;amp;auto=format&amp;amp;gif-q=60&amp;amp;q=75&amp;amp;s=96a56ab4298b814ecc534abea78a6e1e" target="_blank" rel="nofollow noopener"&gt;&lt;img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F113895%2Ffeb5adbe-89a7-c4c2-e059-bca5a988709c.png?ixlib=rb-1.2.2&amp;amp;auto=format&amp;amp;gif-q=60&amp;amp;q=75&amp;amp;s=96a56ab4298b814ecc534abea78a6e1e" alt="スクリーンショット 2020-12-17 0.04.12.png" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/113895/feb5adbe-89a7-c4c2-e059-bca5a988709c.png" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F113895%2Ffeb5adbe-89a7-c4c2-e059-bca5a988709c.png?ixlib=rb-1.2.2&amp;amp;auto=format&amp;amp;gif-q=60&amp;amp;q=75&amp;amp;w=1400&amp;amp;fit=max&amp;amp;s=9931f76377b089ec95c9f466deeec5c4 1x" loading="lazy"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;許可したあとは再起動を求められるので再起動します。&lt;/p&gt;

&lt;h1&gt;
&lt;span id="使い方" class="fragment"&gt;&lt;/span&gt;&lt;a href="#%E4%BD%BF%E3%81%84%E6%96%B9"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;使い方&lt;/h1&gt;

&lt;p&gt;まずはマウント先のディレクトリを作っておきます。以下の例では &lt;code&gt;~/raspberrypi4&lt;/code&gt; をマウント先としています。&lt;/p&gt;

&lt;div class="code-frame" data-lang="shell"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;mkdir&lt;/span&gt; ~/raspberrypi4
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img alt=":warning:" class="emoji" height="20" src="https://cdn.qiita.com/emoji/twemoji/unicode/26a0-fe0f.png" title=":warning:" width="20" loading="lazy"&gt; マウント先としてホームディレクトリやデスクトップなど、macOS にもともと存在するコアなディレクトリを指定するのは推奨されません。アンマウントするまでもともとのディレクトリにアクセスできなくなるためです。&lt;/p&gt;

&lt;p&gt;次にマウント対象のディスクを見つけます。&lt;/p&gt;

&lt;div class="code-frame" data-lang="shell"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;diskutil list
&lt;span class="c"&gt;# /dev/disk0 と /dev/disk1 は macOS のものなので省略&lt;/span&gt;

/dev/disk2 &lt;span class="o"&gt;(&lt;/span&gt;external, physical&lt;span class="o"&gt;)&lt;/span&gt;:
   &lt;span class="c"&gt;#:                       TYPE NAME                    SIZE       IDENTIFIER&lt;/span&gt;
   0:     FDisk_partition_scheme                        &lt;span class="k"&gt;*&lt;/span&gt;63.9 GB    disk2
   1:             Windows_FAT_32 ⁨system-boot⁩             268.4 MB   disk2s1
   2:                      Linux ⁨⁩                        63.6 GB    disk2s2
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;いくつか表示されると思いますが、どれが Ubuntu (Linux) がインストールされている SD カード (あるいは USB メモリーなど) のものなのかはなんとなく勘でわかると思います。自分の環境では &lt;code&gt;/dev/disk2&lt;/code&gt; が SD カードのディスクでした。&lt;/p&gt;

&lt;p&gt;その中の、&lt;code&gt;TYPE&lt;/code&gt; が &lt;code&gt;Linux&lt;/code&gt; になっているものを見つけます。上記の場合だと一番下の &lt;code&gt;disk2s2&lt;/code&gt; が該当します。なのでマウント対象のディスクは &lt;code&gt;/dev/disk2s2&lt;/code&gt; であることがわかりました。&lt;/p&gt;

&lt;p&gt;マウント対象のディスクがわかったら、以下のコマンドを実行します。なお、ここでも許可を求められることがありますので、その場合は「システム環境設定」 &amp;gt; 「セキュリティとプライバシー」 &amp;gt; 「一般」 &amp;gt; 「ダウンロードしたアプリケーションの実行許可」の項目から許可をします。&lt;/p&gt;

&lt;div class="code-frame" data-lang="shell"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;sudo &lt;/span&gt;ext4fuse /dev/disk2s2 ~/raspberrypi4 &lt;span class="nt"&gt;-o&lt;/span&gt; allow_other
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code&gt;/dev/disk2s2&lt;/code&gt; はマウント対象のディスク、&lt;code&gt;~/raspberrypi4&lt;/code&gt; は先ほど作成した空のディレクトリを指定します。&lt;/p&gt;

&lt;p&gt;これで &lt;code&gt;~/raspberrypi4&lt;/code&gt; の中身が Linux の中身になっていると思います。&lt;/p&gt;

&lt;div class="code-frame" data-lang="shell"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;ls&lt;/span&gt; ~/raspberrypi4
bin  boot  dev  etc  home  lib  lost+found  media  mnt  opt  proc  root  run  sbin  snap  srv  swapfile  sys  tmp  usr  var
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2&gt;
&lt;span id="アンマウント" class="fragment"&gt;&lt;/span&gt;&lt;a href="#%E3%82%A2%E3%83%B3%E3%83%9E%E3%82%A6%E3%83%B3%E3%83%88"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;アンマウント&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;umount&lt;/code&gt; コマンドでアンマウントできます。アンマウントすると &lt;code&gt;~/raspberrypi4&lt;/code&gt; は空のディレクトリに戻ります。&lt;/p&gt;

&lt;div class="code-frame" data-lang="shell"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;sudo &lt;/span&gt;umount ~/raspberrypi4
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1&gt;
&lt;span id="欠点" class="fragment"&gt;&lt;/span&gt;&lt;a href="#%E6%AC%A0%E7%82%B9"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;欠点&lt;/h1&gt;

&lt;p&gt;この方法なら無料で Linux のディスクをマウントすることができますが、&lt;strong&gt;リードオンリーである&lt;/strong&gt; という点に注意してください。つまりマウントしたディスクの中身のファイルを編集したりすることはできません。&lt;/p&gt;

&lt;p&gt;編集などもしたい場合は &lt;a href="https://www.paragon-software.com/jp/home/extfs-mac/" rel="nofollow noopener" target="_blank"&gt;extFS for Mac by Paragon Software&lt;/a&gt; という GUI アプリがありますが、こちらは有料です。どうしても Mac で Linux のファイルの中身を編集したい場合はこちらを検討する必要がありますが、そこまでするなら別の Linux 環境でマウントしたほうが良さそうですね (当然、Linux なら Linux のディスクをマウントすることができるので)。&lt;/p&gt;

&lt;h1&gt;
&lt;span id="おまけ-ディスク丸ごとコピーしたい場合" class="fragment"&gt;&lt;/span&gt;&lt;a href="#%E3%81%8A%E3%81%BE%E3%81%91-%E3%83%87%E3%82%A3%E3%82%B9%E3%82%AF%E4%B8%B8%E3%81%94%E3%81%A8%E3%82%B3%E3%83%94%E3%83%BC%E3%81%97%E3%81%9F%E3%81%84%E5%A0%B4%E5%90%88"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;おまけ: ディスク丸ごとコピーしたい場合&lt;/h1&gt;

&lt;p&gt;SD カード内のディスクを丸ごとコピーしたい場合は &lt;code&gt;dd&lt;/code&gt; コマンドが使えます。&lt;/p&gt;

&lt;div class="code-frame" data-lang="shell"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;sudo dd &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/dev/rdisk2 &lt;span class="nv"&gt;of&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;~/raspberrypi4.img
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code&gt;if=&lt;/code&gt; には &lt;code&gt;diskutil list&lt;/code&gt; の SD カードのディスクを指定します。&lt;code&gt;/dev/disk2&lt;/code&gt; が SD カード (あるいは USB メモリーなど) だった場合、&lt;code&gt;/dev/disk2&lt;/code&gt; の代わりに &lt;code&gt;/dev/rdisk2&lt;/code&gt; を指定すると高速になるそうです。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;of=&lt;/code&gt; には書き出し先のパスを指定します。上記の例では &lt;code&gt;~/raspberrypi4.img&lt;/code&gt; に書き出すようにしています。&lt;/p&gt;

&lt;p&gt;ただし、以下の 2 点に注意してください。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ディスク丸ごとコピーするので Mac の容量が圧迫される&lt;/li&gt;
&lt;li&gt;めちゃくちゃ時間がかかる&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;64 GB の SD カードの中身を丸ごとコピーしたら、同然 Mac の容量を 64 GB 消費します。また、64 GB の SD カードの中身を丸ごとコピーするのにかかった時間 (上記の &lt;code&gt;dd&lt;/code&gt; コマンドの実行時間) は &lt;strong&gt;8 時間 27 分 54 秒&lt;/strong&gt; でした。&lt;/p&gt;

&lt;p&gt;そのため、一部のファイルのみをバックアップしたり取り出したりしたい場合は、この記事で紹介したようにマウントして取り出したほうが無難です。&lt;/p&gt;

&lt;h1&gt;
&lt;span id="参考サイト" class="fragment"&gt;&lt;/span&gt;&lt;a href="#%E5%8F%82%E8%80%83%E3%82%B5%E3%82%A4%E3%83%88"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;参考サイト&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://news.mynavi.jp/article/osxhack-244/" rel="nofollow noopener" target="_blank"&gt;Macで「ext4」を読み書きする&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/osxfuse/osxfuse/issues/705" rel="nofollow noopener" target="_blank"&gt;osxfuse not compatible with MacOS Big Sur&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://qiita.com/sameyasu/items/bc937fc70f536ef84ee7" id="reference-ac6a65f70aed4b5088b6"&gt;Macにext4のHDDをマウントする&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    <published>2020-12-17T00:20:31Z</published>
    <updated>2020-12-17T01:08:53Z</updated>
    <author>
      <name>noraworld</name>
    </author>
  </entry>
  <entry>
    <id>tag:qiita.com,2005:PublicArticle/1359833</id>
    <published>2020-12-16T19:00:56+09:00</published>
    <updated>2020-12-19T12:51:45+09:00</updated>
    <link rel="alternate" type="text/html" href="https://qiita.com/taro-hida/items/e063d356d9ad519e047f"/>
    <url>https://qiita.com/taro-hida/items/e063d356d9ad519e047f</url>
    <title>wiresharkでhttp通信をキャプチャする</title>
    <content type="html">&lt;p&gt;HTTP通信をキャプチャすることで，&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Ethernetヘッダ&lt;/li&gt;
&lt;li&gt;IPヘッダ&lt;/li&gt;
&lt;li&gt;TCPヘッダ&lt;/li&gt;
&lt;li&gt;実通信内容&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;をバイト列として確認することができます．&lt;/p&gt;

&lt;h2&gt;
&lt;span id="手順" class="fragment"&gt;&lt;/span&gt;&lt;a href="#%E6%89%8B%E9%A0%86"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;手順&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;loopbackインターフェースの通信をキャプチャする&lt;/li&gt;
&lt;li&gt;localhostにブラウザからアクセスする&lt;/li&gt;
&lt;li&gt;"http" で通信をフィルタする&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
&lt;span id="loopbackインターフェースの通信をキャプチャする" class="fragment"&gt;&lt;/span&gt;&lt;a href="#loopback%E3%82%A4%E3%83%B3%E3%82%BF%E3%83%BC%E3%83%95%E3%82%A7%E3%83%BC%E3%82%B9%E3%81%AE%E9%80%9A%E4%BF%A1%E3%82%92%E3%82%AD%E3%83%A3%E3%83%97%E3%83%81%E3%83%A3%E3%81%99%E3%82%8B"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;loopbackインターフェースの通信をキャプチャする&lt;/h3&gt;

&lt;p&gt;wiresharkを起動し，loopbackインターフェースを選択してキャプチャを開始します．&lt;/p&gt;

&lt;p&gt;&lt;a href="https://qiita-user-contents.imgix.net/https%3A%2F%2Fi.imgur.com%2FZZZKs5z.png?ixlib=rb-1.2.2&amp;amp;auto=format&amp;amp;gif-q=60&amp;amp;q=75&amp;amp;s=6448817be80016adcfdf2f345b1924c6" target="_blank" rel="nofollow noopener"&gt;&lt;img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fi.imgur.com%2FZZZKs5z.png?ixlib=rb-1.2.2&amp;amp;auto=format&amp;amp;gif-q=60&amp;amp;q=75&amp;amp;s=6448817be80016adcfdf2f345b1924c6" alt="" data-canonical-src="https://i.imgur.com/ZZZKs5z.png" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fi.imgur.com%2FZZZKs5z.png?ixlib=rb-1.2.2&amp;amp;auto=format&amp;amp;gif-q=60&amp;amp;q=75&amp;amp;w=1400&amp;amp;fit=max&amp;amp;s=c2dd9f50170caabd5013cf2f94d470fd 1x" loading="lazy"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
&lt;span id="localhostにブラウザからアクセスする" class="fragment"&gt;&lt;/span&gt;&lt;a href="#localhost%E3%81%AB%E3%83%96%E3%83%A9%E3%82%A6%E3%82%B6%E3%81%8B%E3%82%89%E3%82%A2%E3%82%AF%E3%82%BB%E3%82%B9%E3%81%99%E3%82%8B"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;localhostにブラウザからアクセスする&lt;/h3&gt;

&lt;p&gt;今回は，PHPで簡易なHTTPサーバを起動します．&lt;/p&gt;

&lt;div class="code-frame" data-lang="text"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;$ mkdir html
$ echo 'hello, wireshark' &amp;gt; html/index.html
$ php -S localhost:8080 -t html/
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class="code-frame" data-lang="text"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;$ php -S localhost:8080 -t html/
Listening on http://localhost:8080
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3&gt;
&lt;span id="http-で通信をフィルタする" class="fragment"&gt;&lt;/span&gt;&lt;a href="#http-%E3%81%A7%E9%80%9A%E4%BF%A1%E3%82%92%E3%83%95%E3%82%A3%E3%83%AB%E3%82%BF%E3%81%99%E3%82%8B"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;"http" で通信をフィルタする&lt;/h3&gt;

&lt;p&gt;httpでフィルタすると，該当の通信が確認できます．&lt;/p&gt;

&lt;p&gt;&lt;a href="https://qiita-user-contents.imgix.net/https%3A%2F%2Fi.imgur.com%2Fm4ThnoV.png?ixlib=rb-1.2.2&amp;amp;auto=format&amp;amp;gif-q=60&amp;amp;q=75&amp;amp;s=8e99d674c596a460452e4ab728abc451" target="_blank" rel="nofollow noopener"&gt;&lt;img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fi.imgur.com%2Fm4ThnoV.png?ixlib=rb-1.2.2&amp;amp;auto=format&amp;amp;gif-q=60&amp;amp;q=75&amp;amp;s=8e99d674c596a460452e4ab728abc451" alt="" data-canonical-src="https://i.imgur.com/m4ThnoV.png" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fi.imgur.com%2Fm4ThnoV.png?ixlib=rb-1.2.2&amp;amp;auto=format&amp;amp;gif-q=60&amp;amp;q=75&amp;amp;w=1400&amp;amp;fit=max&amp;amp;s=363df077b81b66640663559ebbc33680 1x" loading="lazy"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;プリアンブルは含まれないので，バイトコードは(0x000)から始まります．&lt;/p&gt;

&lt;p&gt;これは，ループバックアドレス同士で通信した際に利用される送信先MACアドレスです．&lt;/p&gt;

&lt;p&gt;&lt;a href="https://qiita-user-contents.imgix.net/https%3A%2F%2Fi.imgur.com%2FNABKLqK.png?ixlib=rb-1.2.2&amp;amp;auto=format&amp;amp;gif-q=60&amp;amp;q=75&amp;amp;s=9a622bf1cadf0fdc57a96268ae7c4318" target="_blank" rel="nofollow noopener"&gt;&lt;img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fi.imgur.com%2FNABKLqK.png?ixlib=rb-1.2.2&amp;amp;auto=format&amp;amp;gif-q=60&amp;amp;q=75&amp;amp;s=9a622bf1cadf0fdc57a96268ae7c4318" alt="" data-canonical-src="https://i.imgur.com/NABKLqK.png" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fi.imgur.com%2FNABKLqK.png?ixlib=rb-1.2.2&amp;amp;auto=format&amp;amp;gif-q=60&amp;amp;q=75&amp;amp;w=1400&amp;amp;fit=max&amp;amp;s=9aac8ca68c66a84d747cce368b8868c6 1x" loading="lazy"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;上記のように情報をクリックすると，該当するバイト文字列が強調表示されます．逆も同様です．&lt;/p&gt;

&lt;h2&gt;
&lt;span id="環境情報" class="fragment"&gt;&lt;/span&gt;&lt;a href="#%E7%92%B0%E5%A2%83%E6%83%85%E5%A0%B1"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;環境情報&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Ubuntu 18.04 LTS&lt;/li&gt;
&lt;li&gt;Wireshark 2.6.10&lt;/li&gt;
&lt;/ul&gt;
</content>
    <published>2020-12-16T19:00:56Z</published>
    <updated>2020-12-19T12:51:45Z</updated>
    <author>
      <name>taro-hida</name>
    </author>
  </entry>
  <entry>
    <id>tag:qiita.com,2005:PublicArticle/1357572</id>
    <published>2020-12-14T02:05:16+09:00</published>
    <updated>2020-12-14T03:48:53+09:00</updated>
    <link rel="alternate" type="text/html" href="https://qiita.com/130cmWolf/items/744769825289a1ca8f55"/>
    <url>https://qiita.com/130cmWolf/items/744769825289a1ca8f55</url>
    <title>スマホでVPNトンネル</title>
    <content type="html">
&lt;h1&gt;
&lt;span id="スマホでvpnトンネルを掘る" class="fragment"&gt;&lt;/span&gt;&lt;a href="#%E3%82%B9%E3%83%9E%E3%83%9B%E3%81%A7vpn%E3%83%88%E3%83%B3%E3%83%8D%E3%83%AB%E3%82%92%E6%8E%98%E3%82%8B"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;スマホでVPNトンネルを掘る！&lt;/h1&gt;

&lt;h2&gt;
&lt;span id="なぜ掘るのか" class="fragment"&gt;&lt;/span&gt;&lt;a href="#%E3%81%AA%E3%81%9C%E6%8E%98%E3%82%8B%E3%81%AE%E3%81%8B"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;なぜ掘るのか&lt;/h2&gt;

&lt;p&gt;&lt;del&gt;そこに回線があるから&lt;/del&gt;&lt;br&gt;
スマホとConoHa間でVPNトンネルを掘って速度を安定させます。&lt;br&gt;
VPNを掘ることのメリットは&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;アクセスサイトごとの速度制限を設けている場合どれだけ回線が空いていても最高速が出ない&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;主にこれを目的としてトンネルを掘っていきます&lt;/p&gt;

&lt;p&gt;デメリットは&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;トンネルの中を通る通信は全てVPN先との通信になる&lt;br&gt;
すなわちコンテンツフリーの対象外通信となる&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;契約していない人には関係無いですが。&lt;/p&gt;

&lt;h2&gt;
&lt;span id="なぜconohaなのか" class="fragment"&gt;&lt;/span&gt;&lt;a href="#%E3%81%AA%E3%81%9Cconoha%E3%81%AA%E3%81%AE%E3%81%8B"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;なぜConoHaなのか&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;回線速度がそこそこ出ます&lt;br&gt;
今さらっと計って64Mbps程は出ます&lt;br&gt;
スマホの通常利用なら余裕です&lt;br&gt;
&lt;/li&gt;
&lt;li&gt;OS起動から初期設定までの更新作業が&lt;br&gt;
サーバー自体の速度もなかなかに速いので&lt;br&gt;
待ち発生が少なくなって正直楽&lt;/li&gt;
&lt;li&gt;既存VPSをVPS割引切符に切り替えたので
若干クーポンが余ってる&lt;br&gt;
ちょっとアドベントカレンダーで消費しようかなと&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;　　&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ConoHaちゃんかわいい&lt;br&gt;
オフィシャルの壁紙ヤバない？ 2020冬版とか死人が出るレベル いつものジャケットもいいけどコートとかもふもふとか　軽く尊死するやつ（早口&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
&lt;span id="さっさと建てます" class="fragment"&gt;&lt;/span&gt;&lt;a href="#%E3%81%95%E3%81%A3%E3%81%95%E3%81%A8%E5%BB%BA%E3%81%A6%E3%81%BE%E3%81%99"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;さっさと建てます&lt;/h1&gt;

&lt;h2&gt;
&lt;span id="vps立ち上げ" class="fragment"&gt;&lt;/span&gt;&lt;a href="#vps%E7%AB%8B%E3%81%A1%E4%B8%8A%E3%81%92"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;VPS立ち上げ&lt;/h2&gt;

&lt;p&gt;今回はサッと建てて環境をガッと作って確認したいので&lt;br&gt;
最低構成で立ち上げます&lt;br&gt;
何やら公式がCentOS8のサポートがどうとかこうとか&lt;br&gt;
CentOS Streamへ移行がどうとかこうとかしていますがCentOSで行きます&lt;br&gt;
&lt;a href="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F150940%2F579221cb-22db-507c-7549-e0e61bd99f5e.png?ixlib=rb-1.2.2&amp;amp;auto=format&amp;amp;gif-q=60&amp;amp;q=75&amp;amp;s=2e4a1fa9fca5cf116d44cbf3bbcc21b4" target="_blank" rel="nofollow noopener"&gt;&lt;img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F150940%2F579221cb-22db-507c-7549-e0e61bd99f5e.png?ixlib=rb-1.2.2&amp;amp;auto=format&amp;amp;gif-q=60&amp;amp;q=75&amp;amp;s=2e4a1fa9fca5cf116d44cbf3bbcc21b4" alt="image.png" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/150940/579221cb-22db-507c-7549-e0e61bd99f5e.png" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F150940%2F579221cb-22db-507c-7549-e0e61bd99f5e.png?ixlib=rb-1.2.2&amp;amp;auto=format&amp;amp;gif-q=60&amp;amp;q=75&amp;amp;w=1400&amp;amp;fit=max&amp;amp;s=fbaccf919a1b9fefb1ec4b9420d2af39 1x" loading="lazy"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;ConoHaのCentOS StreamになったらOSテンプレどうなるんでしょうかねー&lt;/p&gt;

&lt;p&gt;パスワードもきちっと&lt;a href="https://keepass.info/" title="KeePass" rel="nofollow noopener" target="_blank"&gt;ジェネレーター&lt;/a&gt;で適当に作成保存してしまいます&lt;br&gt;
&lt;a href="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F150940%2Fd63d243a-1237-d159-2222-b99bb8bf8338.png?ixlib=rb-1.2.2&amp;amp;auto=format&amp;amp;gif-q=60&amp;amp;q=75&amp;amp;s=ec940f314fd8858507120a6d30517cec" target="_blank" rel="nofollow noopener"&gt;&lt;img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F150940%2Fd63d243a-1237-d159-2222-b99bb8bf8338.png?ixlib=rb-1.2.2&amp;amp;auto=format&amp;amp;gif-q=60&amp;amp;q=75&amp;amp;s=ec940f314fd8858507120a6d30517cec" alt="image.png" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/150940/d63d243a-1237-d159-2222-b99bb8bf8338.png" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F150940%2Fd63d243a-1237-d159-2222-b99bb8bf8338.png?ixlib=rb-1.2.2&amp;amp;auto=format&amp;amp;gif-q=60&amp;amp;q=75&amp;amp;w=1400&amp;amp;fit=max&amp;amp;s=95c293d2dec54f408fbb24410ad60e70 1x" loading="lazy"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;SSHキーはご自由に&lt;br&gt;
あった方がいいとは思います&lt;/p&gt;

&lt;p&gt;&lt;a href="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F150940%2F16702c95-422c-a40e-717e-3ea824693e80.png?ixlib=rb-1.2.2&amp;amp;auto=format&amp;amp;gif-q=60&amp;amp;q=75&amp;amp;s=e1226ad99aeb31637a6f7aea38ed2f84" target="_blank" rel="nofollow noopener"&gt;&lt;img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F150940%2F16702c95-422c-a40e-717e-3ea824693e80.png?ixlib=rb-1.2.2&amp;amp;auto=format&amp;amp;gif-q=60&amp;amp;q=75&amp;amp;s=e1226ad99aeb31637a6f7aea38ed2f84" alt="image.png" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/150940/16702c95-422c-a40e-717e-3ea824693e80.png" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F150940%2F16702c95-422c-a40e-717e-3ea824693e80.png?ixlib=rb-1.2.2&amp;amp;auto=format&amp;amp;gif-q=60&amp;amp;q=75&amp;amp;w=1400&amp;amp;fit=max&amp;amp;s=97f4a345c425ff0a84f4df3a86aa65f9 1x" loading="lazy"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;あとスタートアップスクリプト使ってみます。&lt;/p&gt;

&lt;div class="code-frame" data-lang="bash"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#!/bin/bash&lt;/span&gt;
yum &lt;span class="nt"&gt;-q&lt;/span&gt; &lt;span class="nt"&gt;-y&lt;/span&gt; makecache
yum &lt;span class="nt"&gt;-q&lt;/span&gt; &lt;span class="nt"&gt;-y&lt;/span&gt; upgrade

yum &lt;span class="nb"&gt;install &lt;/span&gt;epel-release &lt;span class="nt"&gt;-y&lt;/span&gt;
yum &lt;span class="nt"&gt;--enablerepo&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;epel &lt;span class="nt"&gt;-y&lt;/span&gt; &lt;span class="nb"&gt;install &lt;/span&gt;openvpn easy-rsa

reboot
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;入力している物はテンプレートにあった物に openvpn インストールと reboot を加えた物です&lt;br&gt;
作成開始して少し待つとVPSが上がってきます&lt;/p&gt;

&lt;p&gt;&lt;del&gt;作成日に書いてあるとおり平日残業土曜出勤だったので担当日に駆け込みで書いてますハイ。&lt;/del&gt;&lt;/p&gt;

&lt;h1&gt;
&lt;span id="ssh接続" class="fragment"&gt;&lt;/span&gt;&lt;a href="#ssh%E6%8E%A5%E7%B6%9A"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;SSH接続&lt;/h1&gt;

&lt;p&gt;いつも通りrloginでサクッと繋ぎます&lt;br&gt;
ConoHaコンソールでもいいです&lt;/p&gt;

&lt;p&gt;立ち上げ直後ですがアップデートが後ろで走ってるようです&lt;/p&gt;

&lt;div class="code-frame" data-lang="bash"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# ps alxww | grep yum&lt;/span&gt;
4     0    1246    1210  20   0 885888 82332 -      S    ?          1:30 /usr/libexec/platform-python /usr/bin/yum &lt;span class="nt"&gt;-q&lt;/span&gt; &lt;span class="nt"&gt;-y&lt;/span&gt; upgrade
0     0   28270    1273  20   0 221904   968 -      R+   pts/0      0:00 &lt;span class="nb"&gt;grep&lt;/span&gt; &lt;span class="nt"&gt;--color&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;auto yum
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;psでチェックしないと終わったのがわからないですが&lt;br&gt;
ps で監視しつつ終わったら自動的にリブートします&lt;br&gt;
（SSHだと勝手に切断されます、コンソールだとリブートプロセスが見えます）&lt;/p&gt;

&lt;p&gt;この更新作業にHDDとSSDの差が大きく出る…&lt;br&gt;
オールSSDのConoHaちゃんマジ速い&lt;/p&gt;

&lt;h1&gt;
&lt;span id="openvpnインストール" class="fragment"&gt;&lt;/span&gt;&lt;a href="#openvpn%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;OpenVPNインストール&lt;/h1&gt;

&lt;p&gt;スタートアップスクリプトに入れていない場合はここでインストールします&lt;/p&gt;

&lt;div class="code-frame" data-lang="bash"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# yum install epel-release -y&lt;/span&gt;
&lt;span class="c"&gt;# yum --enablerepo=epel -y install openvpn easy-rsa&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class="code-frame" data-lang="bash"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# yum list installed | grep openvpn&lt;/span&gt;
openvpn.x86_64                       2.4.9-1.el8                             @epel     
&lt;span class="c"&gt;# yum list installed | grep easy-rsa&lt;/span&gt;
easy-rsa.noarch                      3.0.8-1.el8                             @epel    
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;openvpn 2.4.9-1.el8&lt;br&gt;
easy-rsa 3.0.8-1.el8 &lt;br&gt;
が落ちていました&lt;br&gt;
2020/12/13現在最新は2.5.0が出てるのでひとつ前の物がパッケージ登録されてるようですね&lt;/p&gt;

&lt;h3&gt;
&lt;span id="認証局作成" class="fragment"&gt;&lt;/span&gt;&lt;a href="#%E8%AA%8D%E8%A8%BC%E5%B1%80%E4%BD%9C%E6%88%90"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;認証局作成&lt;/h3&gt;

&lt;div class="code-frame" data-lang="bash"&gt;
&lt;div class="code-lang"&gt;&lt;span class="bold"&gt;スクリプト等コピー&lt;/span&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# mkdir /etc/openvpn/easy-rsa&lt;/span&gt;
&lt;span class="c"&gt;# cp /usr/share/easy-rsa/3/* /etc/openvpn/easy-rsa/ -R&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div class="code-frame" data-lang="bash"&gt;
&lt;div class="code-lang"&gt;&lt;span class="bold"&gt;初期化&lt;/span&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# cd /etc/openvpn/easy-rsa&lt;/span&gt;
&lt;span class="c"&gt;# ./easyrsa init-pki&lt;/span&gt;

init-pki &lt;span class="nb"&gt;complete&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; you may now create a CA or requests.
Your newly created PKI &lt;span class="nb"&gt;dir &lt;/span&gt;is: /etc/openvpn/easy-rsa/pki


&lt;span class="c"&gt;# ./easyrsa build-ca&lt;/span&gt;
Using SSL: openssl OpenSSL 1.1.1g FIPS  21 Apr 2020

Enter New CA Key Passphrase: &lt;span class="o"&gt;(&lt;/span&gt;パスフレーズ&lt;span class="o"&gt;)&lt;/span&gt;
Re-Enter New CA Key Passphrase: &lt;span class="o"&gt;(&lt;/span&gt;再パスフレーズ&lt;span class="o"&gt;)&lt;/span&gt;
Generating RSA private key, 2048 bit long modulus &lt;span class="o"&gt;(&lt;/span&gt;2 primes&lt;span class="o"&gt;)&lt;/span&gt;
...+++++
.................................................................................+++++
e is 65537 &lt;span class="o"&gt;(&lt;/span&gt;0x010001&lt;span class="o"&gt;)&lt;/span&gt;
You are about to be asked to enter information that will be incorporated
into your certificate request.
What you are about to enter is what is called a Distinguished Name or a DN.
There are quite a few fields but you can leave some blank
For some fields there will be a default value,
If you enter &lt;span class="s1"&gt;'.'&lt;/span&gt;, the field will be left blank.
&lt;span class="nt"&gt;-----&lt;/span&gt;
Common Name &lt;span class="o"&gt;(&lt;/span&gt;eg: your user, host, or server name&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;Easy-RSA CA]: &lt;span class="o"&gt;(&lt;/span&gt;ドメインとか名前とか&lt;span class="o"&gt;)&lt;/span&gt;

CA creation &lt;span class="nb"&gt;complete &lt;/span&gt;and you may now import and sign cert requests.
Your new CA certificate file &lt;span class="k"&gt;for &lt;/span&gt;publishing is at:
/etc/openvpn/easy-rsa/pki/ca.crt


&lt;span class="c"&gt;# cp pki/ca.crt /etc/openvpn/server/&lt;/span&gt;
&lt;span class="c"&gt;# cp pki/ca.crt ~/&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div class="code-frame" data-lang="bash"&gt;
&lt;div class="code-lang"&gt;&lt;span class="bold"&gt;サーバー証明書と秘密鍵&lt;/span&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# ./easyrsa build-server-full server nopass&lt;/span&gt;
Using SSL: openssl OpenSSL 1.1.1g FIPS  21 Apr 2020
Generating a RSA private key
.....................+++++
..................................................................................+++++
writing new private key to &lt;span class="s1"&gt;'/etc/openvpn/easy-rsa/pki/easy-rsa-1362.AOu0fI/tmp.QhGysb'&lt;/span&gt;
&lt;span class="nt"&gt;-----&lt;/span&gt;
Using configuration from /etc/openvpn/easy-rsa/pki/easy-rsa-1362.AOu0fI/tmp.ROfRAQ
Enter pass phrase &lt;span class="k"&gt;for&lt;/span&gt; /etc/openvpn/easy-rsa/pki/private/ca.key: &lt;span class="o"&gt;(&lt;/span&gt;パスフレーズ&lt;span class="o"&gt;)&lt;/span&gt;
Check that the request matches the signature
Signature ok
The Subjects Distinguished Name is as follows
commonName            :ASN.1 12:&lt;span class="s1"&gt;'server'&lt;/span&gt;
Certificate is to be certified &lt;span class="k"&gt;until &lt;/span&gt;Mar 18 06:56:10 2023 GMT &lt;span class="o"&gt;(&lt;/span&gt;825 days&lt;span class="o"&gt;)&lt;/span&gt;

Write out database with 1 new entries
Data Base Updated

&lt;span class="c"&gt;# cp pki/issued/server.crt /etc/openvpn/server/&lt;/span&gt;
&lt;span class="c"&gt;# cp pki/private/server.key /etc/openvpn/server/&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div class="code-frame" data-lang="bash"&gt;
&lt;div class="code-lang"&gt;&lt;span class="bold"&gt;クライアント証明書と秘密鍵&lt;/span&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# ./easyrsa build-client-full client nopass&lt;/span&gt;
Using SSL: openssl OpenSSL 1.1.1g FIPS  21 Apr 2020
Generating a RSA private key
..............+++++
................+++++
writing new private key to &lt;span class="s1"&gt;'/etc/openvpn/easy-rsa/pki/easy-rsa-1566.aYaqYS/tmp.ej23V0'&lt;/span&gt;
&lt;span class="nt"&gt;-----&lt;/span&gt;
Using configuration from /etc/openvpn/easy-rsa/pki/easy-rsa-1566.aYaqYS/tmp.4gYKxz
Enter pass phrase &lt;span class="k"&gt;for&lt;/span&gt; /etc/openvpn/easy-rsa/pki/private/ca.key:
Check that the request matches the signature
Signature ok
The Subject s Distinguished Name is as follows
commonName            :ASN.1 12:&lt;span class="s1"&gt;'client'&lt;/span&gt;
Certificate is to be certified &lt;span class="k"&gt;until &lt;/span&gt;Mar 18 08:10:37 2023 GMT &lt;span class="o"&gt;(&lt;/span&gt;825 days&lt;span class="o"&gt;)&lt;/span&gt;

Write out database with 1 new entries
Data Base Updated

&lt;span class="c"&gt;# cp pki/issued/client.crt ~/&lt;/span&gt;
&lt;span class="c"&gt;# cp pki/private/client.key ~/&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div class="code-frame" data-lang="bash"&gt;
&lt;div class="code-lang"&gt;&lt;span class="bold"&gt;DiffieHellmanパラメータ作成&lt;/span&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# ./easyrsa gen-dh&lt;/span&gt;
Using SSL: openssl OpenSSL 1.1.1g FIPS  21 Apr 2020
Generating DH parameters, 2048 bit long safe prime, generator 2
This is going to take a long &lt;span class="nb"&gt;time&lt;/span&gt;
................+.....................+.....++&lt;span class="k"&gt;*&lt;/span&gt;++&lt;span class="k"&gt;*&lt;/span&gt;++&lt;span class="k"&gt;*&lt;/span&gt;++&lt;span class="k"&gt;*&lt;/span&gt;

DH parameters of size 2048 created at /etc/openvpn/easy-rsa/pki/dh.pem
&lt;span class="c"&gt;# cp pki/dh.pem /etc/openvpn/&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;IPフォアード入れておきます&lt;/p&gt;

&lt;div class="code-frame" data-lang="bash"&gt;
&lt;div class="code-lang"&gt;&lt;span class="bold"&gt;新規作成&lt;/span&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# vi /etc/sysctl.d/10-ipv4_forward.conf&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div class="code-frame" data-lang="bash"&gt;
&lt;div class="code-lang"&gt;&lt;span class="bold"&gt;10-ipv4_forward.conf&lt;/span&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;net.ipv4.ip_forward &lt;span class="o"&gt;=&lt;/span&gt; 1
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div class="code-frame" data-lang="text"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;# sysctl --system
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;VPN設定入れていきます&lt;/p&gt;

&lt;div class="code-frame" data-lang="bash"&gt;
&lt;div class="code-lang"&gt;&lt;span class="bold"&gt;openvpn設定&lt;/span&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# openvpn --genkey --secret /etc/openvpn/ta.key&lt;/span&gt;
&lt;span class="c"&gt;# cp /etc/openvpn/ta.key ~/&lt;/span&gt;
&lt;span class="c"&gt;# cp /usr/share/doc/openvpn/sample/sample-config-files/server.conf /etc/openvpn/server/&lt;/span&gt;
&lt;span class="c"&gt;# vi /etc/openvpn/server/server.conf&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div class="code-frame" data-lang="diff"&gt;
&lt;div class="code-lang"&gt;&lt;span class="bold"&gt;server.conf&lt;/span&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="gd"&gt;- dh dh2048.pem
&lt;/span&gt;&lt;span class="gi"&gt;+ dh dh.pem
&lt;/span&gt;
- server 10.8.0.0 255.255.255.0
&lt;span class="gi"&gt;+ server 192.168.64.0 255.255.255.0
&lt;/span&gt;
# back to the OpenVPN server.
&lt;span class="err"&gt;;push&lt;/span&gt; "route 192.168.10.0 255.255.255.0"
&lt;span class="err"&gt;;push&lt;/span&gt; "route 192.168.20.0 255.255.255.0"
&lt;span class="gi"&gt;+ push "route 0.0.0.0 0.0.0.0"
&lt;/span&gt;
- ;user nobody
&lt;span class="gd"&gt;- ;group nobody
&lt;/span&gt;&lt;span class="gi"&gt;+ user nobody
+ group nobody
&lt;/span&gt;
- ;log-append  openvpn.log
&lt;span class="gi"&gt;+ log-append  /var/log/openvpn.log
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div class="code-frame" data-lang="bash"&gt;
&lt;div class="code-lang"&gt;&lt;span class="bold"&gt;起動設定&lt;/span&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# systemctl enable --now openvpn-server@server&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div class="code-frame" data-lang="bash"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# firewall-cmd --add-port=1194/udp --permanent&lt;/span&gt;
&lt;span class="c"&gt;# firewall-cmd --reload&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1&gt;
&lt;span id="ovpnファイルの作成" class="fragment"&gt;&lt;/span&gt;&lt;a href="#ovpn%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%81%AE%E4%BD%9C%E6%88%90"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;.ovpnファイルの作成&lt;/h1&gt;

&lt;div class="code-frame" data-lang=""&gt;
&lt;div class="code-lang"&gt;&lt;span class="bold"&gt;ヘッダーファイルの作成&lt;/span&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;# vi hedader
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div class="code-frame" data-lang=""&gt;
&lt;div class="code-lang"&gt;&lt;span class="bold"&gt;header&lt;/span&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;client
dev tun
proto udp
remote サーバーアドレス 1194
resolv-retry infinite
nobind
persist-key
persist-tun
remote-cert-tls server
tls-client
key-direction 1
cipher AES-256-CBC
verb 3
tun-mtu 1500
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div class="code-frame" data-lang=""&gt;
&lt;div class="code-lang"&gt;&lt;span class="bold"&gt;いろいろ接続用&lt;/span&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;# vi makeovpn.sh
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div class="code-frame" data-lang="bash"&gt;
&lt;div class="code-lang"&gt;&lt;span class="bold"&gt;makeovpn.sh&lt;/span&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#!/bin/bash&lt;/span&gt;

&lt;span class="nb"&gt;cat&lt;/span&gt; ./header
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'&amp;lt;ca&amp;gt;'&lt;/span&gt;
&lt;span class="nb"&gt;cat&lt;/span&gt; ./ca.crt
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'&amp;lt;/ca&amp;gt;'&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'&amp;lt;key&amp;gt;'&lt;/span&gt;
&lt;span class="nb"&gt;cat&lt;/span&gt; ./client.key
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'&amp;lt;/key&amp;gt;'&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'&amp;lt;cert&amp;gt;'&lt;/span&gt;
&lt;span class="nb"&gt;grep&lt;/span&gt; &lt;span class="nt"&gt;-A&lt;/span&gt; 30 &lt;span class="s1"&gt;'BEGIN CERTIFICATE'&lt;/span&gt; ./client.crt
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'&amp;lt;/cert&amp;gt;'&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'&amp;lt;tls-auth&amp;gt;'&lt;/span&gt;
&lt;span class="nb"&gt;cat&lt;/span&gt; ./ta.key
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;'&amp;lt;/tls-auth&amp;gt;'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div class="code-frame" data-lang=""&gt;
&lt;div class="code-lang"&gt;&lt;span class="bold"&gt;実行権&lt;/span&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;# chmod +x makeovpn.sh
# ./makeovpn.sh &amp;gt; client.ovpn
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;作成したovpnファイルを&lt;br&gt;
スマホにコピーして&lt;br&gt;
OpenVPNクライアントにインポートして接続！&lt;/p&gt;

&lt;div class="code-frame" data-lang="text"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</content>
    <published>2020-12-14T02:05:16Z</published>
    <updated>2020-12-14T03:48:53Z</updated>
    <author>
      <name>130cmWolf</name>
    </author>
  </entry>
  <entry>
    <id>tag:qiita.com,2005:PublicArticle/1356624</id>
    <published>2020-12-13T00:38:53+09:00</published>
    <updated>2020-12-13T00:38:53+09:00</updated>
    <link rel="alternate" type="text/html" href="https://qiita.com/mafumafuultu/items/cd0c375d248c1e9267c0"/>
    <url>https://qiita.com/mafumafuultu/items/cd0c375d248c1e9267c0</url>
    <title>Caddy2でPHPを動かしたい</title>
    <content type="html">&lt;p&gt;環境&lt;br&gt;
Win10 AMD64&lt;/p&gt;

&lt;p&gt;構成&lt;/p&gt;

&lt;div class="code-frame" data-lang="text"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;C:/
    tool/
        caddy/
            caddy.exe
    exapmle/
        Caddyfile
        php.ini
    ver/
        a.html
        index.php
    php/
        ....
        php-cgi.exe
        php.exe
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2&gt;
&lt;span id="各種インストール" class="fragment"&gt;&lt;/span&gt;&lt;a href="#%E5%90%84%E7%A8%AE%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;各種インストール&lt;/h2&gt;

&lt;h3&gt;
&lt;span id="caddy2" class="fragment"&gt;&lt;/span&gt;&lt;a href="#caddy2"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;Caddy2&lt;/h3&gt;

&lt;p&gt;前回書いた &lt;a href="https://qiita.com/mafumafuultu/items/2bc159a5cf9cc30df9d8" id="reference-31e6436b8c2700491ebf"&gt;Caddyの使い方メモ&lt;/a&gt;を参照&lt;/p&gt;

&lt;p&gt;&lt;a href="https://caddyserver.com/docs/caddyfile/directives/php_fastcgi" rel="nofollow noopener" target="_blank"&gt;php_fastcgi&lt;/a&gt;に設定するアドレスは &lt;code&gt;php-cgi&lt;/code&gt;の&lt;code&gt;-b&lt;/code&gt;オプションに設定するアドレス&lt;/p&gt;

&lt;div class="code-frame" data-lang=""&gt;
&lt;div class="code-lang"&gt;&lt;span class="bold"&gt;Caddyfile&lt;/span&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;http://localhost {
    root * C:/ver/
    php_fastcgi http://localhost:2020
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;h3&gt;
&lt;span id="php8" class="fragment"&gt;&lt;/span&gt;&lt;a href="#php8"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;PHP8&lt;/h3&gt;

&lt;p&gt;&lt;a href="https://windows.php.net/download#php-8.0" rel="nofollow noopener" target="_blank"&gt;PHP8 ダウンロード&lt;/a&gt;&lt;br&gt;
今回使うのはPHP8のNon Thread Safe版を使う。&lt;br&gt;
zipの中身を&lt;code&gt;C:/php/&lt;/code&gt;に展開し&lt;code&gt;PATH&lt;/code&gt;に&lt;code&gt;C:/php&lt;/code&gt;を追加&lt;/p&gt;

&lt;div class="code-frame" data-lang="powershell"&gt;
&lt;div class="code-lang"&gt;&lt;span class="bold"&gt;PHPのパスが通った事を確認&lt;/span&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nf"&gt;php&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;-v&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div class="code-frame" data-lang=""&gt;
&lt;div class="code-lang"&gt;&lt;span class="bold"&gt;パスが通っていればこんな感じ&lt;/span&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;PHP 8.0.0 (cli) (built: Nov 24 2020 22:02:58) ( NTS Visual C++ 2019 x64 )
Copyright (c) The PHP Group
Zend Engine v4.0.0-dev, Copyright (c) Zend Technologies
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div class="code-frame" data-lang="powershell"&gt;
&lt;div class="code-lang"&gt;&lt;span class="bold"&gt;php.iniを設置&lt;/span&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nf"&gt;cp&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;C:/php/php.ini-production&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;C:/exapmle/php.ini&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;古より受け継がれし伝統&lt;code&gt;phpinfo()&lt;/code&gt;を用意しておく&lt;/p&gt;

&lt;div class="code-frame" data-lang="php"&gt;
&lt;div class="code-lang"&gt;&lt;span class="bold"&gt;/ver/index.php&lt;/span&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt; &lt;span class="nb"&gt;phpinfo&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt; &lt;span class="cp"&gt;?&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;h2&gt;
&lt;span id="起動" class="fragment"&gt;&lt;/span&gt;&lt;a href="#%E8%B5%B7%E5%8B%95"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;起動&lt;/h2&gt;

&lt;p&gt;ターミナルを2つ立ち上げる&lt;/p&gt;

&lt;div class="code-frame" data-lang="powershell"&gt;
&lt;div class="code-lang"&gt;&lt;span class="bold"&gt;fastcgiを立ち上げ&lt;/span&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nf"&gt;cd&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;C:/example&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nf"&gt;php-cgi&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;-b&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;localhost:2020&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div class="code-frame" data-lang="powershell"&gt;
&lt;div class="code-lang"&gt;&lt;span class="bold"&gt;Caddyサーバ立ち上げ&lt;/span&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nf"&gt;cd&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;C:/example&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nf"&gt;caddy&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;run&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code&gt;http://localhost&lt;/code&gt; にアクセスし、&lt;code&gt;phpinfo()&lt;/code&gt;が実行されたことを確認する。&lt;/p&gt;
</content>
    <published>2020-12-13T00:38:53Z</published>
    <updated>2020-12-13T00:38:53Z</updated>
    <author>
      <name>mafumafuultu</name>
    </author>
  </entry>
  <entry>
    <id>tag:qiita.com,2005:PublicArticle/1356278</id>
    <published>2020-12-12T17:48:32+09:00</published>
    <updated>2020-12-12T17:48:32+09:00</updated>
    <link rel="alternate" type="text/html" href="https://qiita.com/yumetodo/items/70b375e42561bafb0e44"/>
    <url>https://qiita.com/yumetodo/items/70b375e42561bafb0e44</url>
    <title>Google Photosの力を借りてブログをvscodeで書くときの写真の取り扱いを楽にする拡張書いたけど先行きが超不透明です！</title>
    <content type="html">
&lt;h1&gt;
&lt;span id="visual-studio-code-advent-calendar-2020" class="fragment"&gt;&lt;/span&gt;&lt;a href="#visual-studio-code-advent-calendar-2020"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;Visual Studio Code Advent Calendar 2020&lt;/h1&gt;

&lt;p&gt;この記事はVisual Studio Code Advent Calendar 2020 12日目の記事です。&lt;br&gt;
昨日は &lt;a href="/akiko-pusu" class="user-mention js-hovercard" title="akiko-pusu" data-hovercard-target-type="user" data-hovercard-target-name="akiko-pusu"&gt;@akiko-pusu&lt;/a&gt; さんの&lt;a href="https://qiita.com/akiko-pusu/items/ffd6ec8d00a0e6e24b92" id="reference-117541ccf8b8ac669bd0"&gt;VisualStudio CodeからMongoDBにつなげてみよう！&lt;/a&gt;でした。SQLの勉強しようと思ったときにほんの少しだけMariaDBにつないだことはあったんですが、また今度トライしよう・・・。&lt;/p&gt;

&lt;h1&gt;
&lt;span id="はじめに" class="fragment"&gt;&lt;/span&gt;&lt;a href="#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;はじめに&lt;/h1&gt;

&lt;h2&gt;
&lt;span id="ブログをvscodeで書く" class="fragment"&gt;&lt;/span&gt;&lt;a href="#%E3%83%96%E3%83%AD%E3%82%B0%E3%82%92vscode%E3%81%A7%E6%9B%B8%E3%81%8F"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;ブログをvscodeで書く&lt;/h2&gt;

&lt;p&gt;自分ははてなブログでブログを書いています。はてなブログはMarkdownで書けるのですが、ある程度長文を書くのにブラウザ上の貧弱なエディタで記述するのはストレスが溜まってきます。&lt;/p&gt;

&lt;p&gt;そこでVSCodeでブログを書くか、となるのはまあ割と普通の発想だと思います。&lt;a href="https://marketplace.visualstudio.com/items?itemName=yzhang.markdown-all-in-one" rel="nofollow noopener" target="_blank"&gt;Markdown All in One&lt;/a&gt;という優れた拡張もありますしね。&lt;/p&gt;

&lt;h2&gt;
&lt;span id="ブログと画像" class="fragment"&gt;&lt;/span&gt;&lt;a href="#%E3%83%96%E3%83%AD%E3%82%B0%E3%81%A8%E7%94%BB%E5%83%8F"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;ブログと画像&lt;/h2&gt;

&lt;p&gt;ブログに欠かせないのが画像です。特に登山の記録なんかを書くときは写真を多用します。自分は写真の置き場としてはてなブログを始めるより前、FC2ブログで書いてた時代からPicasa(今はGoogle Photos)を使っていました。&lt;/p&gt;

&lt;p&gt;&lt;a href="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-user-contents.imgix.net%2Fhttps%253A%252F%252Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%252F0%252F94177%252F119ae099-6a57-6531-ef6b-929d7a18f914.png%3Fixlib%3Drb-1.2.2%26auto%3Dformat%26gif-q%3D60%26q%3D75%26w%3D1400%26fit%3Dmax%26s%3D44ecae9c97f9e5072c5f3eb8e1819e84?ixlib=rb-1.2.2&amp;amp;auto=format&amp;amp;gif-q=60&amp;amp;q=75&amp;amp;s=7c7f691f557d449d2ea41223a493f352" target="_blank" rel="nofollow noopener"&gt;&lt;img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-user-contents.imgix.net%2Fhttps%253A%252F%252Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%252F0%252F94177%252F119ae099-6a57-6531-ef6b-929d7a18f914.png%3Fixlib%3Drb-1.2.2%26auto%3Dformat%26gif-q%3D60%26q%3D75%26w%3D1400%26fit%3Dmax%26s%3D44ecae9c97f9e5072c5f3eb8e1819e84?ixlib=rb-1.2.2&amp;amp;auto=format&amp;amp;gif-q=60&amp;amp;q=75&amp;amp;s=7c7f691f557d449d2ea41223a493f352" alt="Picasa" data-canonical-src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F94177%2F119ae099-6a57-6531-ef6b-929d7a18f914.png?ixlib=rb-1.2.2&amp;amp;auto=format&amp;amp;gif-q=60&amp;amp;q=75&amp;amp;w=1400&amp;amp;fit=max&amp;amp;s=44ecae9c97f9e5072c5f3eb8e1819e84" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-user-contents.imgix.net%2Fhttps%253A%252F%252Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%252F0%252F94177%252F119ae099-6a57-6531-ef6b-929d7a18f914.png%3Fixlib%3Drb-1.2.2%26auto%3Dformat%26gif-q%3D60%26q%3D75%26w%3D1400%26fit%3Dmax%26s%3D44ecae9c97f9e5072c5f3eb8e1819e84?ixlib=rb-1.2.2&amp;amp;auto=format&amp;amp;gif-q=60&amp;amp;q=75&amp;amp;w=1400&amp;amp;fit=max&amp;amp;s=073157e574119ba01b58aa8301399476 1x" loading="lazy"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Picasaの時代はそういう使い方が想定されていてWebUIから写真の静的URLをかんたんに発行できました。&lt;/p&gt;

&lt;p&gt;Picasaに写真をおいていたおかげでFC2からはてなにブログを移したときも簡単に移行できたという経緯があるのでブログサービスへの依存を下げるためにも画像はブログサービスには置いときたくないわけです。&lt;/p&gt;

&lt;p&gt;はてなブログでは画像をはてなブログ自身にアップロードする他に、Google Photosから写真を貼り付けるシステムがかつて存在していました(&lt;a href="https://staff.hatenablog.com/entry/2020/06/10/155523" rel="nofollow noopener" target="_blank"&gt;現在この機能は一時的に封鎖されています&lt;/a&gt;)。Picasaが終了してGoogle Photosに移行したとき、Google PhotosのUIにはURL発行ボタンが消えてしまいましたのではてなのこの機能を使っていました。&lt;/p&gt;

&lt;p&gt;しかしながら、登山の記録のような大量の写真を貼り付けるようなときにGUIを操作するのは不便であること、この機能を使ったときに画像がHTML形式で書かれており、Markdownとして記述されないことなどの不満がありました。&lt;/p&gt;

&lt;h1&gt;
&lt;span id="vscodeの拡張を作ろう" class="fragment"&gt;&lt;/span&gt;&lt;a href="#vscode%E3%81%AE%E6%8B%A1%E5%BC%B5%E3%82%92%E4%BD%9C%E3%82%8D%E3%81%86"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;vscodeの拡張を作ろう&lt;/h1&gt;

&lt;p&gt;というわけで、そういう拡張機能を作ろうと考えました。&lt;/p&gt;

&lt;p&gt;必要となる機能は&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Markdownをパースして&lt;code&gt;![alt](path/to/image)&lt;/code&gt;のような記法で表される画像記法を探す&lt;/li&gt;
&lt;li&gt;画像ファイルをGoogle PhotosにアップロードしてURLを得る&lt;/li&gt;
&lt;li&gt;画像パスを置換する&lt;/li&gt;
&lt;li&gt;Markdownに書き戻す&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;です。&lt;/p&gt;

&lt;p&gt;Markdownの置換部分は別のレポジトリに分けてVSCodeの拡張としてはそれを呼び出すことにし、残りの画像アップロードとVSCode上でのUI注力する方針を定めました。&lt;/p&gt;

&lt;p&gt;MarkdownのパースがちょっとだるそうだけどまああとはGoogle PhotosのAPI叩いておしまいだしそこまで手間かからずに作れるでしょ。&lt;/p&gt;

&lt;p&gt;この言葉が盛大なフラグになるとは思いもよらず、開発は始まったのでした。2019年3月28日のことでした。&lt;/p&gt;

&lt;h1&gt;
&lt;span id="vscodeからoauth2する" class="fragment"&gt;&lt;/span&gt;&lt;a href="#vscode%E3%81%8B%E3%82%89oauth2%E3%81%99%E3%82%8B"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;vscodeからOAuth2する&lt;/h1&gt;

&lt;p&gt;Google Photos APIを叩くわけなので当然OAuth2するわけです。昔過ぎて何を参考にしたかは忘れましたが、1日位で概形ができあがって、あとは叩くAPIが増えるごとに手直ししていきました。&lt;/p&gt;

&lt;p&gt;最初はブラウザを立ち上げて認可画面から認可コードをもらって、それをコピペしてもらってvscode側でそれを受け取っていましたが、その方法がdeprecatedになってしまったことも有り、vscode拡張内でHTTPサーバーを立てて、そこにリダイレクトしてもらうことで認可コードを受け取るloopback ip方式に後に改修しました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/yumetodo/vscode-google-photos-uploader/commit/fe4192eb4d936b579daaadcc3529e50501625424" rel="nofollow noopener" target="_blank"&gt;yumetodo/vscode-google-photos-uploader@&lt;code&gt;fe4192e&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/yumetodo/vscode-google-photos-uploader/commit/1bc6583295e61c7f0e068bf6f932abf95f479ac2" rel="nofollow noopener" target="_blank"&gt;yumetodo/vscode-google-photos-uploader@&lt;code&gt;1bc6583&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;vscodeの拡張はnpmエコシステムの恩恵をフルに受け取れるのでこういう改修もさくさくできていいですよね。&lt;/p&gt;

&lt;h1&gt;
&lt;span id="markdownのパース" class="fragment"&gt;&lt;/span&gt;&lt;a href="#markdown%E3%81%AE%E3%83%91%E3%83%BC%E3%82%B9"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;markdownのパース&lt;/h1&gt;

&lt;h2&gt;
&lt;span id="自作期" class="fragment"&gt;&lt;/span&gt;&lt;a href="#%E8%87%AA%E4%BD%9C%E6%9C%9F"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;自作期&lt;/h2&gt;

&lt;p&gt;Markdownの置換をする以上、MarkdownをASTに変換して、そのASTをMarkdownに戻せないとだめだと考えました。ASTを作るだけならいくらでもライブラリはあるし、それこそmarkdown-itでも使えばいいわけです。ただ、ASTからMarkdownに戻すという需要が少ないのかさっぱり見つかりませんでした。&lt;/p&gt;

&lt;p&gt;致し方なく自作し始めました。CommonMarkのspecのexampleを見ながらパースを始めます。&lt;/p&gt;

&lt;p&gt;Markdownのパースは意外と難しくて、特に&lt;code&gt;code&lt;/code&gt;記法やコードブロック記法が厄介でした。こういった記法の中の&lt;code&gt;![alt](path/to/image)&lt;/code&gt;のような記法は無視したかったので、正規表現は使えません。&lt;/p&gt;

&lt;p&gt;するとすぐにJavaScriptの標準ライブラリでは文字列操作が貧弱すぎるという問題にぶつかりました。C++の&lt;code&gt;std::string&lt;/code&gt;のAPIを移植するようなことを始めたりと迷走しはじめます。&lt;/p&gt;

&lt;p&gt;それでもある程度形になってきた4月末、&lt;/p&gt;

&lt;div class="code-frame" data-lang="text"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;- Foo

  &amp;gt; bar
  &amp;gt;&amp;gt; foo
  &amp;gt; ```
  &amp;gt;&amp;gt; go
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;のような閉じないコードブロックの対応や、&lt;code&gt;Cannot read property '0' of undefined&lt;/code&gt;と言われるようなバグが取れずにいました。&lt;/p&gt;

&lt;h2&gt;
&lt;span id="rustのライブラリ" class="fragment"&gt;&lt;/span&gt;&lt;a href="#rust%E3%81%AE%E3%83%A9%E3%82%A4%E3%83%96%E3%83%A9%E3%83%AA"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;Rustのライブラリ&lt;/h2&gt;

&lt;p&gt;もう一度原点に立ち返って、目的を達成するライブラリが本当に無いのか探索したところ、Rust製の&lt;a href="https://crates.io/crates/pulldown-cmark" rel="nofollow noopener" target="_blank"&gt;pulldown-cmark&lt;/a&gt;/&lt;a href="https://crates.io/crates/pulldown-cmark-to-cmark" rel="nofollow noopener" target="_blank"&gt;pulldown-cmark-to-cmark&lt;/a&gt;が見つかりました。&lt;/p&gt;

&lt;p&gt;これまで書いてたコードはすべて投げ捨てて、これを呼び出す方向に舵を切りました。Rustのライブラリなので当然WASMの出番です。&lt;/p&gt;

&lt;p&gt;Rustをwasmとしてコンパイルするエコシステムがよく整備されていたこと、ライブラリの使い方がわからなくてIssueを立てたら親切に回答してもらえたこともあって、10日程度で(実働2日)形になりました。&lt;br&gt;
&lt;a href="https://github.com/raphlinus/pulldown-cmark/issues/394" rel="nofollow noopener" target="_blank"&gt;[Question] How to get img alt? · Issue #394 · raphlinus/pulldown-cmark&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;wasmが絡むnpmライブラリのデプロイの自動化については&lt;br&gt;
&lt;a href="https://qiita.com/yumetodo/items/7fda6d38bd5182388e48" id="reference-d0159c8b6d017b3b760a"&gt;rust+npm+wasm-packなrepoをGithub Actionsで自動テスト＆デプロイできるようにしてみた&lt;/a&gt;&lt;br&gt;
にまとめてあります。&lt;/p&gt;

&lt;p&gt;2020年夏、某所からpulldown-cmarkには&lt;a href="https://docs.rs/pulldown-cmark/0.7.2/pulldown_cmark/struct.Parser.html#method.into_offset_iter" rel="nofollow noopener" target="_blank"&gt;&lt;code&gt;pulldown_cmark::Parser::into_offset_iter()&lt;/code&gt;&lt;/a&gt;というAPIがあり、画像リンクのトークン位置を調べられるためたんなる文字列置換に持ち込めるという指摘がなされた。これを2020年11月末に実装した&lt;br&gt;
&lt;a href="https://github.com/yumetodo/markdown_img_url_editor_rust/commit/fa64dcbffd566c2df9931be850aa67bef2345a8c" rel="nofollow noopener" target="_blank"&gt;yumetodo/markdown_img_url_editor_rust@&lt;code&gt;fa64dcb&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
&lt;span id="google-photosとの戦争の幕開け" class="fragment"&gt;&lt;/span&gt;&lt;a href="#google-photos%E3%81%A8%E3%81%AE%E6%88%A6%E4%BA%89%E3%81%AE%E5%B9%95%E9%96%8B%E3%81%91"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;Google Photosとの戦争の幕開け&lt;/h1&gt;

&lt;h2&gt;
&lt;span id="ブログの写真が消えた" class="fragment"&gt;&lt;/span&gt;&lt;a href="#%E3%83%96%E3%83%AD%E3%82%B0%E3%81%AE%E5%86%99%E7%9C%9F%E3%81%8C%E6%B6%88%E3%81%88%E3%81%9F"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;ブログの写真が消えた！？&lt;/h2&gt;

&lt;p&gt;時はさかのぼりまだ自前実装のMarkdownパーサーを使っていた頃、2019年6月はじめに最初のリリースを出しました。それを使って早速ブログを書き&lt;sup id="fnref1"&gt;&lt;a href="#fn1" rel="footnote" title="私の父が"&gt;1&lt;/a&gt;&lt;/sup&gt;、公開しました。ところが数日後ブログを見てみると写真が消えているのです。どういうことでしょうか？&lt;/p&gt;

&lt;p&gt;&lt;a href="https://qiitadon.com/@yumetodo/102234037558548055" rel="nofollow noopener" target="_blank"&gt;&lt;img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F94177%2F73896c7f-cdf5-3ef8-e949-0af7f7ad54fc.png?ixlib=rb-1.2.2&amp;amp;auto=format&amp;amp;gif-q=60&amp;amp;q=75&amp;amp;s=c8521ad8a88addb6b45843115a37b27b" alt="image.png" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/94177/73896c7f-cdf5-3ef8-e949-0af7f7ad54fc.png" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F94177%2F73896c7f-cdf5-3ef8-e949-0af7f7ad54fc.png?ixlib=rb-1.2.2&amp;amp;auto=format&amp;amp;gif-q=60&amp;amp;q=75&amp;amp;w=1400&amp;amp;fit=max&amp;amp;s=6a71b0fe58d0be0648b08797a4040d4b 1x" loading="lazy"&gt;&lt;/a&gt;&lt;br&gt;
&lt;a href="https://qiitadon.com/@yumetodo/102234056576268905" rel="nofollow noopener" target="_blank"&gt;&lt;img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F94177%2F9c3c8885-ded3-5a18-27f6-3a69d20e79f7.png?ixlib=rb-1.2.2&amp;amp;auto=format&amp;amp;gif-q=60&amp;amp;q=75&amp;amp;s=4a19a853a11500be8b41520e61a470a8" alt="image.png" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/94177/9c3c8885-ded3-5a18-27f6-3a69d20e79f7.png" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F94177%2F9c3c8885-ded3-5a18-27f6-3a69d20e79f7.png?ixlib=rb-1.2.2&amp;amp;auto=format&amp;amp;gif-q=60&amp;amp;q=75&amp;amp;w=1400&amp;amp;fit=max&amp;amp;s=f41f17732cd5438c1721818466f3bf01 1x" loading="lazy"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;画像のURLを取ってくるのにGoogle Photos APIの&lt;code&gt;MediaItem&lt;/code&gt;の中の&lt;code&gt;baseUrl&lt;/code&gt;というプロパティを参照していました。ところが&lt;a href="https://developers.google.com/photos/library/reference/rest/v1/mediaItems#MediaItem" rel="nofollow noopener" target="_blank"&gt;Google Photos APIの説明ページ&lt;/a&gt;をよく見ると&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A URL to the media item's bytes. This shouldn't be used directly to access the media item.  &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;という文言が。これだけじゃ意味がよくわかりませんが、ひっそりと貼られているリンク先を見ると&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://developers.google.com/photos/library/guides/access-media-items#base-urls" rel="nofollow noopener" target="_blank"&gt;Access media items  |  Google Photos APIs  |  Google Developers&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;They are valid for 60 minutes and require additional parameters as they cannot be used as is.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;60分しか有効じゃないよーって書いてあります。&lt;/p&gt;

&lt;p&gt;開発時は60分を超えて数日間は有効だったので大丈夫と思っていたのですが、たまたまだったようです。そんなん、きぃつけへんって！&lt;/p&gt;

&lt;p&gt;結局Google Photos APIでは画像のURLが取れないので、致し方なくウェブスクレイピングするはめになりました。&lt;/p&gt;

&lt;p&gt;詳細は&lt;br&gt;
&lt;a href="https://qiita.com/yumetodo/items/ac77043b28795516be14" id="reference-331e6cff7831e6b81973"&gt;Google Photosからどうしても永続的な画像リンクを取得したい&lt;/a&gt;&lt;br&gt;
を参照してください。&lt;/p&gt;

&lt;h2&gt;
&lt;span id="unverified-apps" class="fragment"&gt;&lt;/span&gt;&lt;a href="#unverified-apps"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;Unverified apps&lt;/h2&gt;

&lt;p&gt;Google のAPIを叩くアプリケーションはGoogleによって承認されていなければなりません。さもなくば次のような画面がユーザーに表示されます。&lt;br&gt;
&lt;a href="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F94177%2Fd3eb11d8-fac5-1dae-861b-50ecc9df915c.png?ixlib=rb-1.2.2&amp;amp;auto=format&amp;amp;gif-q=60&amp;amp;q=75&amp;amp;s=eabf325737aa07dd25b24f6c2c6af3d1" target="_blank" rel="nofollow noopener"&gt;&lt;img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F94177%2Fd3eb11d8-fac5-1dae-861b-50ecc9df915c.png?ixlib=rb-1.2.2&amp;amp;auto=format&amp;amp;gif-q=60&amp;amp;q=75&amp;amp;s=eabf325737aa07dd25b24f6c2c6af3d1" alt="image.png" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/94177/d3eb11d8-fac5-1dae-861b-50ecc9df915c.png" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F94177%2Fd3eb11d8-fac5-1dae-861b-50ecc9df915c.png?ixlib=rb-1.2.2&amp;amp;auto=format&amp;amp;gif-q=60&amp;amp;q=75&amp;amp;w=1400&amp;amp;fit=max&amp;amp;s=2e0663c6b4962283c80752912dbad839 1x" loading="lazy"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;2019年8月22日の0時30分頃にGoogleに申請を出しました。実は同日の昼過ぎにはGoogleから承認できないよ―っていうメールが帰ってきていたのですが、メールを見落とし続け、2ヶ月後の10月21日、ようやくメールに気が付きます。&lt;/p&gt;

&lt;p&gt;さてここからは&lt;a href="https://github.com/yumetodo/vscode-google-photos-uploader/issues/3" rel="nofollow noopener" target="_blank"&gt;承認取得バトル&lt;/a&gt;の開始です。&lt;/p&gt;

&lt;p&gt;基本的には&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://support.google.com/cloud/answer/7454865" class="autolink" rel="nofollow noopener" target="_blank"&gt;https://support.google.com/cloud/answer/7454865&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://support.google.com/cloud/answer/6158849#public-and-internal" class="autolink" rel="nofollow noopener" target="_blank"&gt;https://support.google.com/cloud/answer/6158849#public-and-internal&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://developers.google.com/identity/protocols/OAuth2InstalledApp" class="autolink" rel="nofollow noopener" target="_blank"&gt;https://developers.google.com/identity/protocols/OAuth2InstalledApp&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;に書いてあることをやればいいわけですが、書いてないことで自分が指摘されたことは&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;アプリケーションはWebページを持たなければならない

&lt;ul&gt;
&lt;li&gt;そのドメインを所有していることをGoogle Search Consoleを通じて紐付けなければならない=DNSにテキストレコードを設定する必要がある&lt;/li&gt;
&lt;li&gt;WebページはHTTPSで接続できなければならない&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;urlに&lt;code&gt;google&lt;/code&gt;という文字列を含んではいけない&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;英語でアプリケーションの紹介動画(OAuth2による認可を出すと何が起こるかわかるもの)を作成しYouTubeに投稿しなければならない&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;最後2つは想定外やで・・・。&lt;/p&gt;

&lt;p&gt;DNSいじる必要があるということで、ドメインを取らないとだめってことですから、課金なしではGoogleのAPIは叩けないってことですね！まじか。&lt;/p&gt;

&lt;h1&gt;
&lt;span id="出来上がったもの" class="fragment"&gt;&lt;/span&gt;&lt;a href="#%E5%87%BA%E6%9D%A5%E4%B8%8A%E3%81%8C%E3%81%A3%E3%81%9F%E3%82%82%E3%81%AE"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;出来上がったもの&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=yumetodo.google-photos-uploader" rel="nofollow noopener" target="_blank"&gt;Google Photos Uploader(unofficial) - Visual Studio Marketplace&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F94177%2Fc62ac984-01f2-6c7b-d953-503dad1c166f.gif?ixlib=rb-1.2.2&amp;amp;auto=format&amp;amp;gif-q=60&amp;amp;q=75&amp;amp;s=357fce3f5a1aa6d8d7d35556c2a531e0" target="_blank" rel="nofollow noopener"&gt;&lt;img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F94177%2Fc62ac984-01f2-6c7b-d953-503dad1c166f.gif?ixlib=rb-1.2.2&amp;amp;auto=format&amp;amp;gif-q=60&amp;amp;q=75&amp;amp;s=357fce3f5a1aa6d8d7d35556c2a531e0" alt="working.gif" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/94177/c62ac984-01f2-6c7b-d953-503dad1c166f.gif" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F94177%2Fc62ac984-01f2-6c7b-d953-503dad1c166f.gif?ixlib=rb-1.2.2&amp;amp;auto=format&amp;amp;gif-q=60&amp;amp;q=75&amp;amp;w=1400&amp;amp;fit=max&amp;amp;s=e9b35c56bc50cca8dcf2c42556b9a94b 1x" loading="lazy"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;紆余曲折の結果次のような処理を行います。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Markdownをパースして&lt;code&gt;![alt](path/to/image)&lt;/code&gt;のような記法で表される画像記法を探す&lt;/li&gt;
&lt;li&gt;画像ファイルをGoogle Photosにアップロードする&lt;/li&gt;
&lt;li&gt;アップロードした画像を共有アルバムに追加する&lt;/li&gt;
&lt;li&gt;共有アルバムをスクレイピングして画像のURLを取得する&lt;/li&gt;
&lt;li&gt;画像をDLしたものと手元にあるファイルのHashを取り同一性を検証する&lt;/li&gt;
&lt;li&gt;画像パスを置換する&lt;/li&gt;
&lt;li&gt;Markdownに書き戻す&lt;/li&gt;
&lt;/ol&gt;

&lt;h1&gt;
&lt;span id="先行きが超不透明です" class="fragment"&gt;&lt;/span&gt;&lt;a href="#%E5%85%88%E8%A1%8C%E3%81%8D%E3%81%8C%E8%B6%85%E4%B8%8D%E9%80%8F%E6%98%8E%E3%81%A7%E3%81%99"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;先行きが超不透明です！&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://qiita.com/yumetodo/items/ac77043b28795516be14"&gt;Google Photosからどうしても永続的な画像リンクを取得したい&lt;/a&gt;&lt;br&gt;
にも書いたのですが、今回用いた方法で得られる画像のURLの永続性については疑問符が残ります。&lt;br&gt;
すでにPiacasa Web時代からのURLは一部がログインを求められるように予告なく動作が変更されるなど、どうやら終わりの始まりといった様相を呈しています。Googleとしては静的画像ホスティングサイトとして使われたのでは、マネタイズが難しいということなんでしょうか。&lt;/p&gt;

&lt;p&gt;Google Cloud Storageなどの有料サービスへの移行を視野に入れつつ検討しようと思ってはいます。&lt;del&gt;単純にめんｄ&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;せっかくVSCode拡張製作に初トライしたのに先行きが超不透明でなんだかなぁ。&lt;/p&gt;

&lt;div class="footnotes"&gt;
&lt;hr&gt;
&lt;ol&gt;

&lt;li id="fn1"&gt;
&lt;p&gt;私の父が &lt;a href="#fnref1"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;/ol&gt;
&lt;/div&gt;
</content>
    <published>2020-12-12T17:48:32Z</published>
    <updated>2020-12-12T17:48:32Z</updated>
    <author>
      <name>yumetodo</name>
    </author>
  </entry>
  <entry>
    <id>tag:qiita.com,2005:PublicArticle/1353679</id>
    <published>2020-12-09T11:29:34+09:00</published>
    <updated>2020-12-09T11:39:56+09:00</updated>
    <link rel="alternate" type="text/html" href="https://qiita.com/kojix2/items/9049b17c56ac05c26314"/>
    <url>https://qiita.com/kojix2/items/9049b17c56ac05c26314</url>
    <title>【機械翻訳用】SAMtags</title>
    <content type="html">&lt;p&gt;このページは何？&lt;br&gt;
hts-specのpdfを機械翻訳で日本語で閲覧する目的で、不完全ながら文字起こしを行ったページです。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/samtools/hts-specs" class="autolink" rel="nofollow noopener" target="_blank"&gt;https://github.com/samtools/hts-specs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;このページは不正確である可能性があります。正確な情報が必要な方は必ず最新のリポジトリをご参照ください。&lt;/p&gt;

&lt;p&gt;For Samtools/hts-spec developers&lt;/p&gt;

&lt;p&gt;Perhaps someone from samtools/hts-spec may discover this page. I tried to check the license of the hts-spec, but it's not clear. I am very very eager to understand the content of the hts-spec. This page has been created for the purpose of adapting Google translation to hts-spec. The official PDFs do not provide a satisfactory machine translation. If you have any problems with redistribution, please let me know in the comments section. Best regards.&lt;/p&gt;

&lt;h1&gt;
&lt;span id="sequence-alignmentmap-optional-fields-specification" class="fragment"&gt;&lt;/span&gt;&lt;a href="#sequence-alignmentmap-optional-fields-specification"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;Sequence Alignment/Map Optional Fields Specification&lt;/h1&gt;

&lt;h2&gt;
&lt;span id="the-sambam-format-specification-working-group-29-may-2020" class="fragment"&gt;&lt;/span&gt;&lt;a href="#the-sambam-format-specification-working-group-29-may-2020"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;The SAM/BAM Format Specification Working Group 29 May 2020&lt;/h2&gt;

&lt;p&gt;The master version of this document can be found at &lt;a href="https://github.com/samtools/hts-specs" class="autolink" rel="nofollow noopener" target="_blank"&gt;https://github.com/samtools/hts-specs&lt;/a&gt;. This printing is version f2b4e0c from that repository, last modified on the date shown above.&lt;/p&gt;

&lt;p&gt;This document is a companion to the Sequence Alignment/Map Format Specification that defines the SAM and BAM formats, and to the CRAM Format Specification that defines the CRAM format.1 Alignment records in each of these formats may contain a number of optional fields, each labelled with a tag identifying that field’s data. This document describes each of the predefined standard tags, and discusses conventions around creating new tags.&lt;/p&gt;

&lt;h2&gt;
&lt;span id="1-standard-tags" class="fragment"&gt;&lt;/span&gt;&lt;a href="#1-standard-tags"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;1 Standard tags&lt;/h2&gt;

&lt;p&gt;Predefined standard tags are listed in the following table and described in greater detail in later subsections. Optional fields are usually displayed as TAG:TYPE:VALUE; the type may be one of A (character), B (general array), f (real number), H (hexadecimal array), i (integer), or Z (string).&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Tag&lt;/th&gt;
&lt;th&gt;Type&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;AM&lt;/td&gt;
&lt;td&gt;i&lt;/td&gt;
&lt;td&gt;The smallest template-independent mapping quality in the template&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;AS&lt;/td&gt;
&lt;td&gt;i&lt;/td&gt;
&lt;td&gt;Alignment score generated by aligner&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;BC&lt;/td&gt;
&lt;td&gt;Z&lt;/td&gt;
&lt;td&gt;Barcode sequence identifying the sample&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;BQ&lt;/td&gt;
&lt;td&gt;Z&lt;/td&gt;
&lt;td&gt;Offset to base alignment quality (BAQ)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;BZ&lt;/td&gt;
&lt;td&gt;Z&lt;/td&gt;
&lt;td&gt;Phred quality of the unique molecular barcode bases in the OX tag&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CB&lt;/td&gt;
&lt;td&gt;Z&lt;/td&gt;
&lt;td&gt;Cell identifier&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CC&lt;/td&gt;
&lt;td&gt;Z&lt;/td&gt;
&lt;td&gt;Reference name of the next hit&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CG&lt;/td&gt;
&lt;td&gt;B,I&lt;/td&gt;
&lt;td&gt;BAM only: CIGAR in BAM’s binary encoding if (and only if) it consists of &amp;gt;65535 operators&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CM&lt;/td&gt;
&lt;td&gt;i&lt;/td&gt;
&lt;td&gt;Edit distance between the color sequence and the color reference (see also NM)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CO&lt;/td&gt;
&lt;td&gt;Z&lt;/td&gt;
&lt;td&gt;Free-text comments&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CP&lt;/td&gt;
&lt;td&gt;i&lt;/td&gt;
&lt;td&gt;Leftmost coordinate of the next hit&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CQ&lt;/td&gt;
&lt;td&gt;Z&lt;/td&gt;
&lt;td&gt;Color read base qualities&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CR&lt;/td&gt;
&lt;td&gt;Z&lt;/td&gt;
&lt;td&gt;Cellular barcode sequence bases (uncorrected)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CS&lt;/td&gt;
&lt;td&gt;Z&lt;/td&gt;
&lt;td&gt;Color read sequence&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CT&lt;/td&gt;
&lt;td&gt;Z&lt;/td&gt;
&lt;td&gt;Complete read annotation tag, used for consensus annotation dummy features&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CY&lt;/td&gt;
&lt;td&gt;Z&lt;/td&gt;
&lt;td&gt;Phred quality of the cellular barcode sequence in the CR tag&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;E2&lt;/td&gt;
&lt;td&gt;Z&lt;/td&gt;
&lt;td&gt;The 2nd most likely base calls&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;FI&lt;/td&gt;
&lt;td&gt;i&lt;/td&gt;
&lt;td&gt;The index of segment in the template&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;FS&lt;/td&gt;
&lt;td&gt;Z&lt;/td&gt;
&lt;td&gt;Segment suffix&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;FZ&lt;/td&gt;
&lt;td&gt;B,S&lt;/td&gt;
&lt;td&gt;Flow signal intensities&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;GC&lt;/td&gt;
&lt;td&gt;?&lt;/td&gt;
&lt;td&gt;Reserved for backwards compatibility reasons&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;GQ&lt;/td&gt;
&lt;td&gt;?&lt;/td&gt;
&lt;td&gt;Reserved for backwards compatibility reasons&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;GS&lt;/td&gt;
&lt;td&gt;?&lt;/td&gt;
&lt;td&gt;Reserved for backwards compatibility reasons&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;H0&lt;/td&gt;
&lt;td&gt;i&lt;/td&gt;
&lt;td&gt;Number of perfect hits&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;H1&lt;/td&gt;
&lt;td&gt;i&lt;/td&gt;
&lt;td&gt;Number of 1-difference hits (see also NM)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;H2&lt;/td&gt;
&lt;td&gt;i&lt;/td&gt;
&lt;td&gt;Number of 2-difference hits&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;HI&lt;/td&gt;
&lt;td&gt;i&lt;/td&gt;
&lt;td&gt;Query hit index&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;IH&lt;/td&gt;
&lt;td&gt;i&lt;/td&gt;
&lt;td&gt;Query hit total count&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;LB&lt;/td&gt;
&lt;td&gt;Z&lt;/td&gt;
&lt;td&gt;Library&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;MC&lt;/td&gt;
&lt;td&gt;Z&lt;/td&gt;
&lt;td&gt;CIGAR string for mate/next segment&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;MD&lt;/td&gt;
&lt;td&gt;Z&lt;/td&gt;
&lt;td&gt;String encoding mismatched and deleted reference bases&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;MF&lt;/td&gt;
&lt;td&gt;?&lt;/td&gt;
&lt;td&gt;Reserved for backwards compatibility reasons&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;MI&lt;/td&gt;
&lt;td&gt;Z&lt;/td&gt;
&lt;td&gt;Molecular identifier; a string that uniquely identifies the molecule from which the record was derived&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;MQ&lt;/td&gt;
&lt;td&gt;i&lt;/td&gt;
&lt;td&gt;Mapping quality of the mate/next segment&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;NH&lt;/td&gt;
&lt;td&gt;i&lt;/td&gt;
&lt;td&gt;Number of reported alignments that contain the query in the current record&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;NM&lt;/td&gt;
&lt;td&gt;i&lt;/td&gt;
&lt;td&gt;Edit distance to the reference&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;OA&lt;/td&gt;
&lt;td&gt;Z&lt;/td&gt;
&lt;td&gt;Original alignment&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;OC&lt;/td&gt;
&lt;td&gt;Z&lt;/td&gt;
&lt;td&gt;Original CIGAR (deprecated; use OA instead)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;OP&lt;/td&gt;
&lt;td&gt;i&lt;/td&gt;
&lt;td&gt;Original mapping position (deprecated; use OA instead)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;OQ&lt;/td&gt;
&lt;td&gt;Z&lt;/td&gt;
&lt;td&gt;Original base quality&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;OX&lt;/td&gt;
&lt;td&gt;Z&lt;/td&gt;
&lt;td&gt;Original unique molecular barcode bases&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;PG&lt;/td&gt;
&lt;td&gt;Z&lt;/td&gt;
&lt;td&gt;Program&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;PQ&lt;/td&gt;
&lt;td&gt;i&lt;/td&gt;
&lt;td&gt;Phred likelihood of the template&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;PT&lt;/td&gt;
&lt;td&gt;Z&lt;/td&gt;
&lt;td&gt;Read annotations for parts of the padded read sequence&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;PU&lt;/td&gt;
&lt;td&gt;Z&lt;/td&gt;
&lt;td&gt;Platform unit&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Q2&lt;/td&gt;
&lt;td&gt;Z&lt;/td&gt;
&lt;td&gt;Phred quality of the mate/next segment sequence in the R2 tag&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;QT&lt;/td&gt;
&lt;td&gt;Z&lt;/td&gt;
&lt;td&gt;Phred quality of the sample barcode sequence in the BC tag&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;QX&lt;/td&gt;
&lt;td&gt;Z&lt;/td&gt;
&lt;td&gt;Quality score of the unique molecular identifier in the RX tag&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;R2&lt;/td&gt;
&lt;td&gt;Z&lt;/td&gt;
&lt;td&gt;Sequence of the mate/next segment in the template&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RG&lt;/td&gt;
&lt;td&gt;Z&lt;/td&gt;
&lt;td&gt;Read group&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RT&lt;/td&gt;
&lt;td&gt;?&lt;/td&gt;
&lt;td&gt;Reserved for backwards compatibility reasons&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RX&lt;/td&gt;
&lt;td&gt;Z&lt;/td&gt;
&lt;td&gt;Sequence bases of the (possibly corrected) unique molecular identifier&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;S2&lt;/td&gt;
&lt;td&gt;?&lt;/td&gt;
&lt;td&gt;Reserved for backwards compatibility reasons&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SA&lt;/td&gt;
&lt;td&gt;Z&lt;/td&gt;
&lt;td&gt;Other canonical alignments in a chimeric alignment&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SM&lt;/td&gt;
&lt;td&gt;i&lt;/td&gt;
&lt;td&gt;Template-independent mapping quality&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SQ&lt;/td&gt;
&lt;td&gt;?&lt;/td&gt;
&lt;td&gt;Reserved for backwards compatibility reasons&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;TC&lt;/td&gt;
&lt;td&gt;i&lt;/td&gt;
&lt;td&gt;The number of segments in the template&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;TS&lt;/td&gt;
&lt;td&gt;A&lt;/td&gt;
&lt;td&gt;Transcript strand&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;U2&lt;/td&gt;
&lt;td&gt;Z&lt;/td&gt;
&lt;td&gt;Phred probability of the 2nd call being wrong conditional on the best being wrong&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;UQ&lt;/td&gt;
&lt;td&gt;i&lt;/td&gt;
&lt;td&gt;Phred likelihood of the segment, conditional on the mapping being correct&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;X?&lt;/td&gt;
&lt;td&gt;?&lt;/td&gt;
&lt;td&gt;Reserved for end users&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Y?&lt;/td&gt;
&lt;td&gt;?&lt;/td&gt;
&lt;td&gt;Reserved for end users&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Z?&lt;/td&gt;
&lt;td&gt;?&lt;/td&gt;
&lt;td&gt;Reserved for end users&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h3&gt;
&lt;span id="11-additional-template-and-mapping-data" class="fragment"&gt;&lt;/span&gt;&lt;a href="#11-additional-template-and-mapping-data"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;1.1 Additional Template and Mapping data&lt;/h3&gt;

&lt;p&gt;&lt;b&gt;AM:i:score&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;The smallest template-independent mapping quality of any segment in the same template as this read. (See also SM.)&lt;/p&gt;

&lt;p&gt;&lt;b&gt;AS: i:score&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Alignment score generated by aligner.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;BQ:Z:qualities&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Offset to base alignment quality (BAQ), of the same length as the read sequence. At the i-th read base, BAQi = Qi — (BQi — 64) where Qi is the i-th base quality.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;CC:Z:rname&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Reference name of the next hit; ‘=’ for the same chromosome.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;CG:B:I,encodedCigar&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Real CIGAR in its binary form if (and only if) it contains &amp;gt;65535 operations. This is a BAM file only tag as a workaround of BAM’s incapability to store long CIGARs in the standard way. SAM and CRAM files created with updated tools aware of the workaround are not expected to contain this tag. See also the footnote in Section 4.2 of the SAM spec for details.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;CP:i:pos&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Leftmost coordinate of the next hit.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;E2:Z:bases&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;The 2nd most likely base calls. Same encoding and same length as SEQ. See also U2 for associated quality values.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;FI: i:int&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;The index of segment in the template.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;FS:Z:str&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Segment suffix.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;H0: i:count&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Number of perfect hits.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;H1:i :count&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Number of 1-difference hits (see also NM).&lt;/p&gt;

&lt;p&gt;&lt;b&gt;H2: i:count&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Number of 2-difference hits.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;HI:i:i&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Query hit index, indicating the alignment record is the i-th one stored in SAM.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;IH: i:count&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Number of alignments stored in the file that contain the query in the current record. &lt;/p&gt;

&lt;p&gt;&lt;b&gt;MC:Z:cigar&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;CIGAR string for mate/next segment.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;MD:Z: [0-9]+(([A-Z]|^[A-Z]+)[0-9]+)*&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;String encoding mismatched and deleted reference bases, used in conjunction with the CIGAR and SEQ fields to reconstruct the bases of the reference sequence interval to which the alignment has been mapped. This can enable variant calling without requiring access to the entire original reference.&lt;/p&gt;

&lt;p&gt;The MD string consists of the following items, concatenated without additional delimiter characters:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;[0-9]+, indicating a run of reference bases that are identical to the corresponding SEQ bases;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;[A-Z] , identifying a single reference base that differs from the SEQ base aligned at that position;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;\"[A-Z]+, identifying a run of reference bases that have been deleted in the alignment.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As shown in the complete regular expression above, numbers alternate with the other items. Thus if two mismatches or deletions are adjacent without a run of identical bases between them, a ‘0’ (indicating a 0-length run) must be used to separate them in the MD string.&lt;/p&gt;

&lt;p&gt;Clipping, padding, reference skips, and insertions (‘H’, ‘S’, ‘P’, ‘N’, and ‘I’ CIGAR operations) are not represented in the MD string. When reconstructing the reference sequence, inserted and soft-clipped SEQ bases are omitted as determined by tracking ‘I’ and ‘S’ operations in the CIGAR string. (If the CIGAR string contains ‘N’ operations, then the corresponding skipped parts of the reference sequence cannot be reconstructed.)&lt;/p&gt;

&lt;p&gt;For example, a string ‘10A5"AC6’ means from the leftmost reference base in the alignment, there are 10 matches followed by an A on the reference which is different from the aligned read base; the next 5 reference bases are matches followed by a 2bp deletion from the reference; the deleted sequence is AC; the last 6 bases are matches.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;MQ:i:score&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Mapping quality of the mate/next segment.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;NH: i:count&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Number of reported alignments that contain the query in the current record.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;NM:i:count&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Number of differences (mismatches plus inserted and deleted bases) between the sequence and reference, counting only (case-insensitive) A, C, G and T bases in sequence and reference as potential matches, with everything else being a mismatch. Note this means that ambiguity codes in both sequence and reference that match each other, such as ‘N’ in both, or compatible codes such as ‘A’ and ‘R’, are still counted as mismatches. The special sequence base ‘=’ will always be considered to be a match, even if the reference is ambiguous at that point. Alignment reference skips, padding, soft and hard clipping (‘N’, ‘P’, ‘S’ and ‘H’ CIGAR operations) do not count as mismatches, but insertions and deletions count as one mismatch per base.&lt;br&gt;
Note that historically this has been ill-defined and both data and tools exist that disagree with this definition.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;PQ :i:score&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Phred likelihood of the template, conditional on the mapping locations of both/all segments being correct.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Q2:Z:qualities&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Phred quality of the mate/next segment sequence in the R2 tag. Same encoding as QUAL.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;R2:Z:bases&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Sequence of the mate/next segment in the template. See also Q2 for any associated quality values.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;SA:Z: ( rname ,pos ,strand ,CIGAR ,mapQ ,NM;)+&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Other canonical alignments in a chimeric alignment, formatted as a semicolon-delimited list. Each element in the list represents a part of the chimeric alignment. Conventionally, at a supplementary line, the first element points to the primary line. Strand is either ‘+’ or ‘-’, indicating forward/reverse strand, corresponding to FLAG bit 0x10. Pos is a 1-based coordinate.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;SM: i:score&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Template-independent mapping quality, i.e., the mapping quality if the read were mapped as a single read rather than as part of a read pair or template.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;TC:i:&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;The number of segments in the template.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;TS:A:strand&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Strand (‘+’ or ‘-’) of the transcript to which the read has been mapped.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;U2:Z:&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Phred probability of the 2nd call being wrong conditional on the best being wrong. The same encoding and length as QUAL. See also E2 for associated base calls.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;UQ:i:&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Phred likelihood of the segment, conditional on the mapping being correct.&lt;/p&gt;

&lt;h3&gt;
&lt;span id="12-metadata" class="fragment"&gt;&lt;/span&gt;&lt;a href="#12-metadata"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;1.2 Metadata&lt;/h3&gt;

&lt;p&gt;&lt;b&gt;RG:Z:readgroup&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;The read group to which the read belongs. If &lt;a href="/RG" class="user-mention js-hovercard" title="RG" data-hovercard-target-type="user" data-hovercard-target-name="RG"&gt;@RG&lt;/a&gt; headers are present, then readgroup must match the RG-ID field of one of the headers.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;LB:Z:library&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;The library from which the read has been sequenced. If &lt;a href="/RG" class="user-mention js-hovercard" title="RG" data-hovercard-target-type="user" data-hovercard-target-name="RG"&gt;@RG&lt;/a&gt; headers are present, then library must match the RG-LB field of one of the headers.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;PG:Z:program_id&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Program. Value matches the header PG-ID tag if &lt;a href="/PG" class="user-mention js-hovercard" title="PG" data-hovercard-target-type="user" data-hovercard-target-name="PG"&gt;@PG&lt;/a&gt; is present.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;PU:Z:platformunit&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;The platform unit in which the read was sequenced. If &lt;a href="/RG" class="user-mention js-hovercard" title="RG" data-hovercard-target-type="user" data-hovercard-target-name="RG"&gt;@RG&lt;/a&gt; headers are present, then platformunit must match the RG-PU field of one of the headers.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;CO:Z:text&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Free-text comments.&lt;/p&gt;

&lt;h3&gt;
&lt;span id="13-barcodes" class="fragment"&gt;&lt;/span&gt;&lt;a href="#13-barcodes"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;1.3 Barcodes&lt;/h3&gt;

&lt;p&gt;DNA barcodes can be used to identify the provenance of the underlying reads. There are currently three&lt;br&gt;
varieties of barcodes that may co-exist: Sample Barcode, Cell Barcode, and Unique Molecular Identifier (UMI).&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Despite its name, the Sample Barcode identifies the Library and allows multiple libraries to be combined and sequenced together. After sequencing, the reads can be separated according to this barcode and placed in different “read groups” each corresponding to a library. Since the library was generated from a sample, knowing the library should inform of the sample. The barcode itself can be included in the PU field in the RG header line. Since the PU field should be globally unique, it is advisable to include specific information such as flowcell barcode and lane. It is not recommended to use the barcode as the ID field of the RG header line, as some tools modify this field (e.g., when merging files).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The Cell Barcode is similar to the sample barcode but there is (normally) no control over the assignment of cells to barcodes (whose sequence could be random or predetermined). The Cell Barcode can help identify when reads come from different cells in a “single-cell” sequencing experiment.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The Cell Barcode is similar to the sample barcode but there is (normally) no control over the assignment of cells to barcodes (whose sequence could be random or predetermined). The Cell Barcode can help identify when reads come from different cells in a “single-cell” sequencing experiment.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The UMI is intended to identify the (single- or double-stranded) molecule at the time that the barcode was introduced. This can be used to inform duplicate marking and make consensus calling in ultradeep sequencing. Additionally, the UMI can be used to (informatically) link reads that were generated from the same long molecule, enabling long-range phasing and better informed mapping. In some experimental setups opposite strands of the same double-stranded DNA molecule get related barcodes. These templates can also be considered duplicates even though technically they may have different UMIs. Multiple UMIs can be added by a protocol, possibly at different time-points, which means that specific knowledge of the protocol may be needed in order to analyze the resulting data correctly.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;b&gt;BC:Z:sequence&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Barcode sequence (Identifying the sample/library), with any quality scores (optionally) stored in the QT tag. The BC tag should match the QT tag in length. In the case of multiple unique molecular identifiers (e.g., one on each end of the template) the recommended implementation concatenates all the barcodes and places a hyphen (‘-’) between the barcodes from the same template.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;QT:Z:qualities&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Phred quality of the sample barcode sequence in the BC tag. Same encoding as QUAL, i.e., Phred score + 33. In the case of multiple unique molecular identifiers (e.g., one on each end of the template) the recommended implementation concatenates all the quality strings with spaces (‘J) between the different strings from the same template.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;CB:Z:str&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Cell identifier, consisting of the optionally-corrected cellular barcode sequence and an optional suffix. The sequence part is similar to the CR tag, but may have had sequencing errors etc corrected. This may be followed by a suffix consisting of a hyphen (‘-’) and one or more alphanumeric characters to form an identifier. In the case of the cellular barcode (CR) being based on multiple barcode sequences the recommended implementation concatenates all the (corrected or uncorrected) barcodes with a hyphen (‘-’) between the different barcodes. Sequencing errors etc aside, all reads from a single cell are expected to have the same CB tag.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;CR:Z:sequence+&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Cellular barcode. The uncorrected sequence bases of the cellular barcode as reported by the sequencing machine, with the corresponding base quality scores (optionally) stored in CY. Sequencing errors etc aside, all reads with the same CR tag likely derive from the same cell. In the case of the cellular barcode being based on multiple barcode sequences the recommended implementation concatenates all the barcodes with a hyphen (‘-’) between the different barcodes.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;CY:Z:qualities+&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Phred quality of the cellular barcode sequence in the CR tag. Same encoding as QUAL, i.e., Phred score + 33. The lengths of the CY and CR tags must match. In the case of the cellular barcode being based on multiple barcode sequences the recommended implementation concatenates all the quality strings with with spaces (‘J) between the different strings.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;MI:Z:str&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Molecular Identifier. A unique ID within the SAM file for the source molecule from which this read is derived. All reads with the same MI tag represent the group of reads derived from the same source molecule.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;OX:Z:sequence+&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Raw (uncorrected) unique molecular identifier bases, with any quality scores (optionally) stored in the BZ tag. In the case of multiple unique molecular identifiers (e.g., one on each end of the template) the recommended implementation concatenates all the barcodes with a hyphen (‘-’) between the different barcodes.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;BZ:Z:qualities+&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Phred quality of the (uncorrected) unique molecular identifier sequence in the OX tag. Same encoding as QUAL, i.e., Phred score + 33. The OX tags should match the BZ tag in length. In the case of multiple unique molecular identifiers (e.g., one on each end of the template) the recommended implementation concatenates all the quality strings with a space (‘J) between the different strings.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;RX:Z:sequence+&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Sequence bases from the unique molecular identifier. These could be either corrected or uncorrected. Unlike MI, the value may be non-unique in the file. Should be comprised of a sequence of bases. In the case of multiple unique molecular identifiers (e.g., one on each end of the template) the recommended implementation concatenates all the barcodes with a hyphen (‘-’) between the different barcodes.&lt;br&gt;
If the bases represent corrected bases, the original sequence can be stored in OX (similar to OQ storing the original qualities of bases.)&lt;/p&gt;

&lt;p&gt;&lt;b&gt;QX:Z:qualities+&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Phred quality of the unique molecular identifier sequence in the RX tag. Same encoding as QUAL, i.e., Phred score + 33. The qualities here may have been corrected (Raw bases and qualities can be stored in OX and BZ respectively.) The lengths of the QX and the RX tags must match. In the case of multiple unique molecular identifiers (e.g., one on each end of the template) the recommended implementation concatenates all the quality strings with a space (‘J) between the different strings.&lt;/p&gt;

&lt;h3&gt;
&lt;span id="14-original-data" class="fragment"&gt;&lt;/span&gt;&lt;a href="#14-original-data"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;1.4 Original data&lt;/h3&gt;

&lt;p&gt;&lt;b&gt;OA:Z :(RNAME ,POS,strand,CIGAR,MAPQ ,NM;)+&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;The original alignment information of the record prior to realignment or unalignment by a subsequent tool. Each original alignment entry contains the following six field values from the original record, generally in their textual SAM representations, separated by commas (‘,’) and terminated by a semicolon (‘;’): RNAME, which must be explicit (unlike RNEXT, ‘=’ may not be used here); 1-based POS; ‘+’ or ‘-’, indicating forward/reverse strand respectively (as per bit 0x10 of FLAG); CIGAR; MAPQ; NM tag value, which may be omitted (though the preceding comma must be retained).&lt;br&gt;
In the presence of an existing OA tag, a subsequent tool may append another original alignment entry after the semicolon, adding to—rather than replacing—the existing OA information.&lt;br&gt;
The OA field is designed to provide record-level information that can be useful for understanding the provenance of the information in a record. It is not designed to provide a complete history of the template alignment information. In particular, realignments resulting in the the removal of Secondary or Supplementary records will cause the loss of all tags associated with those records, and may also leave the SA tag in an invalid state.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;OC:Z:cigar&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Original CIGAR, usually before realignment. Deprecated in favour of the more general OA.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;OP:i:pos&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Original 1-based POS, usually before realignment. Deprecated in favour of the more general OA.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;OQ:Z:qualities&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Original base quality, usually before recalibration. Same encoding as QUAL.&lt;/p&gt;

&lt;h3&gt;
&lt;span id="15-annotation-and-padding" class="fragment"&gt;&lt;/span&gt;&lt;a href="#15-annotation-and-padding"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;1.5 Annotation and Padding&lt;/h3&gt;

&lt;p&gt;The SAM format can be used to represent de novo assemblies, generally by using padded reference sequences and the annotation tags described here. See the Guide for Describing Assembly Sequences in the SAM Format Specification for full details of this representation.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;CT:Z:strand; type (; key (=value)?)&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Complete read annotation tag, used for consensus annotation dummy features.&lt;br&gt;
The CT tag is intended primarily for annotation dummy reads, and consists of a strand, type and zero or more key=value pairs, each separated with semicolons. The strand field has four values as in GFF3&lt;sup id="fnref1"&gt;&lt;a href="#fn1" rel="footnote" title=""&gt;1&lt;/a&gt;&lt;/sup&gt;, &amp;lt;4&amp;gt; and supplements FLAG bit 0x10 to allow unstranded (‘.’), and stranded but unknown strand (‘?’) annotation. For these and annotation on the forward strand (strand set to ‘+’), do not set FLAG bit 0x10. For annotation on the reverse strand, set the strand to ‘-’ and set FLAG bit 0x10.&lt;br&gt;
The type and any keys and their optional values are all percent encoded according to RFC3986 to escape meta-characters ‘=’, ‘%’, ‘; ’, ‘ | ’ or non-printable characters not matched by the isprint() macro (with the C locale). For example a percent sign becomes ‘%25’.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;PT:Z:annotag(|annotag)*&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;where each annotag matches start; end; strand ;type (; key (=value )?) Read annotations for parts of the padded read sequence.&lt;br&gt;
The PT tag value has the format of a series of annotation tags separated by ‘ | ’, each annotating a sub-region of the read. Each tag consists of start, end, strand, type and zero or more key=value pairs, each separated with semicolons. Start and end are 1-based positions between one and the sum of the M/I/D/P/S/=/X CIGAR operators, i.e., SEQ length plus any pads. Note any editing of the CIGAR string may require updating the PT tag coordinates, or even invalidate them. As in GFF3, strand is one of ‘+’ for forward strand tags, ‘-’ for reverse strand, ‘.’ for unstranded or ‘?’ for stranded but unknown strand.&lt;br&gt;
The type and any keys and their optional values are all percent encoded as in the CT tag.&lt;/p&gt;

&lt;h3&gt;
&lt;span id="16-technology-specific-data" class="fragment"&gt;&lt;/span&gt;&lt;a href="#16-technology-specific-data"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;1.6 Technology-specific data&lt;/h3&gt;

&lt;p&gt;&lt;b&gt;FZ:B:S,intensities&lt;/b&gt;&lt;br&gt;
Flow signal intensities on the original strand of the read, stored as (uint16_t) round(value  100.0).&lt;/p&gt;

&lt;h4&gt;
&lt;span id="161-color-space" class="fragment"&gt;&lt;/span&gt;&lt;a href="#161-color-space"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;1.6.1 Color space&lt;/h4&gt;

&lt;p&gt;&lt;b&gt;CM:i:distance&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Edit distance between the color sequence and the color reference (see also NM).&lt;/p&gt;

&lt;p&gt;&lt;b&gt;CS:Z:sequence&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Color read sequence on the original strand of the read. The primer base must be included.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;CQ:Z:qualities&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Color read quality on the original strand of the read. Same encoding as QUAL; same length as CS.&lt;/p&gt;

&lt;h2&gt;
&lt;span id="2-locally-defined-tags" class="fragment"&gt;&lt;/span&gt;&lt;a href="#2-locally-defined-tags"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;2 Locally-defined tags&lt;/h2&gt;

&lt;p&gt;You can freely add new tags. Note that tags starting with ‘X’, ‘Y’, or ‘Z’ and tags containing lowercase letters in either position are reserved for local use and will not be formally defined in any future version of this specification.&lt;/p&gt;

&lt;p&gt;If a new tag may be of general interest, it may be useful to have it added to this specification. Additions can be proposed by opening a new issue at &lt;a href="https://github.com/samtools/hts-specs/issues" class="autolink" rel="nofollow noopener" target="_blank"&gt;https://github.com/samtools/hts-specs/issues&lt;/a&gt; and/or by sending email to &lt;a href="mailto:samtools-devel@lists.sourceforge.net" class="autolink"&gt;samtools-devel@lists.sourceforge.net&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;
&lt;span id="appendix-a-tag-history" class="fragment"&gt;&lt;/span&gt;&lt;a href="#appendix-a-tag-history"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;Appendix A Tag History&lt;/h2&gt;

&lt;p&gt;This appendix lists when standard tags were initially defined or significantly changed, and other historical events that affect how tags are interpreted or what files they may appear in.&lt;/p&gt;

&lt;p&gt;March 2020&lt;br&gt;
Transcript strand tag TS added, equivalent to the locally-defined XS tag produced by several RNA aligners. &lt;/p&gt;

&lt;p&gt;January 2019&lt;br&gt;
Added the OA tag for recording original/previous alignment information.&lt;br&gt;
Deprecated the OC and OP tags.&lt;/p&gt;

&lt;p&gt;July 2018&lt;br&gt;
Clarified the calculation of NM score.&lt;/p&gt;

&lt;p&gt;May 2018&lt;br&gt;
Cellular barcode tags CB, CR, and CY added.&lt;br&gt;
Removed the RT:Z tag, which was a long-deprecated synonym for BC.&lt;br&gt;
SAM version number VN:1.6 introduced, indicating the addition of the CG tag representation of very long CIGAR strings. Files that contain records with more than 65,535 CIGAR operators should not declare a version number lower than 1.6 in their &lt;a href="/HD" class="user-mention js-hovercard" title="HD" data-hovercard-target-type="user" data-hovercard-target-name="HD"&gt;@HD&lt;/a&gt; headers.&lt;/p&gt;

&lt;p&gt;August 2017&lt;br&gt;
Unique molecular identifier tags BZ, MI, OX, QX, and RX added.&lt;br&gt;
Usage of sample barcode tag BC clarified.&lt;/p&gt;

&lt;p&gt;June 2017&lt;br&gt;
Corrected the description of the E2 (second-most-likely bases) tag, which was previously unclear as to whether it contains bases or base qualities.&lt;/p&gt;

&lt;p&gt;September 2016&lt;br&gt;
Predefined tags, previously listed as a brief table within the main SAM specification, have been split out into this new document. There is now space for clearer and more complete tag descriptions.&lt;/p&gt;

&lt;p&gt;February 2014&lt;br&gt;
MC tag added.&lt;/p&gt;

&lt;p&gt;May 2013&lt;br&gt;
SAM version number VN:1.5 introduced, with limited impact for tags other than indicating that the CT/PT annotation tag definitions are considered finalised.&lt;br&gt;
SA tag added.&lt;/p&gt;

&lt;p&gt;March 2012&lt;br&gt;
Descriptions of CT and PT annotation tags significantly clarified.&lt;/p&gt;

&lt;p&gt;October 2011&lt;br&gt;
Sample barcode tags QT and RT added, with RT being identified as a deprecated alternative to BC.&lt;br&gt;
Read annotation tags CT and PT added.&lt;/p&gt;

&lt;p&gt;September 2011&lt;br&gt;
FZ tag’s type changed from H to B,S-array.&lt;br&gt;
BC and CO tags added.&lt;/p&gt;

&lt;p&gt;April 2011&lt;br&gt;
SAM version number VN:1.4 introduced, indicating the addition of the B-array tag type. Files that contain records with B-array fields should not declare a version number lower than 1.4 in their &lt;a href="/HD" class="user-mention js-hovercard" title="HD" data-hovercard-target-type="user" data-hovercard-target-name="HD"&gt;@HD&lt;/a&gt; headers.&lt;br&gt;
FZ tag added, with type H.&lt;br&gt;
MD tag description changed to allow IUPAC ambiguity codes in addition to ACGTN.&lt;/p&gt;

&lt;p&gt;March 2011&lt;br&gt;
CC and CP tags reinstated with their original meanings.&lt;br&gt;
BQ tag added.&lt;/p&gt;

&lt;p&gt;July 2010&lt;br&gt;
The specification was rewritten as a LTeX document specifying SAM version number VN:1.3.&lt;br&gt;
Tags FI, FS, OC, OP, OQ, and TC added.&lt;br&gt;
Tags GC:Z, GQ:Z, and GS:Z, briefly proposed for representing repeatedly-sequenced reads, noted as reserved for backwards compatibility. Existing tags MF:i (MAQ pair flag), SQ:H (suboptimal bases), and S2:H (mate’s suboptimal bases) removed and noted as reserved for backwards compatibility.&lt;br&gt;
CC and CP tags temporarily removed.&lt;/p&gt;

&lt;p&gt;July 2009&lt;br&gt;
The original SAM “0.1.2-draft” specification specified version number VN:1.0 and defined a total of thirty standard tags (though SQ and S2 were already deprecated in favour of E2 and U2):&lt;br&gt;
AM  CM  CS  H1  IH  MF  NM  PU  RG  SQ&lt;br&gt;
AS  CP  E2  H2  LB  MQ  PG  Q2  S2  U2&lt;br&gt;
CC  CQ  H0  HI  MD  NH  PQ  R2  SM  UQ&lt;/p&gt;

&lt;p&gt;The Generic Feature Format version 3 (GFF3) specification can be found at &lt;a href="http://sequenceontology.org" class="autolink" rel="nofollow noopener" target="_blank"&gt;http://sequenceontology.org&lt;/a&gt;.&lt;/p&gt;

&lt;div class="footnotes"&gt;
&lt;hr&gt;
&lt;ol&gt;

&lt;li id="fn1"&gt;
&lt;/li&gt;

&lt;/ol&gt;
&lt;/div&gt;
</content>
    <published>2020-12-09T11:29:34Z</published>
    <updated>2020-12-09T11:39:56Z</updated>
    <author>
      <name>kojix2</name>
    </author>
  </entry>
  <entry>
    <id>tag:qiita.com,2005:PublicArticle/1351426</id>
    <published>2020-12-06T17:19:04+09:00</published>
    <updated>2020-12-08T14:36:20+09:00</updated>
    <link rel="alternate" type="text/html" href="https://qiita.com/yumetodo/items/6ed9501c7d5b638ff390"/>
    <url>https://qiita.com/yumetodo/items/6ed9501c7d5b638ff390</url>
    <title>C++警察のあんたがたにpointer interconvertibleという新たなおもちゃのおしらせです</title>
    <content type="html">
&lt;h1&gt;
&lt;span id="c-advent-calender-2020" class="fragment"&gt;&lt;/span&gt;&lt;a href="#c-advent-calender-2020"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;C++ Advent Calender 2020&lt;/h1&gt;

&lt;p&gt;この記事は&lt;a href="https://qiita.com/advent-calendar/2020/cxx"&gt;C++ Advent Calender 2020&lt;/a&gt;5日目の記事です。&lt;/p&gt;

&lt;p&gt;昨日は &lt;a href="/yohhoy" class="user-mention js-hovercard" title="yohhoy" data-hovercard-target-type="user" data-hovercard-target-name="yohhoy"&gt;@yohhoy&lt;/a&gt; 氏の&lt;a href="https://qiita.com/yohhoy/items/e493aeacef9a1f6315b9" id="reference-681b09ccac97af7705e3"&gt;C++20便利機能の紹介：自動joinスレッドと停止機構 std::jthread, stop_token&lt;/a&gt;でした&lt;br&gt;
明日は &lt;a href="/MusicScience37" class="user-mention js-hovercard" title="MusicScience37" data-hovercard-target-type="user" data-hovercard-target-name="MusicScience37"&gt;@MusicScience37&lt;/a&gt; 氏の&lt;a href="https://qiita.com/MusicScience37/items/9dcd9359194f378fd0a7" id="reference-84805c28d04b78361c33"&gt;std::tuple の型を実行時に選択したい&lt;/a&gt;です&lt;/p&gt;

&lt;h1&gt;
&lt;span id="はじめに" class="fragment"&gt;&lt;/span&gt;&lt;a href="#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;はじめに&lt;/h1&gt;

&lt;p&gt;この記事を書いている私は実のところpointer interconvertibleについてさほど詳しく有りません。多分&lt;a href="/k_satoda" class="user-mention js-hovercard" title="k_satoda" data-hovercard-target-type="user" data-hovercard-target-name="k_satoda"&gt;@k_satoda&lt;/a&gt; 氏あたりに聞くほうがこの記事よりはるかにわかりやすく正確な回答が帰ってくるであろうことは火を見るより明らかですが、それでもまあ、自分の勉強も兼ねて筆をすすめることにします。&lt;/p&gt;

&lt;h1&gt;
&lt;span id="c警察御用達のおもちゃ-strict-aliasing-rule" class="fragment"&gt;&lt;/span&gt;&lt;a href="#c%E8%AD%A6%E5%AF%9F%E5%BE%A1%E7%94%A8%E9%81%94%E3%81%AE%E3%81%8A%E3%82%82%E3%81%A1%E3%82%83-strict-aliasing-rule"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;C++警察御用達のおもちゃ: Strict Aliasing rule&lt;/h1&gt;

&lt;p&gt;C++警察の皆さんならばつぎのコードが未定義動作であることがわかるはずです。&lt;/p&gt;

&lt;div class="code-frame" data-lang="cpp"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;A&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;B&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="n"&gt;A&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;reinterpret_cast&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="o"&gt;*&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;foo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;詳しくは&lt;br&gt;
&lt;a href="https://yohhoy.hatenadiary.jp/entry/20120220/p1" rel="nofollow noopener" target="_blank"&gt;（翻訳）C/C++のStrict Aliasingを理解する または - どうして#$@##@^%コンパイラは僕がしたい事をさせてくれないの！ - yohhoyの日記&lt;/a&gt;&lt;br&gt;
に丸投げします。余談ですがC++20でStrict Aliasing ruleの定義が随分とすっきりしました。&lt;br&gt;
&lt;a href="https://timsong-cpp.github.io/cppwp/n4861/basic.lval#11" rel="nofollow noopener" target="_blank"&gt;[basic.lval] 11&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;上の例で言うなら、変数&lt;code&gt;b&lt;/code&gt;に実際にアクセスが行われる&lt;code&gt;b-&amp;gt;foo = 3;&lt;/code&gt;のとき、&lt;code&gt;b&lt;/code&gt;は&lt;code&gt;a&lt;/code&gt;へのエイリアスにならないため、未定義動作となるのでした。&lt;/p&gt;

&lt;p&gt;では&lt;code&gt;b-&amp;gt;foo = 3;&lt;/code&gt;がなかったらどうでしょうか？実際にアクセスが行われないのでキャストだけではStrict Aliasing ruleに反しません。&lt;/p&gt;

&lt;p&gt;じゃあ未定義動作ではないのか？いいえ、実はこの&lt;code&gt;reinterpret_cast&lt;/code&gt;はpointer interconvertibleではないのです。&lt;/p&gt;

&lt;h1&gt;
&lt;span id="pointer-interconvertible" class="fragment"&gt;&lt;/span&gt;&lt;a href="#pointer-interconvertible"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;pointer interconvertible&lt;/h1&gt;

&lt;h2&gt;
&lt;span id="pointer-interconvertibleの定義" class="fragment"&gt;&lt;/span&gt;&lt;a href="#pointer-interconvertible%E3%81%AE%E5%AE%9A%E7%BE%A9"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;pointer interconvertibleの定義&lt;/h2&gt;

&lt;p&gt;規格書の定義を翻訳してみましょう。&lt;br&gt;
&lt;a href="https://timsong-cpp.github.io/cppwp/n4861/basic.compound#4" rel="nofollow noopener" target="_blank"&gt;[basic.compound] 4&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;2つのオブジェクト&lt;code&gt;a&lt;/code&gt;, &lt;code&gt;b&lt;/code&gt;がpointer interconvertibleであるのは次のいずれかのときである&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;同一のオブジェクトである&lt;/li&gt;
&lt;li&gt;片方が共用体オブジェクトで、他方がその共用体の非静的メンバ変数である&lt;/li&gt;
&lt;li&gt;片方がstandard layoutクラスオブジェクトであり、他方は次のいずれかである場合

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;if (そのオブジェクトが非静的メンバ変数を持つ)&lt;/code&gt;:&lt;br&gt;
→そのオブジェクトの最初の非静的メンバ変数&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;else&lt;/code&gt;:&lt;br&gt;
→基底クラスオブジェクト&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt; 次のようなオブジェクト&lt;code&gt;c&lt;/code&gt;が存在する: &lt;code&gt;a&lt;/code&gt;と&lt;code&gt;c&lt;/code&gt;がpointer interconvertibleでかつ&lt;code&gt;b&lt;/code&gt;と&lt;code&gt;c&lt;/code&gt;がpointer interconvertibleである&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
&lt;span id="pointer-interconvertibleの登場場面-reinterpret_cast" class="fragment"&gt;&lt;/span&gt;&lt;a href="#pointer-interconvertible%E3%81%AE%E7%99%BB%E5%A0%B4%E5%A0%B4%E9%9D%A2-reinterpret_cast"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;pointer interconvertibleの登場場面: &lt;code&gt;reinterpret_cast&lt;/code&gt;
&lt;/h2&gt;

&lt;blockquote class="twitter-tweet"&gt;
&lt;p&gt;異なるオブジェクト型へのポインタ間のキャストは以下で定義されています。&lt;a href="https://t.co/QqzA00iyhI" rel="nofollow noopener" target="_blank"&gt;https://t.co/QqzA00iyhI&lt;/a&gt;&lt;br&gt;ここで現れる static_cast について、結果の型の有効なオブジェクトを指すようになる条件が pointer-interconvertible を使って定められています。&lt;a href="https://t.co/9O5hRHfjnt" rel="nofollow noopener" target="_blank"&gt;https://t.co/9O5hRHfjnt&lt;/a&gt;&lt;/p&gt;— Kazutoshi SATODA (@k_satoda) &lt;a href="https://twitter.com/k_satoda/status/1332934679398236161?ref_src=twsrc%5Etfw" rel="nofollow noopener" target="_blank"&gt;November 29, 2020&lt;/a&gt;
&lt;/blockquote&gt;

&lt;p&gt;まず&lt;code&gt;reinterpret_cast&lt;/code&gt;がオブジェクトへのポインタを&lt;em&gt;cv&lt;/em&gt; &lt;code&gt;T*&lt;/code&gt;に変換するとき、次のように振る舞います。(&lt;a href="https://timsong-cpp.github.io/cppwp/n4861/expr.reinterpret.cast#7" rel="nofollow noopener" target="_blank"&gt;[expr.reinterpret.cast] 7&lt;/a&gt;)&lt;/p&gt;

&lt;div class="code-frame" data-lang="cpp"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;static_&lt;/span&gt;&lt;span class="err"&gt;­&lt;/span&gt;&lt;span class="n"&gt;cast&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;cv&lt;/span&gt; &lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;*&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;static_&lt;/span&gt;&lt;span class="err"&gt;­&lt;/span&gt;&lt;span class="n"&gt;cast&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;cv&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="o"&gt;*&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;次に、&lt;em&gt;cv1&lt;/em&gt; &lt;code&gt;void*&lt;/code&gt;を&lt;em&gt;cv2&lt;/em&gt; &lt;code&gt;T*&lt;/code&gt;に&lt;code&gt;static_cast&lt;/code&gt;で変換するときを考えます。この変換ができるにはcv修飾子&lt;code&gt;cv1&lt;/code&gt;, &lt;code&gt;cv2&lt;/code&gt;を比べた時に同じか&lt;code&gt;cv1&lt;/code&gt;よりもより修飾されている必要があります(例えば&lt;code&gt;const&lt;/code&gt;を&lt;code&gt;static_cast&lt;/code&gt;で外せない、それはそう)(&lt;a href="https://timsong-cpp.github.io/cppwp/n4861/expr.static.cast#13" rel="nofollow noopener" target="_blank"&gt;[expr.static.cast] 13&lt;/a&gt;)。&lt;/p&gt;

&lt;p&gt;最後に&lt;em&gt;cv1&lt;/em&gt; &lt;code&gt;void*&lt;/code&gt;を&lt;em&gt;cv2&lt;/em&gt; &lt;code&gt;T*&lt;/code&gt;に&lt;code&gt;static_cast&lt;/code&gt;で変換して得たポインタの値が変換後の型として有効かを考えます。その条件は次のとおりです(&lt;a href="https://timsong-cpp.github.io/cppwp/n4861/expr.static.cast#13" rel="nofollow noopener" target="_blank"&gt;[expr.static.cast] 13&lt;/a&gt;)。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;元となったポインタの値がメモリー上のAというアドレスを指していて、Aが変換後の型&lt;code&gt;T&lt;/code&gt;のアラインメント要求を満たす&lt;br&gt;
満たさない→得られたポインタの値はunspecified&lt;/li&gt;
&lt;li&gt;元となったポインタの値が&lt;code&gt;a&lt;/code&gt;というオブジェクトを指していてかつ、cv修飾子を無視した時に&lt;code&gt;a&lt;/code&gt;とpointer interconvertibleな&lt;code&gt;T&lt;/code&gt;型のオブジェクト&lt;code&gt;b&lt;/code&gt;が存在する&lt;br&gt;
満たさない→ポインタの値が変化しない→&lt;em&gt;cv2&lt;/em&gt; &lt;code&gt;T*&lt;/code&gt;型のポインタとしては有効ではない&lt;sup id="fnref1"&gt;&lt;a href="#fn1" rel="footnote" title="[expr.static.cast] 13には変換によってポインタの値が変化しないとしか書かれてないけど、多分もっと規格書をたどれば有効じゃないってことになる気がする、調べるには時間が足りなかった。"&gt;1&lt;/a&gt;&lt;/sup&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;
&lt;span id="同じアドレスに2つのオブジェクトがあることとpointer-interconvertibleであることは別である" class="fragment"&gt;&lt;/span&gt;&lt;a href="#%E5%90%8C%E3%81%98%E3%82%A2%E3%83%89%E3%83%AC%E3%82%B9%E3%81%AB2%E3%81%A4%E3%81%AE%E3%82%AA%E3%83%96%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%81%8C%E3%81%82%E3%82%8B%E3%81%93%E3%81%A8%E3%81%A8pointer-interconvertible%E3%81%A7%E3%81%82%E3%82%8B%E3%81%93%E3%81%A8%E3%81%AF%E5%88%A5%E3%81%A7%E3%81%82%E3%82%8B"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;同じアドレスに2つのオブジェクトがあることとpointer interconvertibleであることは別である&lt;/h2&gt;

&lt;div class="code-frame" data-lang="cpp"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="nc"&gt;A&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;aaa&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;bbb&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="nf"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;reinterpret_cast&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="o"&gt;*&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;bbb&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;A&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;4.2&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;aaa&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;pointer interconvertibleの定義から、クラス&lt;code&gt;A&lt;/code&gt;へのポインタとクラスAの非静的メンバ変数である&lt;code&gt;aaa&lt;/code&gt;へのポインタは変換可能です。&lt;/p&gt;

&lt;p&gt;このとき、この2つは同じアドレスを指していることから「なるほど、pointer interconvertibleってのはつまり同じアドレスだったら変換できるってことか！」と考える人がいるかも知れません。&lt;/p&gt;

&lt;div class="code-frame" data-lang="cpp"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;#include &amp;lt;cassert&amp;gt;
&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;ptr1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;static_cast&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="o"&gt;*&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="c1"&gt;// OK&lt;/span&gt;
    &lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;ptr2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;static_cast&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="o"&gt;*&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="c1"&gt;// OK&lt;/span&gt;
    &lt;span class="n"&gt;assert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ptr1&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;ptr2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// =&amp;gt; true, same adress&lt;/span&gt;
    &lt;span class="k"&gt;auto&lt;/span&gt; &lt;span class="n"&gt;ptr1_2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;static_cast&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ptr2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="c1"&gt;// NG: not pointer interconvertible&lt;/span&gt;
    &lt;span class="k"&gt;auto&lt;/span&gt; &lt;span class="n"&gt;ptr2_2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;static_cast&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;*&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ptr1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="c1"&gt;// NG: not pointer interconvertible&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;しかし上の例を見てください。変数&lt;code&gt;ptr1_2&lt;/code&gt;/&lt;code&gt;ptr2_2&lt;/code&gt;を初期化しようとしているcastはpointer interconvertibleではありません。言い換えると、配列オブジェクトと配列の先頭要素は同じアドレスにありますが、pointer interconvertibleではありません。&lt;/p&gt;

&lt;p&gt;配列だけが例外と考えるのではなく、むしろpointer interconvertibleという関係性そのものが歴史的背景などからくる特殊例と考えるべきでしょう。&lt;/p&gt;

&lt;h1&gt;
&lt;span id="経緯" class="fragment"&gt;&lt;/span&gt;&lt;a href="#%E7%B5%8C%E7%B7%AF"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;経緯&lt;/h1&gt;

&lt;p&gt;pointer interconvertibleのどこが新しいねん！というツッコミが来そうなのでこの記事を書くに至った経緯を書いておくことにします。&lt;/p&gt;

&lt;p&gt;先日&lt;a href="https://qiita.com/rinatz/items/05492be4eea28f6598da" id="reference-b23358b386c22935d7d4"&gt;Qiitaに宣伝記事が出ていた&lt;/a&gt;C++入門サイトがあります&lt;br&gt;
&lt;a href="https://rinatz.github.io/cpp-book/" class="autolink" rel="nofollow noopener" target="_blank"&gt;https://rinatz.github.io/cpp-book/&lt;/a&gt;&lt;br&gt;
このサイトの査読をするうちに、キャストの説明に改善点がみつかり、ついでにStrict Aliasing Ruleの解説を書き加えました。&lt;br&gt;
&lt;a href="https://github.com/rinatz/cpp-book/pull/67" class="autolink" rel="nofollow noopener" target="_blank"&gt;https://github.com/rinatz/cpp-book/pull/67&lt;/a&gt;&lt;br&gt;
しかしその過程でStrict Aliasing Ruleの解釈が不安になりteratailとTwitterで質問をしました。&lt;br&gt;
&lt;a href="https://teratail.com/questions/306235" rel="nofollow noopener" target="_blank"&gt;C++ - strict alias rule違反となるのはキャストした時点か｜teratail&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;解釈についてあっていることが確認できてホッとしたところにC++有識者の &lt;a href="/gnaggnoyil" class="user-mention js-hovercard" title="gnaggnoyil" data-hovercard-target-type="user" data-hovercard-target-name="gnaggnoyil"&gt;@gnaggnoyil&lt;/a&gt; 氏からこんな指摘がありました。&lt;/p&gt;

&lt;blockquote class="twitter-tweet"&gt;
&lt;p&gt;そもそも元スレのreinterpret_cast式は現在のWDによるといわゆるstrict aliasing ruleで定義されてません。pointer interconvertibleを満たさない場合には意味がすでに必要とされてないため、文面通りの「未定義行為」です。&lt;/p&gt;— g_naggnoyil(gint, gchar **) (@gnaggnoyil) &lt;a href="https://twitter.com/gnaggnoyil/status/1332244746937409536?ref_src=twsrc%5Etfw" rel="nofollow noopener" target="_blank"&gt;November 27, 2020&lt;/a&gt;
&lt;/blockquote&gt;

&lt;p&gt;pointer interconvertibleって何？？？&lt;/p&gt;

&lt;p&gt;私にとって未知な用語に触れた私は調査を開始するのでした。&lt;/p&gt;

&lt;p&gt;ちょうどほぼ同時並行して &lt;a href="/yohhoy" class="user-mention js-hovercard" title="yohhoy" data-hovercard-target-type="user" data-hovercard-target-name="yohhoy"&gt;@yohhoy&lt;/a&gt; 氏がcpprefjpに&lt;code&gt;is_pointer_interconvertible_base_of&lt;/code&gt;についての項目を執筆されているのに励まされながら、遅刻しつつもこの記事は執筆されました。&lt;br&gt;
&lt;a href="https://github.com/cpprefjp/site/commit/373db2562dd489679aa96001078a6cb320052725" class="autolink" rel="nofollow noopener" target="_blank"&gt;https://github.com/cpprefjp/site/commit/373db2562dd489679aa96001078a6cb320052725&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
&lt;span id="追記-is_pointer_interconvertible_base_ofの存在意義が問われる事態" class="fragment"&gt;&lt;/span&gt;&lt;a href="#%E8%BF%BD%E8%A8%98-is_pointer_interconvertible_base_of%E3%81%AE%E5%AD%98%E5%9C%A8%E6%84%8F%E7%BE%A9%E3%81%8C%E5%95%8F%E3%82%8F%E3%82%8C%E3%82%8B%E4%BA%8B%E6%85%8B"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;追記: &lt;code&gt;is_pointer_interconvertible_base_of&lt;/code&gt;の存在意義が問われる事態&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://github.com/cpprefjp/site/issues/824" class="autolink" rel="nofollow noopener" target="_blank"&gt;https://github.com/cpprefjp/site/issues/824&lt;/a&gt;&lt;br&gt;
でその存在意義に疑問符がつき&lt;br&gt;
&lt;a href="https://lists.isocpp.org/std-discussion/2020/12/0921.php" class="autolink" rel="nofollow noopener" target="_blank"&gt;https://lists.isocpp.org/std-discussion/2020/12/0921.php&lt;/a&gt;&lt;br&gt;
std-discussionに質問が飛んで&lt;br&gt;
&lt;a href="https://lists.isocpp.org/std-discussion/2020/12/0922.php" class="autolink" rel="nofollow noopener" target="_blank"&gt;https://lists.isocpp.org/std-discussion/2020/12/0922.php&lt;/a&gt;&lt;br&gt;
&lt;a href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0466r5.pdf" rel="nofollow noopener" target="_blank"&gt;p0466&lt;/a&gt;の作者にメンションが飛んでる模様です&lt;/p&gt;

&lt;h1&gt;
&lt;span id="参考資料" class="fragment"&gt;&lt;/span&gt;&lt;a href="#%E5%8F%82%E8%80%83%E8%B3%87%E6%96%99"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;参考資料&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://teratail.com/questions/306235" rel="nofollow noopener" target="_blank"&gt;C++ - strict alias rule違反となるのはキャストした時点か｜teratail&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://yohhoy.hatenadiary.jp/entry/20120220/p1" rel="nofollow noopener" target="_blank"&gt;（翻訳）C/C++のStrict Aliasingを理解する または - どうして#$@##@^%コンパイラは僕がしたい事をさせてくれないの！ - yohhoyの日記&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/questions/47924103/pointer-interconvertibility-vs-having-the-same-address" rel="nofollow noopener" target="_blank"&gt;c++ - Pointer interconvertibility vs having the same address - Stack Overflow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://groups.google.com/a/isocpp.org/g/std-proposals/c/gN-_7CJ58G4/m/4JG3i4S25z8J" rel="nofollow noopener" target="_blank"&gt;Questions on N4430 (Core Issue 1776: Replacement of class objects containing reference members)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/questions/415452/object-orientation-in-c/415536#415536" rel="nofollow noopener" target="_blank"&gt;oop - Object-orientation in C - Stack Overflow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://stackoverflow.com/questions/51231757/casting-a-char-array-to-an-object-pointer-is-this-ub" rel="nofollow noopener" target="_blank"&gt;c++ - Casting a char array to an object pointer - is this UB? - Stack Overflow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.cppreference.com/w/cpp/types/is_pointer_interconvertible_base_of" rel="nofollow noopener" target="_blank"&gt;std::is_pointer_interconvertible_base_of - cppreference.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://cpprefjp.github.io/reference/type_traits/is_pointer_interconvertible_base_of.html" rel="nofollow noopener" target="_blank"&gt;is_pointer_interconvertible_base_of - cpprefjp C++日本語リファレンス&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2020/p0593r6.html#practical-examples" rel="nofollow noopener" target="_blank"&gt;P0593R6: Implicit creation of objects for low-level object manipulation#practical-examples&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1839r2.pdf" rel="nofollow noopener" target="_blank"&gt;Accessing Object Representations - p1839r2.pdf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://yohhoy.hatenadiary.jp/entry/20170817/p1" rel="nofollow noopener" target="_blank"&gt;std::launder関数 - yohhoyの日記&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitter.com/k_satoda/status/1242300634587467777" class="autolink" rel="nofollow noopener" target="_blank"&gt;https://twitter.com/k_satoda/status/1242300634587467777&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;script async src="https://platform.twitter.com/widgets.js"&gt;&lt;/script&gt; 

&lt;div class="footnotes"&gt;
&lt;hr&gt;
&lt;ol&gt;

&lt;li id="fn1"&gt;
&lt;p&gt;&lt;a href="https://timsong-cpp.github.io/cppwp/n4861/expr.static.cast#13" rel="nofollow noopener" target="_blank"&gt;[expr.static.cast] 13&lt;/a&gt;には変換によってポインタの値が変化しないとしか書かれてないけど、多分もっと規格書をたどれば有効じゃないってことになる気がする、調べるには時間が足りなかった。 &lt;a href="#fnref1"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;/ol&gt;
&lt;/div&gt;
</content>
    <published>2020-12-06T17:19:04Z</published>
    <updated>2020-12-08T14:36:20Z</updated>
    <author>
      <name>yumetodo</name>
    </author>
  </entry>
  <entry>
    <id>tag:qiita.com,2005:PublicArticle/1351007</id>
    <published>2020-12-06T02:10:29+09:00</published>
    <updated>2020-12-06T02:10:29+09:00</updated>
    <link rel="alternate" type="text/html" href="https://qiita.com/okumurakengo/items/6375c89c429d801b49fe"/>
    <url>https://qiita.com/okumurakengo/items/6375c89c429d801b49fe</url>
    <title>HHKB Professional HYBRID Type-S 無刻印 を買ってmacでDvorak配列に設定してみた</title>
    <content type="html">&lt;p&gt;私は詳しい人ではないですが、調べながらやってみて、そんなに難しくなかったので投稿させていただきました。m(_ _)m&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;macOS Catalina Version 10.15.6&lt;/li&gt;
&lt;li&gt;HHKB Professional HYBRID Type-S 無刻印／白&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;p&gt;HHKBのキーボードのこちらを購入しました&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.amazon.co.jp/gp/product/B082TWHY76/ref=ppx_yo_dt_b_asin_title_o02_s00?ie=UTF8&amp;amp;psc=1" class="autolink" rel="nofollow noopener" target="_blank"&gt;https://www.amazon.co.jp/gp/product/B082TWHY76/ref=ppx_yo_dt_b_asin_title_o02_s00?ie=UTF8&amp;amp;psc=1&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;HHKB Professional HYBRID Type-S 無刻印／白（英語配列）&lt;/p&gt;

&lt;p&gt;&lt;a href="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F142910%2F62b79301-6f25-cd37-612a-3064a7229f95.png?ixlib=rb-1.2.2&amp;amp;auto=format&amp;amp;gif-q=60&amp;amp;q=75&amp;amp;s=b43771b50c37d2cbc39d0026640428eb" target="_blank" rel="nofollow noopener"&gt;&lt;img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F142910%2F62b79301-6f25-cd37-612a-3064a7229f95.png?ixlib=rb-1.2.2&amp;amp;auto=format&amp;amp;gif-q=60&amp;amp;q=75&amp;amp;s=b43771b50c37d2cbc39d0026640428eb" width="390" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/142910/62b79301-6f25-cd37-612a-3064a7229f95.png" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F142910%2F62b79301-6f25-cd37-612a-3064a7229f95.png?ixlib=rb-1.2.2&amp;amp;auto=format&amp;amp;gif-q=60&amp;amp;q=75&amp;amp;w=1400&amp;amp;fit=max&amp;amp;s=cc5ebc651a6d4506a6b0c316c18a6fff 1x" loading="lazy"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F142910%2F84004b3b-4283-5c5c-be90-66f640c0fcca.png?ixlib=rb-1.2.2&amp;amp;auto=format&amp;amp;gif-q=60&amp;amp;q=75&amp;amp;s=ab1e81c63d1024cc8207004ae5397beb" target="_blank" rel="nofollow noopener"&gt;&lt;img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F142910%2F84004b3b-4283-5c5c-be90-66f640c0fcca.png?ixlib=rb-1.2.2&amp;amp;auto=format&amp;amp;gif-q=60&amp;amp;q=75&amp;amp;s=ab1e81c63d1024cc8207004ae5397beb" width="390" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/142910/84004b3b-4283-5c5c-be90-66f640c0fcca.png" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F142910%2F84004b3b-4283-5c5c-be90-66f640c0fcca.png?ixlib=rb-1.2.2&amp;amp;auto=format&amp;amp;gif-q=60&amp;amp;q=75&amp;amp;w=1400&amp;amp;fit=max&amp;amp;s=b911003eec10ac771dac92147d167a68 1x" loading="lazy"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
&lt;span id="macモードに設定する" class="fragment"&gt;&lt;/span&gt;&lt;a href="#mac%E3%83%A2%E3%83%BC%E3%83%89%E3%81%AB%E8%A8%AD%E5%AE%9A%E3%81%99%E3%82%8B"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;Macモードに設定する&lt;/h1&gt;

&lt;p&gt;参考&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.pfu.fujitsu.com/hhkeyboard/leaflet/hhkb_backview.html" class="autolink" rel="nofollow noopener" target="_blank"&gt;https://www.pfu.fujitsu.com/hhkeyboard/leaflet/hhkb_backview.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;キーボード背面にある２つ目のDIPスイッチをONに設定しておく&lt;/p&gt;

&lt;p&gt;&lt;a href="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F142910%2F71d9f5a7-2727-9eba-681d-6b9c3dd2e7f4.png?ixlib=rb-1.2.2&amp;amp;auto=format&amp;amp;gif-q=60&amp;amp;q=75&amp;amp;s=f187ff1636d155027e617bf4b65404e4" target="_blank" rel="nofollow noopener"&gt;&lt;img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F142910%2F71d9f5a7-2727-9eba-681d-6b9c3dd2e7f4.png?ixlib=rb-1.2.2&amp;amp;auto=format&amp;amp;gif-q=60&amp;amp;q=75&amp;amp;s=f187ff1636d155027e617bf4b65404e4" width="500" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/142910/71d9f5a7-2727-9eba-681d-6b9c3dd2e7f4.png" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F142910%2F71d9f5a7-2727-9eba-681d-6b9c3dd2e7f4.png?ixlib=rb-1.2.2&amp;amp;auto=format&amp;amp;gif-q=60&amp;amp;q=75&amp;amp;w=1400&amp;amp;fit=max&amp;amp;s=710e98a721e60864a20a1ffef996b214 1x" loading="lazy"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;必ずキーボードの電源を切っている状態でスイッチを切り替える&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;この設定をしないとcommandキーが動作しません&lt;/p&gt;

&lt;h1&gt;
&lt;span id="bluetoothで接続した" class="fragment"&gt;&lt;/span&gt;&lt;a href="#bluetooth%E3%81%A7%E6%8E%A5%E7%B6%9A%E3%81%97%E3%81%9F"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;bluetoothで接続した&lt;/h1&gt;

&lt;p&gt;キーボードの電源を入れたら普通に接続できる&lt;/p&gt;

&lt;p&gt;「System Preferences」→「Keyboard」→「Set Up Bluetooth Keyboard」&lt;/p&gt;

&lt;p&gt;&lt;a href="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F142910%2F8b66b853-399c-3417-3199-67456b7e460c.png?ixlib=rb-1.2.2&amp;amp;auto=format&amp;amp;gif-q=60&amp;amp;q=75&amp;amp;s=d44ce75c239493ab7c2a839436ea77c4" target="_blank" rel="nofollow noopener"&gt;&lt;img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F142910%2F8b66b853-399c-3417-3199-67456b7e460c.png?ixlib=rb-1.2.2&amp;amp;auto=format&amp;amp;gif-q=60&amp;amp;q=75&amp;amp;s=d44ce75c239493ab7c2a839436ea77c4" alt="Screen Shot 2020-12-06 at 1.12.51.png" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/142910/8b66b853-399c-3417-3199-67456b7e460c.png" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F142910%2F8b66b853-399c-3417-3199-67456b7e460c.png?ixlib=rb-1.2.2&amp;amp;auto=format&amp;amp;gif-q=60&amp;amp;q=75&amp;amp;w=1400&amp;amp;fit=max&amp;amp;s=6cc7758b9961863314e9741e3ae699fe 1x" loading="lazy"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Bluetoothを使わない場合は USB Type-C ケーブルで接続することもできる&lt;/p&gt;

&lt;p&gt;その場合はケーブルは同梱されていないので自分で用意する&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;この状態で以下のような配列だったと思います&lt;/p&gt;

&lt;p&gt;&lt;a href="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F142910%2Ffe8a2db6-0d32-9b4b-9b31-b0229048911d.jpeg?ixlib=rb-1.2.2&amp;amp;auto=format&amp;amp;gif-q=60&amp;amp;q=75&amp;amp;s=0847fd591ad5a244a7fb84aa54589535" target="_blank" rel="nofollow noopener"&gt;&lt;img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F142910%2Ffe8a2db6-0d32-9b4b-9b31-b0229048911d.jpeg?ixlib=rb-1.2.2&amp;amp;auto=format&amp;amp;gif-q=60&amp;amp;q=75&amp;amp;s=0847fd591ad5a244a7fb84aa54589535" alt="61ECiYo2heL._AC_SL1280_.jpg" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/142910/fe8a2db6-0d32-9b4b-9b31-b0229048911d.jpeg" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F142910%2Ffe8a2db6-0d32-9b4b-9b31-b0229048911d.jpeg?ixlib=rb-1.2.2&amp;amp;auto=format&amp;amp;gif-q=60&amp;amp;q=75&amp;amp;w=1400&amp;amp;fit=max&amp;amp;s=64bc20bad83e826a0cf1309eb9f041b1 1x" loading="lazy"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;引用：&lt;a href="https://www.amazon.co.jp/HHKB-Professional-HYBRID-%E8%8B%B1%E8%AA%9E%E9%85%8D%E5%88%97%EF%BC%8F%E7%99%BD-PD-KB800W/dp/B082TT132L/ref=sr_1_6?__mk_ja_JP=%E3%82%AB%E3%82%BF%E3%82%AB%E3%83%8A&amp;amp;dchild=1&amp;amp;keywords=hhkb+%E8%8B%B1%E8%AA%9E&amp;amp;qid=1607185477&amp;amp;sr=8-6" class="autolink" rel="nofollow noopener" target="_blank"&gt;https://www.amazon.co.jp/HHKB-Professional-HYBRID-%E8%8B%B1%E8%AA%9E%E9%85%8D%E5%88%97%EF%BC%8F%E7%99%BD-PD-KB800W/dp/B082TT132L/ref=sr_1_6?__mk_ja_JP=%E3%82%AB%E3%82%BF%E3%82%AB%E3%83%8A&amp;amp;dchild=1&amp;amp;keywords=hhkb+%E8%8B%B1%E8%AA%9E&amp;amp;qid=1607185477&amp;amp;sr=8-6&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
&lt;span id="dvorak配列に変更する" class="fragment"&gt;&lt;/span&gt;&lt;a href="#dvorak%E9%85%8D%E5%88%97%E3%81%AB%E5%A4%89%E6%9B%B4%E3%81%99%E3%82%8B"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;Dvorak配列に変更する&lt;/h1&gt;

&lt;p&gt;「System Preferences」→「Keyboard」→「Input Source」&lt;/p&gt;

&lt;p&gt;「＋」を押して「Dvorak」を追加する&lt;/p&gt;

&lt;p&gt;追加できたら &lt;kbd&gt;Ctrl&lt;/kbd&gt; + &lt;kbd&gt;Space&lt;/kbd&gt; で切り替えれた&lt;/p&gt;

&lt;h1&gt;
&lt;span id="日本語入力も-dvorak-で入力できるようにする" class="fragment"&gt;&lt;/span&gt;&lt;a href="#%E6%97%A5%E6%9C%AC%E8%AA%9E%E5%85%A5%E5%8A%9B%E3%82%82-dvorak-%E3%81%A7%E5%85%A5%E5%8A%9B%E3%81%A7%E3%81%8D%E3%82%8B%E3%82%88%E3%81%86%E3%81%AB%E3%81%99%E3%82%8B"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;日本語入力も Dvorak で入力できるようにする&lt;/h1&gt;

&lt;p&gt;参考：&lt;a href="https://qiita.com/raccy/items/23ae3658f3c70a9cd599" class="autolink" id="reference-ad524087e655730a220b"&gt;https://qiita.com/raccy/items/23ae3658f3c70a9cd599&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;「System Preferences」→「Keyboard」→「Input Source」→「Japanese」&lt;/p&gt;

&lt;p&gt;「Romaji layout」を「Dvorak」に変更する&lt;/p&gt;

&lt;p&gt;&lt;a href="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F142910%2F6fd078af-7e7c-f8ba-6d4c-25b1a22bb824.png?ixlib=rb-1.2.2&amp;amp;auto=format&amp;amp;gif-q=60&amp;amp;q=75&amp;amp;s=db5391d2c651163e91bdaac5964f8ec6" target="_blank" rel="nofollow noopener"&gt;&lt;img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F142910%2F6fd078af-7e7c-f8ba-6d4c-25b1a22bb824.png?ixlib=rb-1.2.2&amp;amp;auto=format&amp;amp;gif-q=60&amp;amp;q=75&amp;amp;s=db5391d2c651163e91bdaac5964f8ec6" alt="Screen Shot 2020-12-06 at 1.48.28.png" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/142910/6fd078af-7e7c-f8ba-6d4c-25b1a22bb824.png" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F142910%2F6fd078af-7e7c-f8ba-6d4c-25b1a22bb824.png?ixlib=rb-1.2.2&amp;amp;auto=format&amp;amp;gif-q=60&amp;amp;q=75&amp;amp;w=1400&amp;amp;fit=max&amp;amp;s=9ffb308bc27aed49ce2f9ced4ccb731b 1x" loading="lazy"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;この設定でできました！&lt;/p&gt;

&lt;h1&gt;
&lt;span id="その他" class="fragment"&gt;&lt;/span&gt;&lt;a href="#%E3%81%9D%E3%81%AE%E4%BB%96"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;その他&lt;/h1&gt;

&lt;p&gt;macのキーボードビューワーを使うと、dvorak配列で自分がどのキーを押しているかわかりやすかったです。&lt;/p&gt;

&lt;p&gt;参考：&lt;a href="https://support.apple.com/ja-jp/guide/mac-help/mchlp1015/mac" class="autolink" rel="nofollow noopener" target="_blank"&gt;https://support.apple.com/ja-jp/guide/mac-help/mchlp1015/mac&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F142910%2Fd183df71-6bc2-93f7-bd3a-45729296d690.png?ixlib=rb-1.2.2&amp;amp;auto=format&amp;amp;gif-q=60&amp;amp;q=75&amp;amp;s=12a116ffeadbd651b2b5ea08283daf1d" target="_blank" rel="nofollow noopener"&gt;&lt;img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F142910%2Fd183df71-6bc2-93f7-bd3a-45729296d690.png?ixlib=rb-1.2.2&amp;amp;auto=format&amp;amp;gif-q=60&amp;amp;q=75&amp;amp;s=12a116ffeadbd651b2b5ea08283daf1d" alt="Screen Shot 2020-12-06 at 1.56.49.png" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/142910/d183df71-6bc2-93f7-bd3a-45729296d690.png" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F142910%2Fd183df71-6bc2-93f7-bd3a-45729296d690.png?ixlib=rb-1.2.2&amp;amp;auto=format&amp;amp;gif-q=60&amp;amp;q=75&amp;amp;w=1400&amp;amp;fit=max&amp;amp;s=906fec4cc19bd732a908d161997657c2 1x" loading="lazy"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F142910%2F599e2e62-2cf7-eb6c-74f9-3c23ec37f8b2.png?ixlib=rb-1.2.2&amp;amp;auto=format&amp;amp;gif-q=60&amp;amp;q=75&amp;amp;s=f527761ec557892b5bddc4dc46a1a5b8" target="_blank" rel="nofollow noopener"&gt;&lt;img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F142910%2F599e2e62-2cf7-eb6c-74f9-3c23ec37f8b2.png?ixlib=rb-1.2.2&amp;amp;auto=format&amp;amp;gif-q=60&amp;amp;q=75&amp;amp;s=f527761ec557892b5bddc4dc46a1a5b8" alt="Screen Shot 2020-12-06 at 1.59.01.png" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/142910/599e2e62-2cf7-eb6c-74f9-3c23ec37f8b2.png" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F142910%2F599e2e62-2cf7-eb6c-74f9-3c23ec37f8b2.png?ixlib=rb-1.2.2&amp;amp;auto=format&amp;amp;gif-q=60&amp;amp;q=75&amp;amp;w=1400&amp;amp;fit=max&amp;amp;s=e3a7db57425b6ea733b26442e88f5a18 1x" loading="lazy"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;以上です。m(_ _)m&lt;/p&gt;
</content>
    <published>2020-12-06T02:10:29Z</published>
    <updated>2020-12-06T02:10:29Z</updated>
    <author>
      <name>okumurakengo</name>
    </author>
  </entry>
  <entry>
    <id>tag:qiita.com,2005:PublicArticle/1350660</id>
    <published>2020-12-05T17:24:17+09:00</published>
    <updated>2020-12-06T11:39:13+09:00</updated>
    <link rel="alternate" type="text/html" href="https://qiita.com/kojix2/items/a8148c94e0c01180bae5"/>
    <url>https://qiita.com/kojix2/items/a8148c94e0c01180bae5</url>
    <title>WindowsでRubyで作ったGUIのEXEを配布するときにlibuiを使う場合のメモ</title>
    <content type="html">&lt;p&gt;メモ書き的な内容ですみません。機会があったら拡充します。この情報だけだと単なるヒントという感じなので、わからない部分は都度ググってください（書いた人も、試したら出来たから記事にして忘れないようにメモするという状態です）&lt;/p&gt;

&lt;h2&gt;
&lt;span id="はじめに" class="fragment"&gt;&lt;/span&gt;&lt;a href="#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;はじめに&lt;/h2&gt;

&lt;p&gt;　Rubyでプログラミングを覚えた後、GUIでWindows向けのツールを作成して、配布してみたいと思う方は結構いると思います。でも実際にはパーフェクトな方法がないのが現状です。&lt;/p&gt;

&lt;h3&gt;
&lt;span id="ocra" class="fragment"&gt;&lt;/span&gt;&lt;a href="#ocra"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;ocra&lt;/h3&gt;

&lt;p&gt;　まず、RubyのインストールされていないWindows環境でRubyを動かすとなったときに、Ocraというツールを使うことが多いと思います。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/larsch/ocra/" class="autolink" rel="nofollow noopener" target="_blank"&gt;https://github.com/larsch/ocra/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ocraはRuby処理系全体を圧縮してEXEファイルに詰めてしまい、Rubyを実行する際にはRuby処理系を解凍してそれを実行すると聞いています。（詳しいことはわかりません）Ruby処理系と一緒にGUIツールもocraでEXEの中に詰め込む必要があります。&lt;/p&gt;

&lt;p&gt;　では、どのGUIツールキットを同封するか、という話になります。以前ならTkをお勧めしていたのですが、TkがRuby標準ライブラリから切り離されてしまった今、積極的にTkを勧める理由が以前に比べると薄くなってきたのかなという気がします。gtk2というのも鉄板ですが、いまさらversion2なのは気になります。そもそもgtkは重いのでOcraに詰め込むのは向いていないです。かといってjrubyは使いたくないですし。&lt;/p&gt;

&lt;h3&gt;
&lt;span id="libui" class="fragment"&gt;&lt;/span&gt;&lt;a href="#libui"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;libui&lt;/h3&gt;

&lt;p&gt;　そこでもっと軽量なライブラリとなるとlibuiが候補に挙がります。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/andlabs/libui" class="autolink" rel="nofollow noopener" target="_blank"&gt;https://github.com/andlabs/libui&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;libuiは、リリースページからバイナリを配布しているので、これをダウンロードしてきます。libuiのRubyバインディングは&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/jamescook/libui-ruby" class="autolink" rel="nofollow noopener" target="_blank"&gt;https://github.com/jamescook/libui-ruby&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;です。しかし、Gemが十分に整備されていなくてそのままでは&lt;code&gt;libui.dll&lt;/code&gt;を認識してくれないので、適当にソースコードを書き換える必要があります。またgemspecファイルもないのでインストールするのも面倒ではあります。&lt;/p&gt;

&lt;p&gt;さて、&lt;code&gt;gem install libui-ruby&lt;/code&gt; で libuiをインストールしたとして、libui.dllをソースコードと同じ位置に配布して、ext.rbを適当に書き換えて読み込めるようにしておきます。&lt;/p&gt;

&lt;div class="code-frame" data-lang="ruby"&gt;
&lt;div class="code-lang"&gt;&lt;span class="bold"&gt;ext.rb&lt;/span&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    &lt;span class="n"&gt;ffi_lib&lt;/span&gt; &lt;span class="no"&gt;File&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;expand_path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"libui.dll"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;__dir__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;みたいな感じですかね。&lt;/p&gt;

&lt;p&gt;これで試しにexampleのcontrol_gallery.rbをEXE化してみましょう。&lt;/p&gt;

&lt;div class="code-frame" data-lang="sh"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;example &lt;span class="c"&gt;# https://github.com/andlabs/libui&lt;/span&gt;
ocra .&lt;span class="se"&gt;\c&lt;/span&gt;ontrol_gallery.rb &lt;span class="nt"&gt;--dl&lt;/span&gt; ruby_builtin_dlls&lt;span class="se"&gt;\l&lt;/span&gt;ibssp-0.dll
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;とします。おそらく実行ファイルができるはずです。自動的にffiなど必要なgemを検出していますね。&lt;br&gt;
&lt;code&gt;--dl ruby_builtin_dlls\libssp-0.dll&lt;/code&gt; は、libssp-0.dllがありませんとかいうエラーが出るので、これをつけて回避した痕跡なので、エラーが出なければなくてもかまいません。&lt;/p&gt;

&lt;p&gt;&lt;a href="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F144608%2Fda431069-f6b8-1290-f095-89ea8354c0e8.png?ixlib=rb-1.2.2&amp;amp;auto=format&amp;amp;gif-q=60&amp;amp;q=75&amp;amp;s=4402549509756cada9bd0ddc8aa51bb7" target="_blank" rel="nofollow noopener"&gt;&lt;img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F144608%2Fda431069-f6b8-1290-f095-89ea8354c0e8.png?ixlib=rb-1.2.2&amp;amp;auto=format&amp;amp;gif-q=60&amp;amp;q=75&amp;amp;s=4402549509756cada9bd0ddc8aa51bb7" alt="image.png" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/144608/da431069-f6b8-1290-f095-89ea8354c0e8.png" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F144608%2Fda431069-f6b8-1290-f095-89ea8354c0e8.png?ixlib=rb-1.2.2&amp;amp;auto=format&amp;amp;gif-q=60&amp;amp;q=75&amp;amp;w=1400&amp;amp;fit=max&amp;amp;s=d1c5b62e35b98058da29b78ef051aace 1x" loading="lazy"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F144608%2F4622ccd6-413d-2022-ae5d-f3f4d466582b.png?ixlib=rb-1.2.2&amp;amp;auto=format&amp;amp;gif-q=60&amp;amp;q=75&amp;amp;s=4c6253f57af442f635d6e65a49663415" target="_blank" rel="nofollow noopener"&gt;&lt;img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F144608%2F4622ccd6-413d-2022-ae5d-f3f4d466582b.png?ixlib=rb-1.2.2&amp;amp;auto=format&amp;amp;gif-q=60&amp;amp;q=75&amp;amp;s=4c6253f57af442f635d6e65a49663415" alt="image.png" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/144608/4622ccd6-413d-2022-ae5d-f3f4d466582b.png" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F144608%2F4622ccd6-413d-2022-ae5d-f3f4d466582b.png?ixlib=rb-1.2.2&amp;amp;auto=format&amp;amp;gif-q=60&amp;amp;q=75&amp;amp;w=1400&amp;amp;fit=max&amp;amp;s=03a5fbe576689d4732ddd7f197ee8d45 1x" loading="lazy"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;このファイルは2544KBと、RubyのEXEとしてはまあまあ小さなサイズで、なおかつGUIが起動します。起動が遅くね？と思うかもしれませんが、ぶっちゃけTkやGtkをocraで詰め込むのと比較したらすごく高速です。サイズが大きくなってもかまわないなら&lt;code&gt;no-lzma&lt;/code&gt;（無圧縮）オプションでさらに高速にすることもできると思います。&lt;/p&gt;

&lt;p&gt;一応、WindowsからRuby処理系を削除して、それでも起動することを確認したので、これで配布可能だと思います。&lt;/p&gt;

&lt;p&gt;この記事は以上です。&lt;/p&gt;
</content>
    <published>2020-12-05T17:24:17Z</published>
    <updated>2020-12-06T11:39:13Z</updated>
    <author>
      <name>kojix2</name>
    </author>
  </entry>
  <entry>
    <id>tag:qiita.com,2005:PublicArticle/1350413</id>
    <published>2020-12-05T11:20:27+09:00</published>
    <updated>2020-12-05T11:23:36+09:00</updated>
    <link rel="alternate" type="text/html" href="https://qiita.com/taro-hida/items/2773577d37fe4b321887"/>
    <url>https://qiita.com/taro-hida/items/2773577d37fe4b321887</url>
    <title>WSL2ベースのDocker_Desktopを起動すると，「docker-usersグループに追加してください」というメッセージ</title>
    <content type="html">
&lt;h2&gt;
&lt;span id="環境" class="fragment"&gt;&lt;/span&gt;&lt;a href="#%E7%92%B0%E5%A2%83"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;環境&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Windows 10 Pro&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
&lt;span id="経緯" class="fragment"&gt;&lt;/span&gt;&lt;a href="#%E7%B5%8C%E7%B7%AF"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;経緯&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Administratorユーザで，WSL2 + Docker Desktop 環境をセットアップした（&lt;a href="https://docs.docker.com/docker-for-windows/wsl/" rel="nofollow noopener" target="_blank"&gt;手順&lt;/a&gt;）&lt;/li&gt;
&lt;li&gt;一般ユーザでDocker Desktopを起動しようとすると，「docker-usersグループに追加してくれ」という旨のポップアップが出た&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
&lt;span id="解決方法" class="fragment"&gt;&lt;/span&gt;&lt;a href="#%E8%A7%A3%E6%B1%BA%E6%96%B9%E6%B3%95"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;解決方法&lt;/h2&gt;

&lt;p&gt;利用しているユーザのグループを，「docker-users」に変更する．&lt;/p&gt;

&lt;p&gt;コントロールパネル &amp;gt; ユーザアカウント &amp;gt; アカウントの種類の変更 から，&lt;br&gt;
対象ユーザのグループを，docker-usersグループに変更．（&lt;a href="https://manual-shop.com/Windows/0005_UserAccount/07_AccountType/24_Win10Pro/index.html" rel="nofollow noopener" target="_blank"&gt;画面&lt;/a&gt;）&lt;/p&gt;

&lt;p&gt;Docker Desktopが起動できるようになった．&lt;/p&gt;
</content>
    <published>2020-12-05T11:20:27Z</published>
    <updated>2020-12-05T11:23:36Z</updated>
    <author>
      <name>taro-hida</name>
    </author>
  </entry>
  <entry>
    <id>tag:qiita.com,2005:PublicArticle/1349749</id>
    <published>2020-12-04T13:53:57+09:00</published>
    <updated>2020-12-07T09:07:58+09:00</updated>
    <link rel="alternate" type="text/html" href="https://qiita.com/kojix2/items/53c8ed2cfe3312fd7048"/>
    <url>https://qiita.com/kojix2/items/53c8ed2cfe3312fd7048</url>
    <title>YouPlot - 標準入力からターミナルにグラフを描出するツール</title>
    <content type="html">
&lt;h2&gt;
&lt;span id="はじめに" class="fragment"&gt;&lt;/span&gt;&lt;a href="#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;はじめに&lt;/h2&gt;

&lt;p&gt;こんにちは。昨年のアドベントカレンダーでは、GR.rbというRubyでグラフを描出するツールを紹介いたしました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://qiita.com/kojix2/items/456259f40d5563005cd1" id="reference-6cf9d10691916285d273"&gt;Rubyでグラフを描画するツール GR.rb の紹介&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;今年は&lt;a href="https://github.com/kojix2/youplot" rel="nofollow noopener" target="_blank"&gt;YouPlot&lt;/a&gt;というツールを作ったので紹介します。&lt;/p&gt;

&lt;p&gt;Github: &lt;a href="https://github.com/kojix2/youplot" class="autolink" rel="nofollow noopener" target="_blank"&gt;https://github.com/kojix2/youplot&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
&lt;span id="youplotはターミナルにグラフを描出するソフトです" class="fragment"&gt;&lt;/span&gt;&lt;a href="#youplot%E3%81%AF%E3%82%BF%E3%83%BC%E3%83%9F%E3%83%8A%E3%83%AB%E3%81%AB%E3%82%B0%E3%83%A9%E3%83%95%E3%82%92%E6%8F%8F%E5%87%BA%E3%81%99%E3%82%8B%E3%82%BD%E3%83%95%E3%83%88%E3%81%A7%E3%81%99"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;YouPlotは、ターミナルにグラフを描出するソフトです&lt;/h3&gt;

&lt;p&gt;　ターミナルの画面にアスキーアートでグラフを表示したいと思ったことはありませんか？YouPlotはそのためのツールです。グラフを描出するエンジンの部分は、mrknさんの作った&lt;a href="https://github.com/red-data-tools/unicode_plot.rb" rel="nofollow noopener" target="_blank"&gt;UnicodePlot&lt;/a&gt;を利用しています。&lt;strong&gt;エンジンの部分を作る記事ではありません。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;　この記事では、前半でYouPlotの使い方を簡単に紹介し、後半でコマンドラインツールをRubyで作る上で感じたことを書きます。&lt;/p&gt;

&lt;h2&gt;
&lt;span id="uplotのつかい方" class="fragment"&gt;&lt;/span&gt;&lt;a href="#uplot%E3%81%AE%E3%81%A4%E3%81%8B%E3%81%84%E6%96%B9"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;Uplotのつかい方&lt;/h2&gt;

&lt;h3&gt;
&lt;span id="インストール" class="fragment"&gt;&lt;/span&gt;&lt;a href="#%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;インストール&lt;/h3&gt;

&lt;div class="code-frame" data-lang="text"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;gem install youplot
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4&gt;
&lt;span id="コマンド名はuplotです1" class="fragment"&gt;&lt;/span&gt;&lt;a href="#%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89%E5%90%8D%E3%81%AFuplot%E3%81%A7%E3%81%991"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;コマンド名はuplotです！&lt;sup id="fnref1"&gt;&lt;a href="#fn1" rel="footnote" title="（本当はgem名もuplotにしたかったのですが、uPlotという有名なJavaScriptのツールがあって、そちらに関するライブラリにネームスペースを取られてしまいました。ググラビリティ改善の目的もありYouPlotとしました。）"&gt;1&lt;/a&gt;&lt;/sup&gt;
&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;youplot&lt;/code&gt; でも動きます。&lt;/p&gt;

&lt;div class="code-frame" data-lang="text"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;uplot
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3&gt;
&lt;span id="ヒストグラム" class="fragment"&gt;&lt;/span&gt;&lt;a href="#%E3%83%92%E3%82%B9%E3%83%88%E3%82%B0%E3%83%A9%E3%83%A0"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;ヒストグラム&lt;/h3&gt;

&lt;div class="code-frame" data-lang="sh"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nt"&gt;-e&lt;/span&gt; &lt;span class="s2"&gt;"from numpy import random;"&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
        &lt;span class="s2"&gt;"n = random.randn(10000);"&lt;/span&gt;  &lt;span class="se"&gt;\&lt;/span&gt;
        &lt;span class="s2"&gt;"print('&lt;/span&gt;&lt;span class="se"&gt;\\\n&lt;/span&gt;&lt;span class="s2"&gt;'.join(str(i) for i in n))"&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
| python &lt;span class="se"&gt;\&lt;/span&gt;
| uplot hist &lt;span class="nt"&gt;--nbins&lt;/span&gt; 20
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F144608%2F92943971-b420-2cb5-e31b-2e9f15b7c9d8.png?ixlib=rb-1.2.2&amp;amp;auto=format&amp;amp;gif-q=60&amp;amp;q=75&amp;amp;s=b54b50dabd2a746ec6cef94cf46ffd8f" target="_blank" rel="nofollow noopener"&gt;&lt;img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F144608%2F92943971-b420-2cb5-e31b-2e9f15b7c9d8.png?ixlib=rb-1.2.2&amp;amp;auto=format&amp;amp;gif-q=60&amp;amp;q=75&amp;amp;s=b54b50dabd2a746ec6cef94cf46ffd8f" alt="image.png" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/144608/92943971-b420-2cb5-e31b-2e9f15b7c9d8.png" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F144608%2F92943971-b420-2cb5-e31b-2e9f15b7c9d8.png?ixlib=rb-1.2.2&amp;amp;auto=format&amp;amp;gif-q=60&amp;amp;q=75&amp;amp;w=1400&amp;amp;fit=max&amp;amp;s=1bdd35659e8fceb6687bcdfb61002da0 1x" loading="lazy"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
&lt;span id="散布図" class="fragment"&gt;&lt;/span&gt;&lt;a href="#%E6%95%A3%E5%B8%83%E5%9B%B3"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;散布図&lt;/h3&gt;

&lt;div class="code-frame" data-lang="sh"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;curl &lt;span class="nt"&gt;-s&lt;/span&gt; https://raw.githubusercontent.com/uiuc-cse/data-fa14/gh-pages/data/iris.csv &lt;span class="se"&gt;\&lt;/span&gt;
| &lt;span class="nb"&gt;cut&lt;/span&gt; &lt;span class="nt"&gt;-f1-4&lt;/span&gt; &lt;span class="nt"&gt;-d&lt;/span&gt;, &lt;span class="se"&gt;\&lt;/span&gt;
| uplot scatter &lt;span class="nt"&gt;-H&lt;/span&gt; &lt;span class="nt"&gt;-d&lt;/span&gt;, &lt;span class="nt"&gt;-t&lt;/span&gt; IRIS
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F144608%2F7733cd19-de34-1686-abc6-ddd55ef39884.png?ixlib=rb-1.2.2&amp;amp;auto=format&amp;amp;gif-q=60&amp;amp;q=75&amp;amp;s=9e100ae717d274f09f3d53b45760a39d" target="_blank" rel="nofollow noopener"&gt;&lt;img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F144608%2F7733cd19-de34-1686-abc6-ddd55ef39884.png?ixlib=rb-1.2.2&amp;amp;auto=format&amp;amp;gif-q=60&amp;amp;q=75&amp;amp;s=9e100ae717d274f09f3d53b45760a39d" alt="image.png" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/144608/7733cd19-de34-1686-abc6-ddd55ef39884.png" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F144608%2F7733cd19-de34-1686-abc6-ddd55ef39884.png?ixlib=rb-1.2.2&amp;amp;auto=format&amp;amp;gif-q=60&amp;amp;q=75&amp;amp;w=1400&amp;amp;fit=max&amp;amp;s=3fb158aa4bb224ab647284a613026b2b 1x" loading="lazy"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;div class="code-frame" data-lang="sh"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;curl &lt;span class="nt"&gt;-s&lt;/span&gt; https://raw.githubusercontent.com/uiuc-cse/data-fa14/gh-pages/data/iris.csv &lt;span class="se"&gt;\&lt;/span&gt;
| &lt;span class="nb"&gt;cut&lt;/span&gt; &lt;span class="nt"&gt;-f1-4&lt;/span&gt; &lt;span class="nt"&gt;-d&lt;/span&gt;, &lt;span class="se"&gt;\&lt;/span&gt;
| uplot density &lt;span class="nt"&gt;-H&lt;/span&gt; &lt;span class="nt"&gt;-d&lt;/span&gt;, &lt;span class="nt"&gt;-t&lt;/span&gt; IRIS
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F144608%2Fd224b43b-d332-794c-f06b-2057366a229c.png?ixlib=rb-1.2.2&amp;amp;auto=format&amp;amp;gif-q=60&amp;amp;q=75&amp;amp;s=751bb1b8cce03c00acfce3f5949ed1b6" target="_blank" rel="nofollow noopener"&gt;&lt;img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F144608%2Fd224b43b-d332-794c-f06b-2057366a229c.png?ixlib=rb-1.2.2&amp;amp;auto=format&amp;amp;gif-q=60&amp;amp;q=75&amp;amp;s=751bb1b8cce03c00acfce3f5949ed1b6" alt="image.png" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/144608/d224b43b-d332-794c-f06b-2057366a229c.png" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F144608%2Fd224b43b-d332-794c-f06b-2057366a229c.png?ixlib=rb-1.2.2&amp;amp;auto=format&amp;amp;gif-q=60&amp;amp;q=75&amp;amp;w=1400&amp;amp;fit=max&amp;amp;s=ac6b2d7c4c3551d5ad675a6cf4d09e5c 1x" loading="lazy"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
&lt;span id="折れ線グラフ" class="fragment"&gt;&lt;/span&gt;&lt;a href="#%E6%8A%98%E3%82%8C%E7%B7%9A%E3%82%B0%E3%83%A9%E3%83%95"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;折れ線グラフ&lt;/h3&gt;

&lt;div class="code-frame" data-lang="sh"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;curl &lt;span class="nt"&gt;-s&lt;/span&gt; https://www.mhlw.go.jp/content/pcr_positive_daily.csv &lt;span class="se"&gt;\&lt;/span&gt;
| &lt;span class="nb"&gt;cut&lt;/span&gt; &lt;span class="nt"&gt;-f2&lt;/span&gt; &lt;span class="nt"&gt;-d&lt;/span&gt;, &lt;span class="se"&gt;\&lt;/span&gt;
| uplot line &lt;span class="nt"&gt;-w&lt;/span&gt; 50 &lt;span class="nt"&gt;-h&lt;/span&gt; 15 &lt;span class="nt"&gt;-t&lt;/span&gt; &lt;span class="s1"&gt;'PCR positive tests'&lt;/span&gt; &lt;span class="nt"&gt;--xlabel&lt;/span&gt; Date &lt;span class="nt"&gt;--ylabel&lt;/span&gt; number
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F144608%2F6bf05898-4ecd-2767-554d-2f392b89a5dc.png?ixlib=rb-1.2.2&amp;amp;auto=format&amp;amp;gif-q=60&amp;amp;q=75&amp;amp;s=4e5145998480e54be95e72a2ca32e277" target="_blank" rel="nofollow noopener"&gt;&lt;img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F144608%2F6bf05898-4ecd-2767-554d-2f392b89a5dc.png?ixlib=rb-1.2.2&amp;amp;auto=format&amp;amp;gif-q=60&amp;amp;q=75&amp;amp;s=4e5145998480e54be95e72a2ca32e277" alt="image.png" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/144608/6bf05898-4ecd-2767-554d-2f392b89a5dc.png" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F144608%2F6bf05898-4ecd-2767-554d-2f392b89a5dc.png?ixlib=rb-1.2.2&amp;amp;auto=format&amp;amp;gif-q=60&amp;amp;q=75&amp;amp;w=1400&amp;amp;fit=max&amp;amp;s=3f46453050bd86271b4b94c6a4f0a0d1 1x" loading="lazy"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;
&lt;span id="箱ひげ図" class="fragment"&gt;&lt;/span&gt;&lt;a href="#%E7%AE%B1%E3%81%B2%E3%81%92%E5%9B%B3"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;箱ひげ図&lt;/h3&gt;

&lt;div class="code-frame" data-lang="sh"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;curl &lt;span class="nt"&gt;-s&lt;/span&gt; https://raw.githubusercontent.com/uiuc-cse/data-fa14/gh-pages/data/iris.csv &lt;span class="se"&gt;\&lt;/span&gt;
| &lt;span class="nb"&gt;cut&lt;/span&gt; &lt;span class="nt"&gt;-f1-4&lt;/span&gt; &lt;span class="nt"&gt;-d&lt;/span&gt;, &lt;span class="se"&gt;\&lt;/span&gt;
| uplot box &lt;span class="nt"&gt;-H&lt;/span&gt; &lt;span class="nt"&gt;-d&lt;/span&gt;, &lt;span class="nt"&gt;-t&lt;/span&gt; IRIS
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F144608%2F81cc38eb-e8a5-262c-393d-463585b47afc.png?ixlib=rb-1.2.2&amp;amp;auto=format&amp;amp;gif-q=60&amp;amp;q=75&amp;amp;s=95e4ad9985868367c4bd1449e51c334a" target="_blank" rel="nofollow noopener"&gt;&lt;img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F144608%2F81cc38eb-e8a5-262c-393d-463585b47afc.png?ixlib=rb-1.2.2&amp;amp;auto=format&amp;amp;gif-q=60&amp;amp;q=75&amp;amp;s=95e4ad9985868367c4bd1449e51c334a" alt="image.png" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/144608/81cc38eb-e8a5-262c-393d-463585b47afc.png" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F144608%2F81cc38eb-e8a5-262c-393d-463585b47afc.png?ixlib=rb-1.2.2&amp;amp;auto=format&amp;amp;gif-q=60&amp;amp;q=75&amp;amp;w=1400&amp;amp;fit=max&amp;amp;s=d446b7e5595696fabe1cda0b1d31ba17 1x" loading="lazy"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
&lt;span id="棒グラフ" class="fragment"&gt;&lt;/span&gt;&lt;a href="#%E6%A3%92%E3%82%B0%E3%83%A9%E3%83%95"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;棒グラフ&lt;/h2&gt;

&lt;div class="code-frame" data-lang="text"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;echo -ne "A:200\nB:300\n" | uplot bar -d: -s 🍎
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F144608%2Fbcbc87f3-ef17-d849-d2e3-005de1fa3925.png?ixlib=rb-1.2.2&amp;amp;auto=format&amp;amp;gif-q=60&amp;amp;q=75&amp;amp;s=79d03f1ec156339e2f90dcb0fe4b84f7" target="_blank" rel="nofollow noopener"&gt;&lt;img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F144608%2Fbcbc87f3-ef17-d849-d2e3-005de1fa3925.png?ixlib=rb-1.2.2&amp;amp;auto=format&amp;amp;gif-q=60&amp;amp;q=75&amp;amp;s=79d03f1ec156339e2f90dcb0fe4b84f7" alt="image.png" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/144608/bcbc87f3-ef17-d849-d2e3-005de1fa3925.png" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F144608%2Fbcbc87f3-ef17-d849-d2e3-005de1fa3925.png?ixlib=rb-1.2.2&amp;amp;auto=format&amp;amp;gif-q=60&amp;amp;q=75&amp;amp;w=1400&amp;amp;fit=max&amp;amp;s=1e09e1ca342f1f55ccefefa5ae0ca099 1x" loading="lazy"&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;
&lt;span id="そのほかの機能" class="fragment"&gt;&lt;/span&gt;&lt;a href="#%E3%81%9D%E3%81%AE%E3%81%BB%E3%81%8B%E3%81%AE%E6%A9%9F%E8%83%BD"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;そのほかの機能&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Kernel.gets が ARGF も取ってきてくれるので、&lt;code&gt;uplot lines -H -d, hoge.csv&lt;/code&gt; みたいにファイルを指定することもできます。&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;--pass&lt;/code&gt; または &lt;code&gt;-O&lt;/code&gt; オプションをつけると、受け取った標準入力をそのまま標準出力に流し込むことができます。（グラフは標準エラー出力に描出されます）これは、&lt;code&gt;hoge | uplot | fuga&lt;/code&gt; のようにコマンドをパイプラインのチェーンの間に挟んで使用する場合に便利です。このあたりのオプションの仕様は固まっていないのでまた変更になる可能性があります。&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;uplot color&lt;/code&gt; で指定可能な色一覧が表示されます。
&lt;a href="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F144608%2Fdc8457db-08b6-1cec-9ec8-e6c033d1589b.png?ixlib=rb-1.2.2&amp;amp;auto=format&amp;amp;gif-q=60&amp;amp;q=75&amp;amp;s=d32276d2f57d4b538b817779bc805f47" target="_blank" rel="nofollow noopener"&gt;&lt;img src="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F144608%2Fdc8457db-08b6-1cec-9ec8-e6c033d1589b.png?ixlib=rb-1.2.2&amp;amp;auto=format&amp;amp;gif-q=60&amp;amp;q=75&amp;amp;s=d32276d2f57d4b538b817779bc805f47" alt="image.png" data-canonical-src="https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/144608/dc8457db-08b6-1cec-9ec8-e6c033d1589b.png" srcset="https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F144608%2Fdc8457db-08b6-1cec-9ec8-e6c033d1589b.png?ixlib=rb-1.2.2&amp;amp;auto=format&amp;amp;gif-q=60&amp;amp;q=75&amp;amp;w=1400&amp;amp;fit=max&amp;amp;s=ef760b00292f3af2886b8410e47eb52e 1x" loading="lazy"&gt;&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;uplot count&lt;/code&gt; で要素の数を数えて棒グラフにすることができます。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;より詳しい使い方は &lt;code&gt;uplot --help&lt;/code&gt; をご覧ください。&lt;code&gt;uplot bar --help&lt;/code&gt; などとするとより詳しいオプションが表示されます。&lt;br&gt;
&lt;a href="https://github.com/red-data-tools/unicode_plot.rb" rel="nofollow noopener" target="_blank"&gt;UnicodePlot&lt;/a&gt;の大半のオプションは指定できるようになっているはずです。&lt;sup id="fnref2"&gt;&lt;a href="#fn2" rel="footnote" title="オプションやサブコマンドは今後も変更する可能性があります。"&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;h2&gt;
&lt;span id="youplotを作って感じたこと" class="fragment"&gt;&lt;/span&gt;&lt;a href="#youplot%E3%82%92%E4%BD%9C%E3%81%A3%E3%81%A6%E6%84%9F%E3%81%98%E3%81%9F%E3%81%93%E3%81%A8"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;YouPlotを作って感じたこと&lt;/h2&gt;

&lt;h3&gt;
&lt;span id="バックグラウンド" class="fragment"&gt;&lt;/span&gt;&lt;a href="#%E3%83%90%E3%83%83%E3%82%AF%E3%82%B0%E3%83%A9%E3%82%A6%E3%83%B3%E3%83%89"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;バックグラウンド&lt;/h3&gt;

&lt;h4&gt;
&lt;span id="rubyではコマンドラインツールが簡単に作れてしまう" class="fragment"&gt;&lt;/span&gt;&lt;a href="#ruby%E3%81%A7%E3%81%AF%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89%E3%83%A9%E3%82%A4%E3%83%B3%E3%83%84%E3%83%BC%E3%83%AB%E3%81%8C%E7%B0%A1%E5%8D%98%E3%81%AB%E4%BD%9C%E3%82%8C%E3%81%A6%E3%81%97%E3%81%BE%E3%81%86"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;Rubyではコマンドラインツールが簡単に作れてしまう…&lt;/h4&gt;

&lt;p&gt;　Rubyはコマンドラインツールを作るのが得意です。Macで広く使われているパッケージマネージャーの &lt;code&gt;homebrew&lt;/code&gt; はRubyで書かれています。&lt;/p&gt;

&lt;p&gt;　YouPlotは&lt;code&gt;UnicodePlot&lt;/code&gt;に、&lt;code&gt;optparse&lt;/code&gt;を使ってコマンドラインインターフェースをつけたツールです。言い換えると、グラフ描画エンジンUnicodePlotに、データをパイプから読み込む仕組みや、オプションで操作を切り替えられるスイッチを付けて、一つのツールにまとめたものです。技術的に難しいことは何もやっていません。グラフの描出はすべてUnicodePlotにお任せしているのです。でも、便利です。&lt;/p&gt;

&lt;p&gt;　Rubyでお気に入りのツールをラップすれば、簡単にコマンドラインツールを作成することができます。&lt;/p&gt;

&lt;h4&gt;
&lt;span id="でもyouplotと同じようなツールは多くない" class="fragment"&gt;&lt;/span&gt;&lt;a href="#%E3%81%A7%E3%82%82youplot%E3%81%A8%E5%90%8C%E3%81%98%E3%82%88%E3%81%86%E3%81%AA%E3%83%84%E3%83%BC%E3%83%AB%E3%81%AF%E5%A4%9A%E3%81%8F%E3%81%AA%E3%81%84"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;でもYouPlotと同じようなツールは多くない…&lt;/h4&gt;

&lt;p&gt;　YouPlotを作る前に、私は同じようなツールがないかGoogle検索やGithubで探しました。デファクト・スタンダードになっているような便利なツールがすぐに見つかると思ったのです。けれども、私が探した範囲では、デファクト・スタンダードと呼べるようなツールはありませんでした。（強いて言うならば&lt;code&gt;gnuplot&lt;/code&gt;がそれに近いかも知れません）それならば、ということで自分で作ることにしました。&lt;/p&gt;

&lt;p&gt;　なぜYouPlotのようなツールはあまり多くないのでしょうか？&lt;/p&gt;

&lt;p&gt;　その理由はいくつか考えられます。一つは、Unixのコマンドラインツールで作業をしている人の絶対数がそれほど多くないことです。&lt;/p&gt;

&lt;p&gt;　もう一つの理由は、アスキーアートでグラフを表示するためのライブラリの不足です。自分で描画エンジンを作るのは結構大変です。YouPlotのようなツールを思いついても、作ることができなかった人もたくさんいると思います。&lt;/p&gt;

&lt;p&gt;　例えば、GoやRustのような言語では、コマンドラインツールが盛んに開発されています。しかし、必ずしもこれらの言語でターミナル上にアスキーアートでグラフを描出するライブラリが特別に豊富というわけではなさそうです。だからそれなりに手間がかかる気がします。&lt;/p&gt;

&lt;h4&gt;
&lt;span id="アスキーアートでグラフを描出するライブラリ-unicodeplot" class="fragment"&gt;&lt;/span&gt;&lt;a href="#%E3%82%A2%E3%82%B9%E3%82%AD%E3%83%BC%E3%82%A2%E3%83%BC%E3%83%88%E3%81%A7%E3%82%B0%E3%83%A9%E3%83%95%E3%82%92%E6%8F%8F%E5%87%BA%E3%81%99%E3%82%8B%E3%83%A9%E3%82%A4%E3%83%96%E3%83%A9%E3%83%AA-unicodeplot"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;アスキーアートでグラフを描出するライブラリ UnicodePlot&lt;/h4&gt;

&lt;p&gt;　幸いにしてRubyには、ターミナル上にアスキーアートでグラフを表示する便利なライブラリがありました。YouPlotが使っているグラフ描画エンジンは&lt;code&gt;UnicodePlot&lt;/code&gt;です。これは、Rubyのコミッタで、Julia言語が好きなmrknさんが、JuliaのUnicodePlotをRuby向けに実装し直したものです。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/red-data-tools/unicode_plot.rb" class="autolink" rel="nofollow noopener" target="_blank"&gt;https://github.com/red-data-tools/unicode_plot.rb&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;　Julia言語の&lt;a href="https://github.com/Evizero/UnicodePlots.jl" rel="nofollow noopener" target="_blank"&gt;UnicodePlot&lt;/a&gt;は、ターミナル上にグラフを描出する有名なライブラリです。しかし、Julia言語は、REPLやJupyterを通して利用する場合が多く、コマンドラインツールの作成はそれほど活発ではありません。&lt;/p&gt;

&lt;p&gt;　こんな感じで、いろいろな偶然が重なって、YouPlotもちょっとだけユニークなツールになっているのです。&lt;/p&gt;

&lt;h4&gt;
&lt;span id="ツールはみんなユニーク" class="fragment"&gt;&lt;/span&gt;&lt;a href="#%E3%83%84%E3%83%BC%E3%83%AB%E3%81%AF%E3%81%BF%E3%82%93%E3%81%AA%E3%83%A6%E3%83%8B%E3%83%BC%E3%82%AF"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;ツールはみんなユニーク&lt;/h4&gt;

&lt;p&gt;　ツールは、二度と重ならない条件のもとで生まれます。作者、目的、環境、マシン、ユーザー、仲間、同僚、家族、時代…　そういったものが交差した座標はどれもユニークです。だから、どのツールも必ずユニークになります。&lt;/p&gt;

&lt;p&gt;　YouPlotは、もともと生命情報のタブ区切りテキストをすばやく観察したい目的で作られました。なのでリアルタイムに時系列データを表示する機能がありません。一方やはりRubyで実装されている&lt;a href="https://github.com/Martin-Nyaga/termplot" rel="nofollow noopener" target="_blank"&gt;termplot&lt;/a&gt;というツールは、YouPlotより少しあとに開発されましたが、リアルタイムでグラフを描く機能に特化しています。このように作者の目的によってツールは少しずつ違ったものになります。&lt;/p&gt;

&lt;p&gt;　さらに、全てのツールは作者に求められて生み出されています。だから、あなたが作っているツールも、おそらくユニーク、かつ誰かに求められているはずです。私が言いたいことは一つです。みんな、Rubyでツールを作ったら公開しよう。&lt;/p&gt;

&lt;p&gt;…&lt;/p&gt;

&lt;p&gt;…（さて、今日は十分ポエムを書いたので、もう帰っていいですか）&lt;/p&gt;

&lt;h3&gt;
&lt;span id="optionparserを使ってコマンドラインオプションをつける" class="fragment"&gt;&lt;/span&gt;&lt;a href="#optionparser%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%A6%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89%E3%83%A9%E3%82%A4%E3%83%B3%E3%82%AA%E3%83%97%E3%82%B7%E3%83%A7%E3%83%B3%E3%82%92%E3%81%A4%E3%81%91%E3%82%8B"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;OptionParserを使ってコマンドラインオプションをつける&lt;/h3&gt;

&lt;p&gt;コマンドラインツールを作るのにはRuby標準ライブラリの&lt;a href="https://docs.ruby-lang.org/ja/latest/library/optparse.html" rel="nofollow noopener" target="_blank"&gt;optparse&lt;/a&gt;を使いました。optparseは下記のような構文でコマンドラインオプションを用意してくれます。&lt;/p&gt;

&lt;div class="code-frame" data-lang="ruby"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;'optparse'&lt;/span&gt;
&lt;span class="n"&gt;opt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;OptionParser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;

&lt;span class="n"&gt;params&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

&lt;span class="n"&gt;opt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'-a'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:a&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;opt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;on&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'-b'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:b&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;opt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;parse!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;ARGV&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href="https://docs.ruby-lang.org/ja/latest/library/optparse.html" rel="nofollow noopener" target="_blank"&gt;公式リファレンス&lt;/a&gt;がまとまっているのでしっかりと目を通します。&lt;/p&gt;

&lt;p&gt;optparseの応用は、sonotsさんの下記の記事がとても参考になりました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://qiita.com/sonots/items/1b44ed3a770ef790a63d" id="reference-5b5d900ec7a69a97f027"&gt;Ruby の OptionParser チートシート&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;（今回YouPlotでは利用していませんが、すこし複雑なツールを作りたい時は&lt;a href="https://github.com/piotrmurach" rel="nofollow noopener" target="_blank"&gt;Piotr Murach&lt;/a&gt;さんが開発している&lt;a href="https://ttytoolkit.org/" rel="nofollow noopener" target="_blank"&gt;TTYツールキット&lt;/a&gt;が便利です。たとえば、ターミナルにボックスやツリーを表示したり、コマンドを実行して結果を表示する機能などがあります。）&lt;/p&gt;

&lt;h3&gt;
&lt;span id="オブジェクト指向のrubyでデータ分析用のツールを作るときに気になること" class="fragment"&gt;&lt;/span&gt;&lt;a href="#%E3%82%AA%E3%83%96%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E6%8C%87%E5%90%91%E3%81%AEruby%E3%81%A7%E3%83%87%E3%83%BC%E3%82%BF%E5%88%86%E6%9E%90%E7%94%A8%E3%81%AE%E3%83%84%E3%83%BC%E3%83%AB%E3%82%92%E4%BD%9C%E3%82%8B%E3%81%A8%E3%81%8D%E3%81%AB%E6%B0%97%E3%81%AB%E3%81%AA%E3%82%8B%E3%81%93%E3%81%A8"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;オブジェクト指向のRubyでデータ分析用のツールを作るときに気になること&lt;/h3&gt;

&lt;p&gt;　この項は、主観が強く入っています。私はプログラミングも数学もよくわかりません。コンピュータやプログラミング、数学に造形の深い方らみると間違っている記述もあるかもしれません。一つの意見として聞いてください。&lt;/p&gt;

&lt;p&gt;　Rubyはデータ処理用の言語としてはそれほど広く使われていません。その理由はいろいろ言われています。ライブラリが足りない、とか。しかし、私の個人的な意見としては、オブジェクト指向とデータ分析相性があまりよくないからだと思います。普及しているデータ処理用の言語、例えばR, Juliaは、どちらもオブジェクト指向らしくはありません。（このような話題では、どうしてもPythonに注目が集まる傾向がありますが、Pythonよりも、RやJuliaとの比較に意味があると思います）&lt;/p&gt;

&lt;h4&gt;
&lt;span id="データと手続き" class="fragment"&gt;&lt;/span&gt;&lt;a href="#%E3%83%87%E3%83%BC%E3%82%BF%E3%81%A8%E6%89%8B%E7%B6%9A%E3%81%8D"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;「データ」と「手続き」&lt;/h4&gt;

&lt;p&gt;オブジェクト指向はむずかしく、私は理解できまている自信はありません。しかし、言いたいことを自分なりに表現するために続けますね。オブジェクト指向とは「データ」と「手続き」を一つのまとまりとして扱うことだと理解しています。しかし、「データ」と「手続き」を一つのカタマリとして扱うこと、これは、データを分析する際には不便な面があると思います。&lt;/p&gt;

&lt;p&gt;　私たちはデータを分析するとき、「データ」に、さまざまな「手続き」を適応して、うまくいく手続きを探そうとします。あたらしい「手続き」を開発しようとしている人がいます。「データ」にどの「手続き」を適応すると良い結果が出るかを試して、それを仕事にしている人もいます。結果だけほしくて、「手続き」には興味がない人もいます。いずれにせよ、この目的のためには「データ」はデータだけ、「手続き」は手続きだけで管理して、互いに依存しないようにバラバラにしておいた方が安全できれいに見えるでしょう。&lt;/p&gt;

&lt;p&gt;　一方で、Rubyでは、全てはオブジェクトで構成されており、原則として「手続き」はメソッドとしてすべて作者の意図通りにオブジェクトに所属しています。（単体の手続きは&lt;code&gt;lambda&lt;/code&gt;や&lt;code&gt;proc&lt;/code&gt;,&lt;code&gt;block&lt;/code&gt;など存在はします）ここでは、オブジェクトにどの「手続き」を適応すればよいのかは、オブジェクト自身が知っています。私たちはオブジェクトがどんなメソッドを持っているのか、オブジェクト自身に問い合わせることができ、自分で「手続き」を管理する必要はありません。そう考えるとRubyでは「データ」と「手続き」の関係性がよく整備された環境で、成果物そのものに注力できる良い環境が整っているとも言えるかもしれません。しかし、「データ」と「手続き」の関係性自体を探索的に調べているときには、この環境はベストではないかもしれません。&lt;/p&gt;

&lt;p&gt;　Rubyのオブジェクトは、インスタンス変数を持っています。なので、メソッドを呼び出すとしばしばオブジェクトの状態が変わってしまいます。これもデータを分析する上では望ましくない性質です。&lt;/p&gt;

&lt;p&gt;　たとえば、Jupyter Notebookでセルを一つづつ実行していいくことを考えます。セルを実行する順番を変えたり、あとからもう一回実行すると結果が変わってしまうようなワークフローは、データ分析の観点からはあまり望ましくないと思います。そしてJupyter Notebookを使っているような場合には、そのような試行錯誤が頻繁に発生します。このようなケースでは内部の状態が変化してしまうオブジェクトとメソッドは活躍しにくくなります。&lt;/p&gt;

&lt;p&gt;　このように、オブジェクト指向の持つ「データ」と「手続き」をまとめて管理する傾向は、データ分析ではしばしば不利になるケースがあると私は考えます。&lt;/p&gt;

&lt;h3&gt;
&lt;span id="モジュール関数module-function" class="fragment"&gt;&lt;/span&gt;&lt;a href="#%E3%83%A2%E3%82%B8%E3%83%A5%E3%83%BC%E3%83%AB%E9%96%A2%E6%95%B0module-function"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;モジュール関数(module function)&lt;/h3&gt;

&lt;p&gt;　そうはいっても、Rubyでも、どうしても「手続き」そのものを扱いたいこともあります。例えば、数学の関数がそれに当たります。RubyではMathモジュールというものが存在し、これらはモジュール関数(module function)として作成されています。モジュール関数は、特異メソッドでありかつ、プライベートメソッドでもあるような関数のことです。&lt;/p&gt;

&lt;div class="code-frame" data-lang="ruby"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="no"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;sin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;span class="c1"&gt;# 特異メソッドなので呼べる&lt;/span&gt;

&lt;span class="kp"&gt;include&lt;/span&gt; &lt;span class="no"&gt;Math&lt;/span&gt;
&lt;span class="n"&gt;sin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;        &lt;span class="c1"&gt;# プライベートメソッドでもあるので呼べる&lt;/span&gt;

&lt;span class="no"&gt;Object&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;sin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# 呼べない&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;　Mathモジュールは、クラスではなくてモジュールなので、インスタンス変数を持ちません。だから、何回実行しても内部の状態が変わって結果が変わることはありません。&lt;/p&gt;

&lt;div class="code-frame" data-lang="ruby"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;# 馬の耳に念仏モジュール&lt;/span&gt;
&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;Horse&lt;/span&gt;
  &lt;span class="kp"&gt;module_function&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;hear&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sound&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="s2"&gt;"..."&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="c1"&gt;# Horseはモジュールなので中味は変化しない&lt;/span&gt;

&lt;span class="no"&gt;Horse&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;hear&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"念仏"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="no"&gt;Horse&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;hear&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"東風"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# 馬耳東風&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;　なんだ、Rubyでも関数が作れるんだ、よかった。という話になるでしょうか…。&lt;/p&gt;

&lt;p&gt;　長々と書きました。YouPlotのような小さなツールを作るためには、こんなことをくどくど考える必要はないかもしれません。けれども、ライブラリを作る前に、一つのオブジェクトをモジュールにしようか、クラスにしようか、Mixinをどうしようかと悩んだりすることは、パッケージを作った方はきっと経験があると思います。&lt;/p&gt;

&lt;p&gt;　YouPlotでも上記のようなことをあれこれ考えて、部分的にモジュール関数(module function)を使っています。モジュール関数を作るのは簡単で、&lt;code&gt;module_function&lt;/code&gt; と書くだけです。&lt;/p&gt;

&lt;h3&gt;
&lt;span id="構造体struct" class="fragment"&gt;&lt;/span&gt;&lt;a href="#%E6%A7%8B%E9%80%A0%E4%BD%93struct"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;構造体(struct)&lt;/h3&gt;

&lt;p&gt;YouPlotでは、パラメータの保持に構造体を使っています。&lt;/p&gt;

&lt;div class="code-frame" data-lang="ruby"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="no"&gt;Qiitan&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Struct&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:age&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;qiitan&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Qiitan&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"キータン"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;qiitan&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;age&lt;/span&gt; &lt;span class="c1"&gt;# 6&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;　StructはHashと比較して、デフォルトでkeyが固定されています。そのため何かのタイミングで新しくキーが追加されてしまうことを防ぐことができて少し安心です。また、値を取り出す記述がメソッドのように見えるのですこしすっきりします。&lt;/p&gt;

&lt;p&gt;　モジュール関数や構造体を使うRubyのコードは、どちらかというとあまりRubyらしくない記述法だと思います。けれども、Juliaや他の言語のデータ解析関連のライブラリーはオブジェクトとメソッドという組み合わせよりは、構造体と関数という発想で作られている場合があるのではないかと思います。そういったライブラリをRubyに移植することを考えると、module function や struct　のようなものを適材適所で使っていけば、頭を切り替えなくてもすむというメリットがあります。とくにデータ分析のツールを作る上では、活躍する場面があるのではないかと思います。&lt;/p&gt;

&lt;p&gt;（一方で、「データ」と、それに適応する「手続き」が一度確立された分野では、Rubyのオブジェクト指向の強みがいかんなく発揮されていくのではないかと思います。）&lt;/p&gt;

&lt;h2&gt;
&lt;span id="youplotの課題とこれから" class="fragment"&gt;&lt;/span&gt;&lt;a href="#youplot%E3%81%AE%E8%AA%B2%E9%A1%8C%E3%81%A8%E3%81%93%E3%82%8C%E3%81%8B%E3%82%89"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;YouPlotの課題とこれから&lt;/h2&gt;

&lt;h4&gt;
&lt;span id="リアルタイムにグラフを表示したい" class="fragment"&gt;&lt;/span&gt;&lt;a href="#%E3%83%AA%E3%82%A2%E3%83%AB%E3%82%BF%E3%82%A4%E3%83%A0%E3%81%AB%E3%82%B0%E3%83%A9%E3%83%95%E3%82%92%E8%A1%A8%E7%A4%BA%E3%81%97%E3%81%9F%E3%81%84"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;リアルタイムにグラフを表示したい&lt;/h4&gt;

&lt;p&gt;　YouPlotはデータをリアルタイムに表示できません。いずれそういったことができるようになるといいなと思っています。&lt;/p&gt;

&lt;h4&gt;
&lt;span id="テストとエラーメッセージの整備" class="fragment"&gt;&lt;/span&gt;&lt;a href="#%E3%83%86%E3%82%B9%E3%83%88%E3%81%A8%E3%82%A8%E3%83%A9%E3%83%BC%E3%83%A1%E3%83%83%E3%82%BB%E3%83%BC%E3%82%B8%E3%81%AE%E6%95%B4%E5%82%99"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;テストとエラーメッセージの整備&lt;/h4&gt;

&lt;p&gt;勉強して少しずつテストを追加したり、エラーメッセージを整備していきたいと思っています。&lt;/p&gt;

&lt;h4&gt;
&lt;span id="前処理統計処理など" class="fragment"&gt;&lt;/span&gt;&lt;a href="#%E5%89%8D%E5%87%A6%E7%90%86%E7%B5%B1%E8%A8%88%E5%87%A6%E7%90%86%E3%81%AA%E3%81%A9"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;前処理・統計処理など&lt;/h4&gt;

&lt;p&gt;　YouPlotのようなツールに簡単な前処理や統計の機能をつけようとするのは自然だと思います。しかし、Rubyのスクリプトでありますのでスピードがでないと思っています。&lt;code&gt;datamash&lt;/code&gt; などの専用のコマンドと組み合わせる方がUnixらしくて現実的かも知れません。&lt;br&gt;
　もしも、YouPlotと同様のツールをGolangやRustで開発したらとても便利なツールになるかも知れません。興味のある方は挑戦してみてください。&lt;/p&gt;

&lt;h3&gt;
&lt;span id="おわりに" class="fragment"&gt;&lt;/span&gt;&lt;a href="#%E3%81%8A%E3%82%8F%E3%82%8A%E3%81%AB"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;おわりに&lt;/h3&gt;

&lt;p&gt;みなさんもRubyのツールを作っていたらぜひ公開してください。&lt;/p&gt;

&lt;p&gt;この記事は以上です。&lt;/p&gt;

&lt;div class="footnotes"&gt;
&lt;hr&gt;
&lt;ol&gt;

&lt;li id="fn1"&gt;
&lt;p&gt;（本当はgem名もuplotにしたかったのですが、&lt;a href="https://github.com/leeoniya/uPlot" rel="nofollow noopener" target="_blank"&gt;uPlot&lt;/a&gt;という有名なJavaScriptのツールがあって、そちらに関するライブラリにネームスペースを取られてしまいました。ググラビリティ改善の目的もありYouPlotとしました。） &lt;a href="#fnref1"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;li id="fn2"&gt;
&lt;p&gt;オプションやサブコマンドは今後も変更する可能性があります。 &lt;a href="#fnref2"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;

&lt;/ol&gt;
&lt;/div&gt;
</content>
    <published>2020-12-04T13:53:57Z</published>
    <updated>2020-12-07T09:07:58Z</updated>
    <author>
      <name>kojix2</name>
    </author>
  </entry>
  <entry>
    <id>tag:qiita.com,2005:PublicArticle/1347895</id>
    <published>2020-12-02T11:51:46+09:00</published>
    <updated>2020-12-02T11:58:04+09:00</updated>
    <link rel="alternate" type="text/html" href="https://qiita.com/kojix2/items/d3e44a559a822715ce80"/>
    <url>https://qiita.com/kojix2/items/d3e44a559a822715ce80</url>
    <title>Ruby FFI wiki の日本語訳</title>
    <content type="html">
&lt;h1&gt;
&lt;span id="このページはなに" class="fragment"&gt;&lt;/span&gt;&lt;a href="#%E3%81%93%E3%81%AE%E3%83%9A%E3%83%BC%E3%82%B8%E3%81%AF%E3%81%AA%E3%81%AB"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;このページはなに？&lt;/h1&gt;

&lt;p&gt;このページは&lt;a href="https://github.com/ffi/ffi/wiki" rel="nofollow noopener" target="_blank"&gt;ruby-ffi&lt;/a&gt;の&lt;a href="https://github.com/ffi/ffi/wiki" rel="nofollow noopener" target="_blank"&gt;Wiki&lt;/a&gt;を一通り目を通したいと思った人が、google翻訳を使ってページを翻訳したものを一枚のページにまとめたものです。良いところは、ソースコードの部分を翻訳していないところです。単純にGoogle翻訳をかけると、ソースコードも翻訳されて表示されてしまうため不便です。さらに&lt;code&gt;hoge&lt;/code&gt; のようにバッククォート「`」で囲んだ部分は正しく機械翻訳されません。（残念ながら、技術文章には大量にバッククォートが出現します）そういった部分には最低限度の修正を手動で行っています。また、日本語ググラビリティの高まりにより、Ruby-ffiの情報を知りたい人が検索エンジンからこのページに流入し、正しい情報源にたどり着くことを手助けする意義もあります。以上が、機械翻訳に修正を加えて再構成したに過ぎない記事をアップしている理由です。&lt;/p&gt;

&lt;p&gt;最新の情報を見たい場合は、情報元のfuby-ffiの公式Wikiを見てね。&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/ffi/ffi/wiki" class="autolink" rel="nofollow noopener" target="_blank"&gt;https://github.com/ffi/ffi/wiki&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;
&lt;span id="前書き" class="fragment"&gt;&lt;/span&gt;&lt;a href="#%E5%89%8D%E6%9B%B8%E3%81%8D"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;前書き&lt;/h1&gt;

&lt;p&gt;FFIは、 Foreign Function Interfaceの略です。&lt;br&gt;
このプロジェクトは、 Rubyの FFI実装であるruby-ffiです。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;FFIを使用する理由– Ruby- FFIを 使用するのに適切な理由&lt;/li&gt;
&lt;li&gt;一目でわかる機能&lt;/li&gt;
&lt;li&gt;コアコンセプト –基本的な高レベルFFIコンセプト&lt;/li&gt;
&lt;li&gt;基本的な使用法 -Ruby- FFIの基礎となる基本的な使用法の概念の例&lt;/li&gt;
&lt;li&gt;例 –実世界のような例&lt;/li&gt;
&lt;li&gt;Windowsの例 – Windows APIを使用した実世界のような例&lt;/li&gt;
&lt;li&gt;プレゼンテーション – FFIと関連プロジェクトに関するトークとプレゼンテーション &lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
&lt;span id="参照" class="fragment"&gt;&lt;/span&gt;&lt;a href="#%E5%8F%82%E7%85%A7"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;参照&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;ライブラリの読み込み – &lt;code&gt;ffi_lib&lt;/code&gt;の使用に関するヒント。 複数の代替ライブラリの使用も参照してください&lt;/li&gt;
&lt;li&gt;タイプ –サポートされるタイプのリスト（ :intなど）&lt;/li&gt;
&lt;li&gt;列挙型– FFIで列挙型を使用する&lt;/li&gt;
&lt;li&gt;構造体– FFIで構造体を使用する&lt;/li&gt;
&lt;li&gt;ポインタ – FFIでのポインタ（文字列を含む）の使用&lt;/li&gt;
&lt;li&gt;バイナリデータ – FFIを使用したバイナリデータ（Ruby Strings of Encoding :: BINARYなど ）の処理&lt;/li&gt;
&lt;li&gt;コールバック&lt;/li&gt;
&lt;li&gt;複数の署名がある関数&lt;/li&gt;
&lt;li&gt;rdoc –詳細なドキュメントはこちら &lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
&lt;span id="ヘルプ" class="fragment"&gt;&lt;/span&gt;&lt;a href="#%E3%83%98%E3%83%AB%E3%83%97"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;ヘルプ&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;メーリングリスト –ここでサポートを依頼してください！&lt;/li&gt;
&lt;li&gt;混合アーキテクチャ、ユニバーサルバイナリでのOs Xでのruby ffiの使用 &lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
&lt;span id="取り組み" class="fragment"&gt;&lt;/span&gt;&lt;a href="#%E5%8F%96%E3%82%8A%E7%B5%84%E3%81%BF"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;取り組み&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;標準1.0 APIの提案 –学んだ教訓を統合する&lt;/li&gt;
&lt;li&gt;FFIを使用するプロジェクト – FFIを使用するプロジェクトのリスト&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
&lt;span id="ffiを使用する理由" class="fragment"&gt;&lt;/span&gt;&lt;a href="#ffi%E3%82%92%E4%BD%BF%E7%94%A8%E3%81%99%E3%82%8B%E7%90%86%E7%94%B1"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;FFIを使用する理由&lt;/h2&gt;

&lt;p&gt;なぜruby-ffiを使用して次のRuby拡張機能を作成する必要があるのですか？ なぜruby-ffiを使用して既存の標準拡張を再実装することを検討する必要があるのですか？ 以下のセクションは、これらの質問に対するいくつかの良い答えを提供することを目的としています。&lt;/p&gt;

&lt;h2&gt;
&lt;span id="ffi拡張機能はコンパイルを必要としません" class="fragment"&gt;&lt;/span&gt;&lt;a href="#ffi%E6%8B%A1%E5%BC%B5%E6%A9%9F%E8%83%BD%E3%81%AF%E3%82%B3%E3%83%B3%E3%83%91%E3%82%A4%E3%83%AB%E3%82%92%E5%BF%85%E8%A6%81%E3%81%A8%E3%81%97%E3%81%BE%E3%81%9B%E3%82%93"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;FFI拡張機能はコンパイルを必要としません&lt;/h2&gt;

&lt;p&gt;FFI拡張機能を実行するために、システムにコンパイラをインストールする必要はありません。 ライブラリの開発バージョンをインストールする必要もありません。 実行時バージョンが行います。 もちろん、リンクするライブラリは、ある時点でコンパイルされている必要がありますが、おそらくそうする必要はないでしょう。&lt;/p&gt;

&lt;h2&gt;
&lt;span id="ffi拡張機能はマルチプラットフォームおよびマルチ実装です" class="fragment"&gt;&lt;/span&gt;&lt;a href="#ffi%E6%8B%A1%E5%BC%B5%E6%A9%9F%E8%83%BD%E3%81%AF%E3%83%9E%E3%83%AB%E3%83%81%E3%83%97%E3%83%A9%E3%83%83%E3%83%88%E3%83%95%E3%82%A9%E3%83%BC%E3%83%A0%E3%81%8A%E3%82%88%E3%81%B3%E3%83%9E%E3%83%AB%E3%83%81%E5%AE%9F%E8%A3%85%E3%81%A7%E3%81%99"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;FFI拡張機能は、マルチプラットフォームおよびマルチ実装です&lt;/h2&gt;

&lt;p&gt;FFI拡張機能は、Ruby、JRuby、TruffleRuby、およびFFIをサポートするその他のRuby VMを変更せずに機能します。&lt;/p&gt;

&lt;h2&gt;
&lt;span id="ffi拡張機能は読みやすい" class="fragment"&gt;&lt;/span&gt;&lt;a href="#ffi%E6%8B%A1%E5%BC%B5%E6%A9%9F%E8%83%BD%E3%81%AF%E8%AA%AD%E3%81%BF%E3%82%84%E3%81%99%E3%81%84"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;FFI拡張機能は読みやすい&lt;/h2&gt;

&lt;p&gt;FFI拡張機能のすべてのコードはRubyで記述されているため、他のRubyコードと同じくらい簡単に読み取ることができます。 CプログラミングからRubyプログラミングにメンタルモードを切り替える必要はありません。&lt;/p&gt;

&lt;h2&gt;
&lt;span id="ffi拡張機能は簡単に記述できます" class="fragment"&gt;&lt;/span&gt;&lt;a href="#ffi%E6%8B%A1%E5%BC%B5%E6%A9%9F%E8%83%BD%E3%81%AF%E7%B0%A1%E5%8D%98%E3%81%AB%E8%A8%98%E8%BF%B0%E3%81%A7%E3%81%8D%E3%81%BE%E3%81%99"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;FFI拡張機能は簡単に記述できます&lt;/h2&gt;

&lt;p&gt;Ruby-FFIベースの拡張機能の記述は、直感的なDSLのおかげで簡単です。 たとえば、以下のスニペットは、libc Cライブラリで定義されている「puts」関数とのインターフェースに必要なすべてです。&lt;/p&gt;

&lt;div class="code-frame" data-lang="ruby"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;Foo&lt;/span&gt;
  &lt;span class="kp"&gt;extend&lt;/span&gt; &lt;span class="no"&gt;FFI&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Library&lt;/span&gt;
  &lt;span class="n"&gt;ffi_lib&lt;/span&gt; &lt;span class="no"&gt;FFI&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Library&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;LIBC&lt;/span&gt;
  &lt;span class="n"&gt;attach_function&lt;/span&gt; &lt;span class="ss"&gt;:puts&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="ss"&gt;:string&lt;/span&gt; &lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="ss"&gt;:int&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;他の例については、 基本的な使用法を参照してください。&lt;/p&gt;

&lt;h2&gt;
&lt;span id="ffi拡張機能は保守が簡単です" class="fragment"&gt;&lt;/span&gt;&lt;a href="#ffi%E6%8B%A1%E5%BC%B5%E6%A9%9F%E8%83%BD%E3%81%AF%E4%BF%9D%E5%AE%88%E3%81%8C%E7%B0%A1%E5%8D%98%E3%81%A7%E3%81%99"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;FFI拡張機能は保守が簡単です&lt;/h2&gt;

&lt;p&gt;FFI拡張機能は読み取りと書き込みが簡単なので、保守も簡単です。&lt;/p&gt;

&lt;h2&gt;
&lt;span id="ffi拡張機能は内部ruby-apiの変更に影響されません" class="fragment"&gt;&lt;/span&gt;&lt;a href="#ffi%E6%8B%A1%E5%BC%B5%E6%A9%9F%E8%83%BD%E3%81%AF%E5%86%85%E9%83%A8ruby-api%E3%81%AE%E5%A4%89%E6%9B%B4%E3%81%AB%E5%BD%B1%E9%9F%BF%E3%81%95%E3%82%8C%E3%81%BE%E3%81%9B%E3%82%93"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;FFI拡張機能は、内部Ruby APIの変更に影響されません。&lt;/h2&gt;

&lt;p&gt;FFI拡張機能は、内部Ruby拡張APIの変更によって破損することはありません。&lt;br&gt;
```&lt;/p&gt;

&lt;h1&gt;
&lt;span id="一目でわかる機能" class="fragment"&gt;&lt;/span&gt;&lt;a href="#%E4%B8%80%E7%9B%AE%E3%81%A7%E3%82%8F%E3%81%8B%E3%82%8B%E6%A9%9F%E8%83%BD"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;一目でわかる機能&lt;/h1&gt;

&lt;h2&gt;
&lt;span id="現在サポートされている機能" class="fragment"&gt;&lt;/span&gt;&lt;a href="#%E7%8F%BE%E5%9C%A8%E3%82%B5%E3%83%9D%E3%83%BC%E3%83%88%E3%81%95%E3%82%8C%E3%81%A6%E3%81%84%E3%82%8B%E6%A9%9F%E8%83%BD"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;現在サポートされている機能&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;マルチプラットフォーム（例– Linux、 OSX 、Windows）&lt;/li&gt;
&lt;li&gt;マルチ実装（例– MRI 、JRuby、TruffleRuby、その他）&lt;/li&gt;
&lt;li&gt;ネストされた構造体、共用体、コールバック、および構造体フィールドメンバーとしての配列&lt;/li&gt;
&lt;li&gt;構造体と共用体は、値または参照によって受け渡しできます&lt;/li&gt;
&lt;li&gt;可変パラメータ&lt;/li&gt;
&lt;li&gt;列挙型&lt;/li&gt;
&lt;li&gt;コールバック&lt;/li&gt;
&lt;li&gt;ポインタ&lt;/li&gt;
&lt;li&gt;サポートされる多数のデータ型&lt;/li&gt;
&lt;li&gt;typedef&lt;/li&gt;
&lt;li&gt;グローバル変数 &lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
&lt;span id="サポートされていない機能" class="fragment"&gt;&lt;/span&gt;&lt;a href="#%E3%82%B5%E3%83%9D%E3%83%BC%E3%83%88%E3%81%95%E3%82%8C%E3%81%A6%E3%81%84%E3%81%AA%E3%81%84%E6%A9%9F%E8%83%BD"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;サポートされていない機能&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;構造体のビットフィールド&lt;/li&gt;
&lt;li&gt;Cスタック&lt;/li&gt;
&lt;li&gt;Cプリプロセッサ&lt;/li&gt;
&lt;li&gt;C ++とのインターフェース&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
&lt;span id="コアコンセプト" class="fragment"&gt;&lt;/span&gt;&lt;a href="#%E3%82%B3%E3%82%A2%E3%82%B3%E3%83%B3%E3%82%BB%E3%83%97%E3%83%88"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;コアコンセプト&lt;/h1&gt;

&lt;p&gt;FFIは、Rubyコードをネイティブライブラリと簡単にインターフェースするための素晴らしいツールです。 FFIを最大限に活用するために理解しておく必要がある基本的な概念のいくつかを以下に示します。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;全体的なアーキテクチャ&lt;/li&gt;
&lt;li&gt;コアコンポーネント&lt;/li&gt;
&lt;li&gt;メモリ管理&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
&lt;span id="全体的なアーキテクチャ" class="fragment"&gt;&lt;/span&gt;&lt;a href="#%E5%85%A8%E4%BD%93%E7%9A%84%E3%81%AA%E3%82%A2%E3%83%BC%E3%82%AD%E3%83%86%E3%82%AF%E3%83%81%E3%83%A3"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;全体的なアーキテクチャ&lt;/h2&gt;

&lt;p&gt;FFIを使用すると、ネイティブコードを1行も記述せずに、Rubyのネイティブライブラリを使用できます。 親友のFFIが、Rubyのクロス実装（MRI、JRuby、Rubinius、MacRubyなど）とプラットフォーム固有の問題をすべて処理して、Rubyコードの記述とテストに集中できるようにします。&lt;/p&gt;

&lt;p&gt;これは素晴らしいことですが、何か不足していることがわかっているだけです。 あなたのスパイダーセンスは正しいです。&lt;/p&gt;

&lt;p&gt;FFIは事実上、Ruby実装の複数の世界と複数のプラットフォームタイプの間の架け橋であるため、すべての要素をまとめようとすると、認識の不協和音が発生する可能性があります。 Rubyで開発する場合、私たちはより高いレベルで考える傾向があり、より低いレベルの問題にあまり関心を持ちません。&lt;/p&gt;

&lt;p&gt;FFIを使用すると、Rubyにしっかりと根を下ろすことができますが、より低いレベルで考え始める必要もあります。&lt;/p&gt;

&lt;h2&gt;
&lt;span id="コアコンポーネント" class="fragment"&gt;&lt;/span&gt;&lt;a href="#%E3%82%B3%E3%82%A2%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;コアコンポーネント&lt;/h2&gt;

&lt;p&gt;FFIにはいくつかの便利なコンポーネントがあります。 FFIのコンポーネントと機能を理解するために時間を費やすことは、FFIの使用を開始するときに効果があります。そうは言っても、どのコンポーネントを最初に見るべきかを理解しておくのは良いことです。 次のコアモジュールとクラスを理解することは、FFIの機能を会得するための優れた方法です。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;FFI::Library&lt;/code&gt; - &lt;code&gt;require 'ffi'&lt;/code&gt; とともに、このモジュールはFFIの強力なネイティブライブラリインターフェース機能をRubyコードにDSLとしてもたらします。 通常、これでカスタムモジュールを拡張し、ネイティブライブラリとその呼び出し規則を指定し、Rubyでネイティブライブラリの関数と構造体のプロトタイプを作成してから、RubyからネイティブライブラリのAPIの使用を開始します。&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;FFI::Pointer&lt;/code&gt; サードパーティライブラリによって割り当てられたネイティブメモリをラップします。 アンマネージネイティブメモリからRubyマネージネイティブメモリ（ &lt;code&gt;FFI::MemoryPointer&lt;/code&gt; ）にデータを転送するためのいくつかのメソッドを提供します。 このクラスによってラップされたネイティブメモリは、ガベージコレクションの実行中に解放されません。&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;FFI::MemoryPointer&lt;/code&gt; -Rubyコードでネイティブメモリを割り当て、それを非Rubyライブラリに渡すことができます。 ライフサイクル管理（割り当てと割り当て解除）はこのクラスによって処理されるため、ガベージコレクションが行われると、ネイティブメモリも解放されます。&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;FFI::Struct&lt;/code&gt; および &lt;code&gt;FFI::Union&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
&lt;span id="メモリ管理" class="fragment"&gt;&lt;/span&gt;&lt;a href="#%E3%83%A1%E3%83%A2%E3%83%AA%E7%AE%A1%E7%90%86"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;メモリ管理&lt;/h2&gt;

&lt;p&gt;Rubyコードを記述しているときは、通常、メモリ管理については考えていません。 ほとんどのユースケースで処理されます。 ただし、FFIを利用している場合は、Rubyで開発を続けている場合でも、これらの低レベルの問題についてもっと考え始める必要があります。&lt;/p&gt;

&lt;p&gt;Rubyには、オブジェクト参照とガベージコレクションの概念があります。対照的に、Cライブラリにはポインタがあり、メモリの手動割り当てと割り当て解除があります。したがって、ポインタによって参照されるメモリを提供するオブジェクトは、ポインタがライブラリによって使用されなくなるまで有効であることに注意する必要があります。したがって、これらのオブジェクトがRubyコードで使用されなくなった場合でも、これらのオブジェクトへの参照を保持する必要があります。&lt;/p&gt;

&lt;p&gt;:pointer、:string、:buffer_in、:buffer_outまたは:buffer_inout のいずれかを使用してルビー内の参照を維持することによってバックアップする必要があります。これは、関数の引数、FFI ::Structのポインター参照、および関数ポインター（コールバック）に当てはまります。言い換えると、RubyオブジェクトへのCレベルのポインターは、R​​ubyランタイムではオブジェクト参照とは見なされないため、オブジェクトがガベージコレクションされるのを防ぐには不十分です。&lt;/p&gt;

&lt;h2&gt;
&lt;span id="文字列のメモリ割り当て" class="fragment"&gt;&lt;/span&gt;&lt;a href="#%E6%96%87%E5%AD%97%E5%88%97%E3%81%AE%E3%83%A1%E3%83%A2%E3%83%AA%E5%89%B2%E3%82%8A%E5%BD%93%E3%81%A6"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;文字列のメモリ割り当て&lt;/h2&gt;

&lt;p&gt;このようなメモリ管理の考慮事項の1つは、文字列の内容の独自のコピーを作成するのではなく、Rubyで割り当てられた文字列への参照を保持するC関数と統合しようとするときに発生します。私たちが認めたいよりも頻繁に発生する次の偽装スニペットを取り上げます。&lt;/p&gt;

&lt;div class="code-frame" data-lang="c"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;my_name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;bad_set_my_name&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;my_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;このようにRubyにマッピングされます。&lt;/p&gt;

&lt;div class="code-frame" data-lang="ruby"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;Bar&lt;/span&gt;
  &lt;span class="n"&gt;attach_function&lt;/span&gt; &lt;span class="ss"&gt;:bad_set_my_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="ss"&gt;:string&lt;/span&gt; &lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="ss"&gt;:void&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;このコードはmy_name、Ruby文字列への参照が必要な間有効であると想定しています。したがって、C関数に渡されるruby Stringオブジェクトを変数に格納する必要があります。このオブジェクト&lt;code&gt;my_name&lt;/code&gt;は、使用されなくなるまで有効です。通常、これはRubyオブジェクトの定数またはインスタンス変数であり、ロードされたライブラリと同じ有効期間があります。Rubyオブジェクトが十分な長さの生存変数に格納されていない場合、によって保持されているメモリアドレス&lt;code&gt;my_name&lt;/code&gt;は文字列を指していません。&lt;/p&gt;

&lt;p&gt;これはC関数の安全な呼び出しです。&lt;/p&gt;

&lt;div class="code-frame" data-lang="ruby"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;Foo&lt;/span&gt;
  &lt;span class="no"&gt;NAME&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"Barney"&lt;/span&gt;
  &lt;span class="no"&gt;Bar&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;bad_set_my_name&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;NAME&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;渡される文字列にnullバイトが含まれている場合、または文字列データがC側またはRuby側で変更されている場合は、Ruby文字列をネイティブメモリにコピーする必要があります。次に、生の文字列を渡す代わりに、そのバッファへのポインタをC関数に渡し、最後に、元の&lt;code&gt;attach_function&lt;/code&gt; シグネチャーを更新し&lt;code&gt;:string&lt;/code&gt; ではなく &lt;code&gt;:pointer&lt;/code&gt;を使うようにします。例えば：&lt;/p&gt;

&lt;div class="code-frame" data-lang="ruby"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;# proper use of the bad C function from Ruby&lt;/span&gt;
&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;Foo&lt;/span&gt;
  &lt;span class="no"&gt;NAME&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;FFI&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;MemoryPointer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;from_string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Barney"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="no"&gt;Bar&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;bad_set_my_name&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;NAME&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="c1"&gt;# new Ruby mapping&lt;/span&gt;
&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;Bar&lt;/span&gt;
  &lt;span class="n"&gt;attach_function&lt;/span&gt; &lt;span class="ss"&gt;:bad_set_my_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="ss"&gt;:pointer&lt;/span&gt; &lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="ss"&gt;:void&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2&gt;
&lt;span id="malloc--freeの使用" class="fragment"&gt;&lt;/span&gt;&lt;a href="#malloc--free%E3%81%AE%E4%BD%BF%E7%94%A8"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;malloc / freeの使用&lt;/h2&gt;

&lt;p&gt;FFIライブラリは &lt;code&gt;FFI::MemoryPointer&lt;/code&gt;をヒープメモリを割り当てるために提供します。Rubyオブジェクトの有効期間と関係なくメモリを使用するには、&lt;code&gt;FFI::Pointer#autorelease&lt;/code&gt; をfalseに設定できます。その後C言語のように &lt;code&gt;malloc()&lt;/code&gt;を使用できます。したがって、Pointerオブジェクトがガベージコレクションされている場合でも、Rubyランタイムによってメモリが解放されることはありません。これは、メモリバッファを引数として取り、そのバッファのライフサイクルを管理することを期待するライブラリで必要になる場合があります。&lt;/p&gt;

&lt;div class="code-frame" data-lang="ruby"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;buffer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;FFI&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;MemoryPointer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;from_string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"content"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# Allocate 8 byte of memory to put string into plus zero termination&lt;/span&gt;
&lt;span class="n"&gt;buffer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;FFI&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;MemoryPointer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;                  &lt;span class="c1"&gt;# Alternatively allocate 8 byte of memory and fill with zeros&lt;/span&gt;
&lt;span class="n"&gt;buffer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;autorelease&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kp"&gt;false&lt;/span&gt;
&lt;span class="no"&gt;SomeLib&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;function_that_will_manage_buffer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;buffer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;ライブラリで使用されなくなったときに&lt;code&gt;FFI::Pointer#free&lt;/code&gt; を呼び出してバッファを手動で解放することは引き続き可能です。&lt;/p&gt;

&lt;h1&gt;
&lt;span id="基本的な使用法" class="fragment"&gt;&lt;/span&gt;&lt;a href="#%E5%9F%BA%E6%9C%AC%E7%9A%84%E3%81%AA%E4%BD%BF%E7%94%A8%E6%B3%95"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;基本的な使用法&lt;/h1&gt;

&lt;p&gt;Rubyプログラムは、FFIメカニズムを介してネイティブCライブラリ関数を簡単に呼び出すことができるようになりました。&lt;/p&gt;

&lt;h2&gt;
&lt;span id="基本-ffiとattach_functionが必要です" class="fragment"&gt;&lt;/span&gt;&lt;a href="#%E5%9F%BA%E6%9C%AC-ffi%E3%81%A8attach_function%E3%81%8C%E5%BF%85%E8%A6%81%E3%81%A7%E3%81%99"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;基本： 'ffi'とattach_functionが必要です&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;require 'ffi'&lt;/code&gt; ディレクティブはFFIライブラリをロードして初期化します。 次に、ネイティブ関数をアタッチするモジュールで &lt;code&gt;extend FFI::Library&lt;/code&gt; を使用します。最後に、 &lt;code&gt;attach_function&lt;/code&gt; を使用して、ネイティブC関数をモジュールにリンクします。&lt;/p&gt;

&lt;h2&gt;
&lt;span id="hello-world" class="fragment"&gt;&lt;/span&gt;&lt;a href="#hello-world"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;Hello, World&lt;/h2&gt;

&lt;div class="code-frame" data-lang="ruby"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;'ffi'&lt;/span&gt;

&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;Hello&lt;/span&gt;
  &lt;span class="kp"&gt;extend&lt;/span&gt; &lt;span class="no"&gt;FFI&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Library&lt;/span&gt;
  &lt;span class="n"&gt;ffi_lib&lt;/span&gt; &lt;span class="no"&gt;FFI&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Library&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;LIBC&lt;/span&gt;
  &lt;span class="n"&gt;attach_function&lt;/span&gt; &lt;span class="ss"&gt;:puts&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="ss"&gt;:string&lt;/span&gt; &lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="ss"&gt;:int&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="no"&gt;Hello&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;puts&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Hello, World"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;上記の興味深い部分は &lt;code&gt;attach_function&lt;/code&gt; 呼び出しです。&lt;code&gt;:string&lt;/code&gt; 引数を取り、&lt;code&gt;:int&lt;/code&gt; を返す &lt;code&gt;puts&lt;/code&gt; という名前のC関数をHelloモジュールにアタッチするように要求します。&lt;/p&gt;

&lt;p&gt;この&lt;code&gt;attach_function&lt;/code&gt;メソッドは、特定の外部ライブラリ（例ではlibc）にC関数を配置します。これを使用するには、ロードする関数の名前、関数が取るパラメーターの型、および関数の戻り値の型を指定する必要があります。&lt;/p&gt;

&lt;p&gt;長時間実行されるC関数は、次の例のように&lt;code&gt;blocking: true&lt;/code&gt;を追加してattach_functionをして、ブロッキング関数として宣言する必要があります。&lt;code&gt;blocking: true&lt;/code&gt; の影響については、コールバックの章を参照してください。&lt;/p&gt;

&lt;h2&gt;
&lt;span id="hello-windows" class="fragment"&gt;&lt;/span&gt;&lt;a href="#hello-windows"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;Hello, Windows&lt;/h2&gt;

&lt;div class="code-frame" data-lang="ruby"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;'ffi'&lt;/span&gt;

&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;HelloWin&lt;/span&gt;
  &lt;span class="kp"&gt;extend&lt;/span&gt; &lt;span class="no"&gt;FFI&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Library&lt;/span&gt;

  &lt;span class="n"&gt;ffi_lib&lt;/span&gt; &lt;span class="s1"&gt;'user32'&lt;/span&gt;
  &lt;span class="n"&gt;ffi_convention&lt;/span&gt; &lt;span class="ss"&gt;:stdcall&lt;/span&gt;

  &lt;span class="n"&gt;attach_function&lt;/span&gt; &lt;span class="ss"&gt;:message_box&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:MessageBoxA&lt;/span&gt;&lt;span class="p"&gt;,[&lt;/span&gt; &lt;span class="ss"&gt;:pointer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:uint&lt;/span&gt; &lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="ss"&gt;:int&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="n"&gt;rc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;HelloWin&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;message_box&lt;/span&gt; &lt;span class="kp"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'Hello Windows!'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'FFI on Windows'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"Return code: &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;rc&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; 
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Windows APIの使用は、前の例とほとんど同じくらい簡単です。 通常、&lt;code&gt;ffi_lib&lt;/code&gt; メソッドを介して検索するWindowsライブラリをFFIに通知し、Windows APIで使用されるstdcall規則を使用するようFFIに通知する必要があります。&lt;code&gt;ffi_convention&lt;/code&gt; メソッドは、使用する呼び出し規約をFFIに &lt;code&gt;ffi_convention&lt;/code&gt; します。&lt;/p&gt;

&lt;p&gt;また、正しい名前の関数をRubyモジュールに確実にアタッチする必要があります。 文字列引数を取るすべての関数に対して、Windows APIは、ASCIIまたはUnicodeを示す接尾辞付きの関数名に展開される「短縮名」マクロを提供します。 ANSIバージョンには「A」という接尾辞が付き、Unicodeバージョンには「W」という接尾辞が付きます。&lt;/p&gt;

&lt;h2&gt;
&lt;span id="パラメータと戻り値の型" class="fragment"&gt;&lt;/span&gt;&lt;a href="#%E3%83%91%E3%83%A9%E3%83%A1%E3%83%BC%E3%82%BF%E3%81%A8%E6%88%BB%E3%82%8A%E5%80%A4%E3%81%AE%E5%9E%8B"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;パラメータと戻り値の型&lt;/h2&gt;

&lt;p&gt;以下に、FFIがサポートするタイプのリストの一部を示します。 より包括的なリストについては、 タイプのページをご覧ください。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;:char&lt;/code&gt; および &lt;code&gt;:uchar&lt;/code&gt; -8ビットの符号付きおよび符号なしの値&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;:short&lt;/code&gt; および &lt;code&gt;:ushort&lt;/code&gt; -16ビットの符号付きおよび符号なしの値&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;:int&lt;/code&gt; および &lt;code&gt;:uint&lt;/code&gt; -32ビットの符号付きおよび符号なしの値&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;:long_long&lt;/code&gt; および &lt;code&gt;:ulong_long&lt;/code&gt; -64ビットの符号付きおよび符号なしの値&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;:long&lt;/code&gt; および &lt;code&gt;:ulong&lt;/code&gt; ネイティブCPUワード（32ビットまたは64ビット）の符号付きおよび符号なしの値。 Cの「long」型と同等です。&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;:float&lt;/code&gt; および &lt;code&gt;:double&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;:string&lt;/code&gt; -C文字列、NULLで終了。&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;:pointer&lt;/code&gt; -Cポインター&lt;/li&gt;
&lt;li&gt;値による構造体-&amp;gt;構造体の章を参照&lt;/li&gt;
&lt;li&gt;ポインタによる構造体-&amp;gt;構造体の章を参照&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;関数の結果のFFIラッパーコードは次のようになります。&lt;/p&gt;

&lt;div class="code-frame" data-lang="ruby"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;WHAT&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;FFI&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Struct&lt;/span&gt;
  &lt;span class="n"&gt;layout&lt;/span&gt; &lt;span class="ss"&gt;:d&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:int&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="n"&gt;attach_function&lt;/span&gt; &lt;span class="s1"&gt;'doit'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="no"&gt;WHAT&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;by_value&lt;/span&gt; &lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="ss"&gt;:int&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1&gt;
&lt;span id="例" class="fragment"&gt;&lt;/span&gt;&lt;a href="#%E4%BE%8B"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;例&lt;/h1&gt;

&lt;p&gt;このページには、Ruby-FFIの実際の使用例が含まれています。 一般的には、Cコードを呼び出すためのRubyコードとともに、Cインターフェイスを表示します。&lt;/p&gt;

&lt;p&gt;リポジトリには他にもいくつかの例があります 。 &lt;/p&gt;

&lt;h2&gt;
&lt;span id="一般的な使用法" class="fragment"&gt;&lt;/span&gt;&lt;a href="#%E4%B8%80%E8%88%AC%E7%9A%84%E3%81%AA%E4%BD%BF%E7%94%A8%E6%B3%95"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;一般的な使用法&lt;/h2&gt;

&lt;p&gt;次のようなCライブラリインターフェイスを想像してみましょう。&lt;/p&gt;

&lt;p&gt;Cインターフェース：&lt;/p&gt;

&lt;div class="code-frame" data-lang="c"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cm"&gt;/* mylibrary.h */&lt;/span&gt;
&lt;span class="kt"&gt;double&lt;/span&gt;               &lt;span class="nf"&gt;calculate_something&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt;                  &lt;span class="nf"&gt;error_code&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;SomeObject&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;   &lt;span class="nf"&gt;create_object&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kt"&gt;double&lt;/span&gt;               &lt;span class="nf"&gt;calculate_something_else&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;SomeObject&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kt"&gt;void&lt;/span&gt;                 &lt;span class="nf"&gt;free_object&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;pointer_to_memory&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;可能なCアプリケーションは、次のようにこのライブラリを使用する可能性があります。&lt;/p&gt;

&lt;div class="code-frame" data-lang="c"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;#include "mylibrary.h"
&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;errcode&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;SomeObject&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;objptr&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;calculate_something&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;98&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;errcode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;error_code&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;fprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stderr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"error calculating something: %d&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;errcode&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="n"&gt;objptr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;create_object&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"my object"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;calculate_something_else&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;objptr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;free_object&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;objptr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt;  

  &lt;span class="n"&gt;fprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"calculated %f&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="n"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;このコードは、SomeObjectのデータメンバーにはアクセスせず、不透明なオブジェクトとして扱います。つまり、アプリケーションが他のAPI呼び出しに渡すメモリブロックへのポインターですが、直接操作はしません。&lt;/p&gt;

&lt;p&gt;次に、ライブラリコードをRuby FFIラッパーにアタッチします。&lt;/p&gt;

&lt;div class="code-frame" data-lang="ruby"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;# mylibrary.rb&lt;/span&gt;
&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;MyLibrary&lt;/span&gt;
  &lt;span class="kp"&gt;extend&lt;/span&gt; &lt;span class="no"&gt;FFI&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Library&lt;/span&gt;
  &lt;span class="n"&gt;ffi_lib&lt;/span&gt; &lt;span class="s2"&gt;"path/to/mylibrary.so"&lt;/span&gt;
  &lt;span class="n"&gt;attach_function&lt;/span&gt; &lt;span class="ss"&gt;:calculate_something&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:float&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="ss"&gt;:double&lt;/span&gt;
  &lt;span class="n"&gt;attach_function&lt;/span&gt; &lt;span class="ss"&gt;:error_code&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt; &lt;span class="ss"&gt;:int&lt;/span&gt; &lt;span class="c1"&gt;# note empty array for functions taking zero arguments&lt;/span&gt;
  &lt;span class="n"&gt;attach_function&lt;/span&gt; &lt;span class="ss"&gt;:create_object&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:string&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="ss"&gt;:pointer&lt;/span&gt;
  &lt;span class="n"&gt;attach_function&lt;/span&gt; &lt;span class="ss"&gt;:calculate_something_else&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:double&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:pointer&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="ss"&gt;:double&lt;/span&gt;
  &lt;span class="n"&gt;attach_function&lt;/span&gt; &lt;span class="ss"&gt;:free_object&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:pointer&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="ss"&gt;:void&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;そして、同じアプリケーションロジックですが、今回はRubyです。 &lt;/p&gt;

&lt;div class="code-frame" data-lang="ruby"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;'ffi'&lt;/span&gt;
&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;'mylibrary'&lt;/span&gt;

&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;MyLibrary&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;calculate_something&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;98.6&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# note FFI handles literals just fine&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;errcode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;MyLibrary&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;error_code&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"error calculating something: &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;errcode&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
  &lt;span class="nb"&gt;exit&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="n"&gt;objptr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;MyLibrary&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;create_object&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"my object"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# note FFI handles string literals as well&lt;/span&gt;
&lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;MyLibrary&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;calculate_something_else&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;objptr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="no"&gt;MyLibrary&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;free_object&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;objptr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"calculated &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2&gt;
&lt;span id="null値に関する注意" class="fragment"&gt;&lt;/span&gt;&lt;a href="#null%E5%80%A4%E3%81%AB%E9%96%A2%E3%81%99%E3%82%8B%E6%B3%A8%E6%84%8F"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;NULL値に関する注意&lt;/h2&gt;

&lt;p&gt;次のように、 &lt;code&gt;nil&lt;/code&gt;を渡すことでNULLポインタを渡すことができることに注意してください。&lt;/p&gt;

&lt;p&gt;Cコード：&lt;/p&gt;

&lt;div class="code-frame" data-lang="c"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;calculate_something_else&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Rubyコード：&lt;/p&gt;

&lt;div class="code-frame" data-lang="ruby"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;MyLibrary&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;calculate_something_else&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;14.2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kp"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2&gt;
&lt;span id="memorypointerを使用した出力パラメーター" class="fragment"&gt;&lt;/span&gt;&lt;a href="#memorypointer%E3%82%92%E4%BD%BF%E7%94%A8%E3%81%97%E3%81%9F%E5%87%BA%E5%8A%9B%E3%83%91%E3%83%A9%E3%83%A1%E3%83%BC%E3%82%BF%E3%83%BC"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;MemoryPointerを使用した出力パラメーター&lt;/h2&gt;

&lt;p&gt;これまで、非常に単純なC APIを見てきました。 ただし、ほとんどのC APIは少し複雑です。&lt;/p&gt;

&lt;p&gt;次の関数もMyLibraryインターフェイスの一部であるとしましょう。&lt;/p&gt;

&lt;div class="code-frame" data-lang="ruby"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="sr"&gt;/*
 *  find_first_match() looks for an object with name _name_ in the object cache.
 *  returns: the number of total matches,
 *           and sets the found_object pointer to the first SomeObject found
 */&lt;/span&gt;&lt;span class="err"&gt;
&lt;/span&gt;&lt;span class="sr"&gt;in&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="n"&gt;find_first_match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;char&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nb"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;struct&lt;/span&gt; &lt;span class="no"&gt;SomeObject&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="n"&gt;found_object&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;この関数は、 出力パラメータを持っているという点で異なります 。 使用方法については、次のCコードを参照してください。&lt;/p&gt;

&lt;div class="code-frame" data-lang="c"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;SomeObject&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;objptr&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;nfound&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="n"&gt;nfound&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;find_first_match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"jimbo"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;objptr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;calculate_something_else&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;objptr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;この関数は次のようにFFIを介して追加されます。&lt;/p&gt;

&lt;div class="code-frame" data-lang="ruby"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;attach_function&lt;/span&gt; &lt;span class="ss"&gt;:find_first_match&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:pointer&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="ss"&gt;:int&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;そして、これがRubyコードに変換された同じサンプル使用法です：&lt;/p&gt;

&lt;div class="code-frame" data-lang="ruby"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;objptr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;FFI&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;MemoryPointer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt; &lt;span class="ss"&gt;:pointer&lt;/span&gt;
&lt;span class="n"&gt;nfound&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;MyLibrary&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;find_first_match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"jimbo"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;objptr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;objptr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;objptr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;get_pointer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;calculate_something_else&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;11.2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;objptr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2&gt;
&lt;span id="出力パラメータとしての文字列" class="fragment"&gt;&lt;/span&gt;&lt;a href="#%E5%87%BA%E5%8A%9B%E3%83%91%E3%83%A9%E3%83%A1%E3%83%BC%E3%82%BF%E3%81%A8%E3%81%97%E3%81%A6%E3%81%AE%E6%96%87%E5%AD%97%E5%88%97"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;出力パラメータとしての文字列&lt;/h2&gt;

&lt;p&gt;出力パラメータの詳細：単一の文字列と文字列の配列を返すメソッドの例を次に示します。それらはAugeasライブラリのラッピングに基づいていました。&lt;/p&gt;

&lt;h2&gt;
&lt;span id="単一の文字列" class="fragment"&gt;&lt;/span&gt;&lt;a href="#%E5%8D%98%E4%B8%80%E3%81%AE%E6%96%87%E5%AD%97%E5%88%97"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;単一の文字列&lt;/h2&gt;

&lt;p&gt;次のメソッドを想定します。&lt;/p&gt;

&lt;div class="code-frame" data-lang="ruby"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;int&lt;/span&gt; &lt;span class="n"&gt;aug_get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;const&lt;/span&gt; &lt;span class="n"&gt;augeas&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;aug&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;const&lt;/span&gt; &lt;span class="n"&gt;char&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;const&lt;/span&gt; &lt;span class="n"&gt;char&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;getの値は3番目のパラメーターであり、戻り値は成功または失敗を示します。 関数は次のようにFFIを介して追加されます。&lt;/p&gt;

&lt;div class="code-frame" data-lang="ruby"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;AugeasLib&lt;/span&gt;
  &lt;span class="kp"&gt;extend&lt;/span&gt; &lt;span class="no"&gt;FFI&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Library&lt;/span&gt;
  &lt;span class="n"&gt;ffi_lib&lt;/span&gt; &lt;span class="s2"&gt;"libaugeas.so"&lt;/span&gt;
  &lt;span class="n"&gt;attach_function&lt;/span&gt; &lt;span class="ss"&gt;:aug_get&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:pointer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:pointer&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="ss"&gt;:int&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;そして、これの使用例は次のようになります：&lt;/p&gt;

&lt;div class="code-frame" data-lang="ruby"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;ptr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;FFI&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;MemoryPointer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:pointer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="no"&gt;AugeasLib&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;aug_get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vi"&gt;@aug&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ptr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;strPtr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ptr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;read_pointer&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;strPtr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;null?&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="kp"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;strPtr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;read_string&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code&gt;FFI::Pointer.read_string()&lt;/code&gt; は、使用される文字列エンコーディングを気にしません。適切なエンコーディングでルビ文字列を取得するには、&lt;code&gt;force_encoding(encoding)&lt;/code&gt; を呼び出す必要があります。 この使用例は次のとおりです。&lt;/p&gt;

&lt;div class="code-frame" data-lang="ruby"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;ptr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;FFI&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;MemoryPointer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:pointer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="no"&gt;AugeasLib&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;aug_get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vi"&gt;@aug&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ptr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;strPtr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ptr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;read_pointer&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;strPtr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;null?&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="kp"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;strPtr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;read_string&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nf"&gt;force_encoding&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'UTF-8'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# returns UTF-8 encoded string&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code&gt;*W&lt;/code&gt;ファミリーのwinapi関数では、&lt;code&gt;#read_bytes(len * 2)&lt;/code&gt;を使用する必要があります（ &lt;code&gt;#read_string&lt;/code&gt;は最初の&lt;code&gt;\x00&lt;/code&gt;で停止するため）。&lt;/p&gt;

&lt;h2&gt;
&lt;span id="文字列の配列" class="fragment"&gt;&lt;/span&gt;&lt;a href="#%E6%96%87%E5%AD%97%E5%88%97%E3%81%AE%E9%85%8D%E5%88%97"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;文字列の配列&lt;/h2&gt;

&lt;p&gt;次のメソッドを想定します。&lt;/p&gt;

&lt;div class="code-frame" data-lang="c"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;aug_match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;augeas&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;aug&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="o"&gt;***&lt;/span&gt; &lt;span class="n"&gt;matches&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;ここで、一致の値は3番目のパラメーターであり、戻り値は成功または失敗、および配列のサイズを示します。 関数は次のようにFFIを介して追加されます。&lt;/p&gt;

&lt;div class="code-frame" data-lang="ruby"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;AugeasLib&lt;/span&gt;
  &lt;span class="kp"&gt;extend&lt;/span&gt; &lt;span class="no"&gt;FFI&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Library&lt;/span&gt;
  &lt;span class="n"&gt;ffi_lib&lt;/span&gt; &lt;span class="s2"&gt;"libaugeas.so"&lt;/span&gt;
  &lt;span class="n"&gt;attach_function&lt;/span&gt; &lt;span class="ss"&gt;:aug_match&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:pointer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:pointer&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="ss"&gt;:int&lt;/span&gt; 
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;そして、これの使用例は次のようになります：&lt;/p&gt;

&lt;div class="code-frame" data-lang="ruby"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;ptr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;FFI&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;MemoryPointer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:pointer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;len&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;AugeasLib&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;aug_match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vi"&gt;@aug&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ptr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;len&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="no"&gt;SystemCallError&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Matching path expression '&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;' failed"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;else&lt;/span&gt;
    &lt;span class="n"&gt;strPtr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ptr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;read_pointer&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;strPtr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;null?&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;ptr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;get_array_of_string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;len&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;compact&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt; 
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2&gt;
&lt;span id="構造体" class="fragment"&gt;&lt;/span&gt;&lt;a href="#%E6%A7%8B%E9%80%A0%E4%BD%93"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;構造体&lt;/h2&gt;

&lt;p&gt;それでは、さらに進んでみましょう。Rubyオブジェクトを介してSomeObjectのデータメンバーにアクセスしましょう。&lt;/p&gt;

&lt;div class="code-frame" data-lang="c"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cm"&gt;/* my_library.h */&lt;/span&gt;

&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;SomeObject&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;SomeObject&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kt"&gt;char&lt;/span&gt;              &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kt"&gt;double&lt;/span&gt;             &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class="code-frame" data-lang="c"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;SomeObject&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;objptr1&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;SomeObject&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;objptr2&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="n"&gt;objptr1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;create_object&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"foobar"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"%s&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;objptr1&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// =&amp;gt; 'foobar'&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;nfound&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;find_first_match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"foobar"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;objptr2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"%s&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;objptr2&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// =&amp;gt; 'foobar'&lt;/span&gt;

&lt;span class="n"&gt;free_object&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;objptr1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;この構造体をミラーリングするRubyオブジェクトを作成する方法は次のとおりです。&lt;/p&gt;

&lt;p&gt;（注：レイアウトオフセット計算を自動化する方法については、 自動構造レイアウトを参照してください。）&lt;/p&gt;

&lt;div class="code-frame" data-lang="ruby"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;MyLibrary&lt;/span&gt;
  &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;SomeObject&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;FFI&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Struct&lt;/span&gt;
    &lt;span class="n"&gt;layout&lt;/span&gt; &lt;span class="ss"&gt;:next&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="ss"&gt;:pointer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
           &lt;span class="ss"&gt;:name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="ss"&gt;:string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
           &lt;span class="ss"&gt;:value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:double&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;そして、これがアプリケーションコードです：&lt;/p&gt;

&lt;div class="code-frame" data-lang="ruby"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;obj_ptr2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;FFI&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;MemoryPointer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt; &lt;span class="ss"&gt;:pointer&lt;/span&gt;

&lt;span class="n"&gt;obj_ptr1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;MyLibrary&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;create_object&lt;/span&gt; &lt;span class="s2"&gt;"foobar"&lt;/span&gt;
&lt;span class="n"&gt;obj1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;MyLibrary&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;SomeObject&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;obj_ptr1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# wrap ruby object around C pointer&lt;/span&gt;
&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;obj1&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:name&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;# =&amp;gt; 'foobar'&lt;/span&gt;

&lt;span class="n"&gt;nfound&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;MyLibrary&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;find_first_match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"foobar"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;obj_ptr2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;obj2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;MyLibrary&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;SomeObject&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;obj_ptr2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;read_pointer&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="c1"&gt;# wrap ruby object around C pointer&lt;/span&gt;
&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;obj2&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:name&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;# =&amp;gt; 'foobar'&lt;/span&gt;

&lt;span class="no"&gt;MyLibrary&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;free_object&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;obj1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;pointer&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;# equivalent to free_object(obj_ptr1)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2&gt;
&lt;span id="カスタムメモリ管理" class="fragment"&gt;&lt;/span&gt;&lt;a href="#%E3%82%AB%E3%82%B9%E3%82%BF%E3%83%A0%E3%83%A1%E3%83%A2%E3%83%AA%E7%AE%A1%E7%90%86"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;カスタムメモリ管理&lt;/h2&gt;

&lt;p&gt;C構造体データメンバーにアクセスする本格的なRubyオブジェクトができたので、&lt;code&gt;SomeObject&lt;/code&gt; を作成するたびに &lt;code&gt;free_object&lt;/code&gt; を呼び出す必要がないと便利ではないでしょうか。&lt;/p&gt;

&lt;p&gt;できます！ &lt;code&gt;FFI::Struct&lt;/code&gt; ではなく &lt;code&gt;FFI::ManagedStruct&lt;/code&gt; から継承し、&lt;code&gt;release()&lt;/code&gt; クラスメソッドを定義します。&lt;/p&gt;

&lt;div class="code-frame" data-lang="ruby"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;MyLibrary&lt;/span&gt;
  &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;SomeObject&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;FFI&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;ManagedStruct&lt;/span&gt;
    &lt;span class="n"&gt;layout&lt;/span&gt; &lt;span class="ss"&gt;:next&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="ss"&gt;:pointer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
           &lt;span class="ss"&gt;:name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="ss"&gt;:string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
           &lt;span class="ss"&gt;:value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:double&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nc"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;release&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ptr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="no"&gt;MyLibrary&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;free_object&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ptr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;はい、それはとても簡単です。 これで、前のセクションのコードは次のようになります。&lt;/p&gt;

&lt;div class="code-frame" data-lang="ruby"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;begin&lt;/span&gt;
  &lt;span class="n"&gt;obj_ptr1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;MyLibrary&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;create_object&lt;/span&gt; &lt;span class="s2"&gt;"foobar"&lt;/span&gt;
  &lt;span class="n"&gt;obj1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;MyLibrary&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;SomeObject&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;obj_ptr1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# wrap ruby object around C pointer&lt;/span&gt;
  &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;obj1&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:name&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;# =&amp;gt; 'foobar'&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="c1"&gt;# obj1 is now out-of-scope, and when it is GC'd,&lt;/span&gt;
&lt;span class="c1"&gt;# the SomeObject#release() method will be invoked with obj1 as its argument, allowing it to free the C struct's memory.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;ネイティブ要素（intなど）のみで作成された構造体の場合、構造体自体がGC時に自動的にクリーンアップされるため、クリーンアップメソッドが不要ない場合があります。 上記の例では、構造体がメモリリークを回避するためにクリーンアップする必要があるポインタを参照しているため、クリーンアップメソッドが必要です。&lt;/p&gt;

&lt;p&gt;通常の構造体と「メモリ管理」の両方で、必要に応じて明示的に#freeを呼び出すことができます。&lt;/p&gt;

&lt;h2&gt;
&lt;span id="警告型キャストが必要な場合はmanagedstructを使用しないでください" class="fragment"&gt;&lt;/span&gt;&lt;a href="#%E8%AD%A6%E5%91%8A%E5%9E%8B%E3%82%AD%E3%83%A3%E3%82%B9%E3%83%88%E3%81%8C%E5%BF%85%E8%A6%81%E3%81%AA%E5%A0%B4%E5%90%88%E3%81%AFmanagedstruct%E3%82%92%E4%BD%BF%E7%94%A8%E3%81%97%E3%81%AA%E3%81%84%E3%81%A7%E3%81%8F%E3%81%A0%E3%81%95%E3%81%84"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;警告：型キャストが必要な場合はManagedStructを使用しないでください&lt;/h2&gt;

&lt;p&gt;FFI::ManagedStructを使用する際に潜在的な落とし穴があります。つまり、必ずしも実際に基礎となるメモリを解放したくない場合があるということです。 たとえば、この場合、基礎となるメモリを解放したくありません。&lt;/p&gt;

&lt;div class="code-frame" data-lang="ruby"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;obj_ptr2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;FFI&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;MemoryPointer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt; &lt;span class="ss"&gt;:pointer&lt;/span&gt;
&lt;span class="n"&gt;nfound&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;MyLibrary&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;find_first_match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"foobar"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;obj_ptr2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;obj2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;MyLibrary&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;SomeObject&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;obj_ptr2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# wrap ruby object around C pointer&lt;/span&gt;
&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;obj2&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:name&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;# =&amp;gt; 'foobar'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;ただし、&lt;code&gt;obj2&lt;/code&gt; がスコープ外になるとすぐに、find_first_match（）キャッシュにまだポインタがあり、セグメンテーション違反とFAILが発生する可能性があるにもかかわらず、その基になるメモリは「解放」されます。それは良くないね。&lt;/p&gt;

&lt;p&gt;オブジェクトの存続期間を管理するためにManagedStructから継承されたRubyクラスと、ポインターの型キャストに使用されるStructから継承された2つのRubyクラスを定義すると便利であることがわかりました。&lt;/p&gt;

&lt;p&gt;これの例は次のとおりです。&lt;/p&gt;

&lt;div class="code-frame" data-lang="ruby"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;MyLibrary&lt;/span&gt;
  &lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;SomeObjectLayout&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nc"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;included&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;base&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="n"&gt;base&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;class_eval&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
        &lt;span class="n"&gt;layout&lt;/span&gt; &lt;span class="ss"&gt;:next&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="ss"&gt;:pointer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
               &lt;span class="ss"&gt;:name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="ss"&gt;:string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
               &lt;span class="ss"&gt;:value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:double&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
      &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;SomeObject&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;FFI&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;ManagedStruct&lt;/span&gt;
    &lt;span class="kp"&gt;include&lt;/span&gt; &lt;span class="no"&gt;SomeObjectLayout&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nc"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;release&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ptr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="no"&gt;MyLibrary&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;free_object&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ptr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;SomeObjectCast&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;FFI&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Struct&lt;/span&gt;
    &lt;span class="kp"&gt;include&lt;/span&gt; &lt;span class="no"&gt;SomeObjectLayout&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;そして、ここにいくつかの使用例があります：&lt;/p&gt;

&lt;div class="code-frame" data-lang="ruby"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;begin&lt;/span&gt;
  &lt;span class="n"&gt;obj_ptr1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;MyLibrary&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;create_object&lt;/span&gt; &lt;span class="s2"&gt;"foobar"&lt;/span&gt;
  &lt;span class="n"&gt;obj1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;MyLibrary&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;SomeObject&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;obj_ptr1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# NOTE use of managed struct class&lt;/span&gt;
  &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;obj1&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:name&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;# =&amp;gt; 'foobar'&lt;/span&gt;

  &lt;span class="n"&gt;obj_ptr2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;FFI&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;MemoryPointer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt; &lt;span class="ss"&gt;:pointer&lt;/span&gt;
  &lt;span class="n"&gt;nfound&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;MyLibrary&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;find_first_match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"foobar"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;obj_ptr2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;obj2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;MyLibrary&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;SomeObjectCast&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;obj_ptr2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# NOTE: use of typecast class&lt;/span&gt;
  &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;obj2&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:name&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;# =&amp;gt; 'foobar'&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="c1"&gt;# obj1 and obj2 are now both out-of-scope. however, free_object() will&lt;/span&gt;
&lt;span class="c1"&gt;# only be invoked once, for obj1.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2&gt;
&lt;span id="コールバック" class="fragment"&gt;&lt;/span&gt;&lt;a href="#%E3%82%B3%E3%83%BC%E3%83%AB%E3%83%90%E3%83%83%E3%82%AF"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;コールバック&lt;/h2&gt;

&lt;p&gt;多くのAPIは、関数ポインターを使用して、後で呼び出される関数である「コールバック」を管理します。 Rubyライブラリは通常、Procsまたはラムダ（ここでは「 ''クロージャー ''」と呼びましょう）を使用します。FFIを使用すると、クロージャーをC関数のコールバックにマップできます。 いいね！&lt;/p&gt;

&lt;p&gt;ここでも、C APIです。&lt;/p&gt;

&lt;div class="code-frame" data-lang="ruby"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="sr"&gt;/*
 *  notifyWhenObjectWaggles callback:
 *    waggled: the object that just waggled
 *    waggle_size: how much the object waggled
 *  should return:
 *    non-zero integer to continue waggling, zero to cease waggling
 */&lt;/span&gt;&lt;span class="err"&gt;
typ&lt;/span&gt;&lt;span class="sr"&gt;e&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;int&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;notifyWhenObjectWaggles&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="n"&gt;struct&lt;/span&gt; &lt;span class="no"&gt;SomeObject&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;waggled&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;int&lt;/span&gt; &lt;span class="n"&gt;waggle_size&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;void&lt;/span&gt; &lt;span class="n"&gt;set_object_waggle_callback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;struct&lt;/span&gt; &lt;span class="no"&gt;SomeObject&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;waggler&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;notifywhenObjectWaggles&lt;/span&gt; &lt;span class="n"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Cでの使用方法は次のとおりです。&lt;/p&gt;

&lt;div class="code-frame" data-lang="c"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;waggle_callback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;SomeObject&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;waggled&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;waggle_size&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"object %s just waggled %d&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;waggled&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;waggle_size&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;waggle_size&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="o"&gt;?&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="p"&gt;...&lt;/span&gt;

  &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;SomeObject&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;create_object&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"foobar"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="n"&gt;set_object_waggle_callback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;waggle_callback&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;同等のRuby宣言は次のとおりです。&lt;/p&gt;

&lt;div class="code-frame" data-lang="ruby"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;MyLibrary&lt;/span&gt;
  &lt;span class="o"&gt;...&lt;/span&gt; &lt;span class="c1"&gt;# same as before&lt;/span&gt;

  &lt;span class="c1"&gt;#  declare the callback type (the callback's function signature)&lt;/span&gt;
  &lt;span class="n"&gt;callback&lt;/span&gt; &lt;span class="ss"&gt;:object_waggled_callback&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:pointer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:int&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="ss"&gt;:int&lt;/span&gt;

  &lt;span class="c1"&gt;#  declare the function signature that takes the callback as a param.&lt;/span&gt;
  &lt;span class="c1"&gt;#  note we use the callback type just like any builtin type here.&lt;/span&gt;
  &lt;span class="n"&gt;attach_function&lt;/span&gt; &lt;span class="ss"&gt;:set_object_waggle_callback&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:pointer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:object_waggled_callback&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="ss"&gt;:void&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;そして最後に、動作中のコールバック：&lt;/p&gt;

&lt;div class="code-frame" data-lang="ruby"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;#&lt;/span&gt;
&lt;span class="c1"&gt;#  it's a good policy to assign closures to a constant.&lt;/span&gt;
&lt;span class="c1"&gt;#  more on this below.&lt;/span&gt;
&lt;span class="c1"&gt;#&lt;/span&gt;
&lt;span class="no"&gt;MyLibrary&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;WaggleCallback&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Proc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;waggled_ptr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;waggle_size&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
  &lt;span class="n"&gt;waggled&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;MyLibrary&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;SomeObjectCast&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt; &lt;span class="n"&gt;waggled_ptr&lt;/span&gt; &lt;span class="c1"&gt;# note we use the typecast flavor&lt;/span&gt;
  &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"object &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;waggled&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:name&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; just waggled &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;waggle_size&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
  &lt;span class="n"&gt;waggle_size&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="n"&gt;obj_ptr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;FFI&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;MemoryPointer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt; &lt;span class="ss"&gt;:pointer&lt;/span&gt;
&lt;span class="n"&gt;obj_ptr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;create_object&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"foobar"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;MyLibrary&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;SomeObject&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt; &lt;span class="n"&gt;obj_ptr&lt;/span&gt;
&lt;span class="n"&gt;set_object_waggle_callback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;pointer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;MyLibrary&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;WaggleCallback&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2&gt;
&lt;span id="警告プロシージャがgcされないように注意してください" class="fragment"&gt;&lt;/span&gt;&lt;a href="#%E8%AD%A6%E5%91%8A%E3%83%97%E3%83%AD%E3%82%B7%E3%83%BC%E3%82%B8%E3%83%A3%E3%81%8Cgc%E3%81%95%E3%82%8C%E3%81%AA%E3%81%84%E3%82%88%E3%81%86%E3%81%AB%E6%B3%A8%E6%84%8F%E3%81%97%E3%81%A6%E3%81%8F%E3%81%A0%E3%81%95%E3%81%84"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;警告：プロシージャがGCされないように注意してください&lt;/h2&gt;

&lt;p&gt;上記の例が次のように記述されているとしましょう。&lt;/p&gt;

&lt;div class="code-frame" data-lang="ruby"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;begin&lt;/span&gt;
  &lt;span class="nb"&gt;proc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Proc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;waggled_ptr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;waggle_size&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
    &lt;span class="n"&gt;waggled&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;MyLibrary&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;SomeObjectCast&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt; &lt;span class="n"&gt;waggled_ptr&lt;/span&gt; &lt;span class="c1"&gt;# note we use the typecast flavor&lt;/span&gt;
    &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"object &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;waggled&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:name&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; just waggled &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;waggle_size&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
    &lt;span class="n"&gt;waggle_size&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="n"&gt;set_object_waggle_callback&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;pointer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;proc&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;ブロックの最後では、 procはスコープ外であり、ガベージコレクションされる可能性があります。 これはアプリケーションにとって本当に悪いことです。オブジェクトが揺れるとすぐに、Cライブラリはprocオブジェクトを指し示さなくなったポインターを逆参照するからです。&lt;/p&gt;

&lt;p&gt;クロージャがアクティブな間は、クロージャが範囲外にならないように注意する必要があります。&lt;/p&gt;

&lt;p&gt;これを保証する最も簡単な方法は、procを定数に割り当てることです。定数はスコープから外れることはありません。 これは、上記の例で行われたことです。 &lt;/p&gt;

&lt;h2&gt;
&lt;span id="varargsの使用" class="fragment"&gt;&lt;/span&gt;&lt;a href="#varargs%E3%81%AE%E4%BD%BF%E7%94%A8"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;:varargsの使用&lt;/h2&gt;

&lt;p&gt;これが例です&lt;/p&gt;

&lt;div class="code-frame" data-lang="ruby"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;'ffi'&lt;/span&gt;

&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;Hello&lt;/span&gt;
  &lt;span class="kp"&gt;extend&lt;/span&gt; &lt;span class="no"&gt;FFI&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Library&lt;/span&gt;
  &lt;span class="n"&gt;attach_function&lt;/span&gt; &lt;span class="s1"&gt;'printf'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:varargs&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="ss"&gt;:int&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;times&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;  &lt;span class="no"&gt;Hello&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"cputs %s %d %x"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"yoyo"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;33&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;34&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt; &lt;span class="c1"&gt;# each one needs its own specifier of which type it is&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2&gt;
&lt;span id="typedefの使用" class="fragment"&gt;&lt;/span&gt;&lt;a href="#typedef%E3%81%AE%E4%BD%BF%E7%94%A8"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;typedefの使用&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;typedef current, new&lt;/code&gt;を使用して、型の「エイリアス」を定義できます。エイリアスが定義されると、それを構造体または関数の定義で使用できます。これにより、これらの定義をより説明的で意味のあるものにしたり、プラットフォームの違いに対処しやすくしたりできます。不自然な例を次に示します。&lt;/p&gt;

&lt;div class="code-frame" data-lang="ruby"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;MyLibrary&lt;/span&gt;
  &lt;span class="kp"&gt;extend&lt;/span&gt; &lt;span class="no"&gt;FFI&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Library&lt;/span&gt;

  &lt;span class="n"&gt;typedef&lt;/span&gt; &lt;span class="ss"&gt;:pointer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:id&lt;/span&gt;

  &lt;span class="c1"&gt;# Define :status as an alias for :long on Mac, or :int on other platforms.&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="no"&gt;FFI&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Platform&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;mac?&lt;/span&gt;
    &lt;span class="n"&gt;typedef&lt;/span&gt; &lt;span class="ss"&gt;:long&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:status&lt;/span&gt;
  &lt;span class="k"&gt;else&lt;/span&gt;
    &lt;span class="n"&gt;typedef&lt;/span&gt; &lt;span class="ss"&gt;:int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:status&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MyStruct&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;FFI&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Struct&lt;/span&gt;
    &lt;span class="n"&gt;layout&lt;/span&gt; &lt;span class="ss"&gt;:a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:status&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="n"&gt;attach_function&lt;/span&gt; &lt;span class="ss"&gt;:doSomething&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:int&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="ss"&gt;:status&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1&gt;
&lt;span id="windowsの例" class="fragment"&gt;&lt;/span&gt;&lt;a href="#windows%E3%81%AE%E4%BE%8B"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;Windowsの例&lt;/h1&gt;

&lt;p&gt;（注釈：ここの項目は2013年に執筆されており、内容が現在のWindowsに適応できるのか不透明なので割愛します。興味が有る場合は直接下記のリンクをご参照ください。）&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/ffi/ffi/wiki/Windows-Examples" class="autolink" rel="nofollow noopener" target="_blank"&gt;https://github.com/ffi/ffi/wiki/Windows-Examples&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
&lt;span id="ライブラリの読み込み" class="fragment"&gt;&lt;/span&gt;&lt;a href="#%E3%83%A9%E3%82%A4%E3%83%96%E3%83%A9%E3%83%AA%E3%81%AE%E8%AA%AD%E3%81%BF%E8%BE%BC%E3%81%BF"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;ライブラリの読み込み&lt;/h1&gt;

&lt;h2&gt;
&lt;span id="別名" class="fragment"&gt;&lt;/span&gt;&lt;a href="#%E5%88%A5%E5%90%8D"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;別名&lt;/h2&gt;

&lt;p&gt;代替ファイル名でライブラリをロードする場合：&lt;/p&gt;

&lt;div class="code-frame" data-lang="ruby"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;ffi_lib&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'foo'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'foo-1.2'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2&gt;
&lt;span id="linuxパッケージ" class="fragment"&gt;&lt;/span&gt;&lt;a href="#linux%E3%83%91%E3%83%83%E3%82%B1%E3%83%BC%E3%82%B8"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;Linuxパッケージ&lt;/h2&gt;

&lt;p&gt;DebianまたはRedHatベースのLinuxシステムにlibfooをインストールすると、libfoo.so.1はインストールされますが、libfoo.soはインストールされません。 Linuxパッケージメンテナは、libfoo.soファイルを開発パッケージ（Debianではlibfoo-dev、RedHatではlibfoo-devel）に入れます。 ユーザーがライブラリパッケージと開発パッケージの両方をインストールする必要がないようにするには：&lt;/p&gt;

&lt;div class="code-frame" data-lang="ruby"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;ffi_lib&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'foo'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'libfoo.so.1'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2&gt;
&lt;span id="インメモリライブラリ" class="fragment"&gt;&lt;/span&gt;&lt;a href="#%E3%82%A4%E3%83%B3%E3%83%A1%E3%83%A2%E3%83%AA%E3%83%A9%E3%82%A4%E3%83%96%E3%83%A9%E3%83%AA"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;インメモリライブラリ&lt;/h2&gt;

&lt;p&gt;バインドする必要のあるライブラリがすでにメモリにロードされている場合は、次を使用します&lt;code&gt;FFI::CURRENT_PROCESS&lt;/code&gt;。&lt;/p&gt;

&lt;div class="code-frame" data-lang="ruby"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;ffi_lib&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="no"&gt;FFI&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;CURRENT_PROCESS&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'c'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1&gt;
&lt;span id="機能の可視性" class="fragment"&gt;&lt;/span&gt;&lt;a href="#%E6%A9%9F%E8%83%BD%E3%81%AE%E5%8F%AF%E8%A6%96%E6%80%A7"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;機能の可視性&lt;/h1&gt;

&lt;p&gt;一部のライブラリは、グローバル名前空間に存在する関数に依存するようにコンパイルされています。これにより、関数をアタッチするときにFFIで問題が発生します。ただし、ライブラリをロードし、プロセス内ですべてのシンボルをグローバルに表示するようにFFIに指示することができます。&lt;/p&gt;

&lt;div class="code-frame" data-lang="ruby"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;ffi_lib_flags&lt;/span&gt; &lt;span class="ss"&gt;:now&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:global&lt;/span&gt;
&lt;span class="n"&gt;ffi_lib&lt;/span&gt; &lt;span class="s1"&gt;'foo'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1&gt;
&lt;span id="型" class="fragment"&gt;&lt;/span&gt;&lt;a href="#%E5%9E%8B"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;型&lt;/h1&gt;

&lt;p&gt;このページには、attach_functionおよびStruct＃layoutによって認識されるタイプシンボルの正規リストが含まれています&lt;/p&gt;

&lt;h2&gt;
&lt;span id="型-1" class="fragment"&gt;&lt;/span&gt;&lt;a href="#%E5%9E%8B-1"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;型&lt;/h2&gt;

&lt;p&gt;次の型は、引数および戻り値の型として使用できます。&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style="text-align: left"&gt;Symbol&lt;/th&gt;
&lt;th style="text-align: left"&gt;Description&lt;/th&gt;
&lt;th style="text-align: left"&gt;FFIから期待される/返されたタイプ&lt;/th&gt;
&lt;th style="text-align: left"&gt;Notes&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style="text-align: left"&gt;:char&lt;/td&gt;
&lt;td style="text-align: left"&gt;8ビット文字&lt;/td&gt;
&lt;td style="text-align: left"&gt;整数&lt;/td&gt;
&lt;td style="text-align: left"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left"&gt;:uchar&lt;/td&gt;
&lt;td style="text-align: left"&gt;8ビット符号なし文字&lt;/td&gt;
&lt;td style="text-align: left"&gt;整数&lt;/td&gt;
&lt;td style="text-align: left"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left"&gt;:int8&lt;/td&gt;
&lt;td style="text-align: left"&gt;8ビット符号付き整数&lt;/td&gt;
&lt;td style="text-align: left"&gt;整数&lt;/td&gt;
&lt;td style="text-align: left"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left"&gt;:uint8&lt;/td&gt;
&lt;td style="text-align: left"&gt;8ビット符号なし整数&lt;/td&gt;
&lt;td style="text-align: left"&gt;整数&lt;/td&gt;
&lt;td style="text-align: left"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left"&gt;:short&lt;/td&gt;
&lt;td style="text-align: left"&gt;16ビット符号付き整数&lt;/td&gt;
&lt;td style="text-align: left"&gt;整数&lt;/td&gt;
&lt;td style="text-align: left"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left"&gt;:ushort&lt;/td&gt;
&lt;td style="text-align: left"&gt;16ビット符号なし整数&lt;/td&gt;
&lt;td style="text-align: left"&gt;整数&lt;/td&gt;
&lt;td style="text-align: left"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left"&gt;:int16&lt;/td&gt;
&lt;td style="text-align: left"&gt;16ビット符号付き整数&lt;/td&gt;
&lt;td style="text-align: left"&gt;整数&lt;/td&gt;
&lt;td style="text-align: left"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left"&gt;:uint16&lt;/td&gt;
&lt;td style="text-align: left"&gt;16ビット符号なし整数&lt;/td&gt;
&lt;td style="text-align: left"&gt;整数&lt;/td&gt;
&lt;td style="text-align: left"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left"&gt;:int&lt;/td&gt;
&lt;td style="text-align: left"&gt;符号付き整数&lt;/td&gt;
&lt;td style="text-align: left"&gt;整数&lt;/td&gt;
&lt;td style="text-align: left"&gt;プラットフォーム固有のサイズ&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left"&gt;:uint&lt;/td&gt;
&lt;td style="text-align: left"&gt;符号なし整数&lt;/td&gt;
&lt;td style="text-align: left"&gt;整数&lt;/td&gt;
&lt;td style="text-align: left"&gt;プラットフォーム固有のサイズ&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left"&gt;:int32&lt;/td&gt;
&lt;td style="text-align: left"&gt;32ビット符号付き整数&lt;/td&gt;
&lt;td style="text-align: left"&gt;整数&lt;/td&gt;
&lt;td style="text-align: left"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left"&gt;:uint32&lt;/td&gt;
&lt;td style="text-align: left"&gt;32ビット符号なし整数&lt;/td&gt;
&lt;td style="text-align: left"&gt;整数&lt;/td&gt;
&lt;td style="text-align: left"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left"&gt;:long&lt;/td&gt;
&lt;td style="text-align: left"&gt; long int &amp;lt;/ tt&amp;gt;&lt;/td&gt;
&lt;td style="text-align: left"&gt;整数&lt;/td&gt;
&lt;td style="text-align: left"&gt;プラットフォーム固有のサイズ&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left"&gt;:ulong&lt;/td&gt;
&lt;td style="text-align: left"&gt; unsigned long int &amp;lt;/ tt&amp;gt;&lt;/td&gt;
&lt;td style="text-align: left"&gt;整数&lt;/td&gt;
&lt;td style="text-align: left"&gt;プラットフォーム固有のサイズ&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left"&gt;:int64&lt;/td&gt;
&lt;td style="text-align: left"&gt;64ビット符号付き整数&lt;/td&gt;
&lt;td style="text-align: left"&gt;整数&lt;/td&gt;
&lt;td style="text-align: left"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left"&gt;:uint64&lt;/td&gt;
&lt;td style="text-align: left"&gt;64ビット符号なし整数&lt;/td&gt;
&lt;td style="text-align: left"&gt;整数&lt;/td&gt;
&lt;td style="text-align: left"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left"&gt;:long_long&lt;/td&gt;
&lt;td style="text-align: left"&gt;64ビット符号付き整数&lt;/td&gt;
&lt;td style="text-align: left"&gt;整数&lt;/td&gt;
&lt;td style="text-align: left"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left"&gt;:ulong_long&lt;/td&gt;
&lt;td style="text-align: left"&gt;64ビット符号なし整数&lt;/td&gt;
&lt;td style="text-align: left"&gt;整数&lt;/td&gt;
&lt;td style="text-align: left"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left"&gt;:float&lt;/td&gt;
&lt;td style="text-align: left"&gt;32ビット浮動小数点&lt;/td&gt;
&lt;td style="text-align: left"&gt;Float&lt;/td&gt;
&lt;td style="text-align: left"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left"&gt;:double&lt;/td&gt;
&lt;td style="text-align: left"&gt;64ビット浮動小数点（倍精度）&lt;/td&gt;
&lt;td style="text-align: left"&gt;浮動小数点&lt;/td&gt;
&lt;td style="text-align: left"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left"&gt;:pointer&lt;/td&gt;
&lt;td style="text-align: left"&gt;プラットフォーム固有のサイズのポインター&lt;/td&gt;
&lt;td style="text-align: left"&gt;out： FFI::Pointer &lt;br&gt; in： FFI::Pointer、String、Integer&lt;/td&gt;
&lt;td style="text-align: left"&gt;データにはゼロバイトが含まれる場合があり、ゼロで終了することはできません。文字列はCに直接渡すことができますが、Ruby側とC側の両方で読み取り専用と見なす必要があります。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left"&gt;:string&lt;/td&gt;
&lt;td style="text-align: left"&gt;Cスタイル（NULLで終了する）文字ストリング。&lt;/td&gt;
&lt;td style="text-align: left"&gt;String&lt;/td&gt;
&lt;td style="text-align: left"&gt;
&lt;code&gt;:string&lt;/code&gt;は&lt;code&gt;const char *&lt;/code&gt;と見なす必要があり、Rubyストリングは、ライブラリーによってアクセスされる限り変更しないでください。文字列バッファをC側またはRuby側から変更する場合は、代わりに:pointerおよび FFI::MemoryPointerを使用してください。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left"&gt;:bool&lt;/td&gt;
&lt;td style="text-align: left"&gt;boolean&lt;/td&gt;
&lt;td style="text-align: left"&gt;true / false&lt;/td&gt;
&lt;td style="text-align: left"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: left"&gt;Enums&lt;/td&gt;
&lt;td style="text-align: left"&gt;タイプとしての独自のカスタム列挙型グループ（またはそのシンボル）&lt;/td&gt;
&lt;td style="text-align: left"&gt;シンボル/整数&lt;/td&gt;
&lt;td style="text-align: left"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;関数の戻り値の型の場合のみ：&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style="text-align: center"&gt;シンボル&lt;/th&gt;
&lt;th style="text-align: center"&gt;説明&lt;/th&gt;
&lt;th style="text-align: center"&gt;FFIから返されたタイプ&lt;/th&gt;
&lt;th style="text-align: center"&gt;ノート&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style="text-align: center"&gt;:void&lt;/td&gt;
&lt;td style="text-align: center"&gt;戻り値の型 void&lt;/td&gt;
&lt;td style="text-align: center"&gt;ポインター&lt;/td&gt;
&lt;td style="text-align: center"&gt;何も返さない関数の場合&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: center"&gt;:strptr&lt;/td&gt;
&lt;td style="text-align: center"&gt;Ruby文字列とCメモリへのポインタ&lt;/td&gt;
&lt;td style="text-align: center"&gt;配列（例["foo", ptr]）&lt;/td&gt;
&lt;td style="text-align: center"&gt;Ruby内からメモリを解放するのに便利&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;関数の引数タイプの場合のみ：&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style="text-align: center"&gt;シンボル&lt;/th&gt;
&lt;th style="text-align: center"&gt;説明&lt;/th&gt;
&lt;th style="text-align: center"&gt;FFIが期待する&lt;/th&gt;
&lt;th style="text-align: center"&gt;ノート&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style="text-align: center"&gt;:buffer_in&lt;/td&gt;
&lt;td style="text-align: center"&gt;に似:pointerていますが、関数が読み取りのみ（書き込みではない）できるバッファー用に最適化されています。&lt;/td&gt;
&lt;td style="text-align: center"&gt;FFI ::ポインター&lt;/td&gt;
&lt;td style="text-align: center"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: center"&gt;:buffer_out&lt;/td&gt;
&lt;td style="text-align: center"&gt;に似:pointerていますが、関数が書き込みのみ（読み取りではない）できるバッファー用に最適化されています。&lt;/td&gt;
&lt;td style="text-align: center"&gt;FFI ::ポインター&lt;/td&gt;
&lt;td style="text-align: center"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: center"&gt;:buffer_inout&lt;/td&gt;
&lt;td style="text-align: center"&gt;に似て:pointerいますが、バッファ用に最適化されている場合があります。&lt;/td&gt;
&lt;td style="text-align: center"&gt;FFI ::ポインター&lt;/td&gt;
&lt;td style="text-align: center"&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style="text-align: center"&gt;:varargs&lt;/td&gt;
&lt;td style="text-align: center"&gt;可変個引数&lt;/td&gt;
&lt;td style="text-align: center"&gt;何でも&lt;/td&gt;
&lt;td style="text-align: center"&gt;例を見る&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h2&gt;
&lt;span id="その他のタイプ" class="fragment"&gt;&lt;/span&gt;&lt;a href="#%E3%81%9D%E3%81%AE%E4%BB%96%E3%81%AE%E3%82%BF%E3%82%A4%E3%83%97"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;その他のタイプ&lt;/h2&gt;

&lt;p&gt;最も一般的なCタイプ&lt;code&gt;:size_t&lt;/code&gt;、&lt;code&gt;:uint32_t&lt;/code&gt;と&lt;code&gt;:in_addr_t&lt;/code&gt;などは事前に定義されています。完全なリストについてlib/ffi/platform//types.confは、gitリポジトリを参照してください。&lt;/p&gt;

&lt;p&gt;さらに、独自のタイプを定義することも可能です。これは、次のように異なるタイプの&lt;code&gt;:pointer&lt;/code&gt;区別するのに特に役立ちます。&lt;/p&gt;

&lt;div class="code-frame" data-lang="ruby"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;typedef&lt;/span&gt; &lt;span class="ss"&gt;:pointer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:libusb_device_handle&lt;/span&gt;
&lt;span class="n"&gt;attach_function&lt;/span&gt; &lt;span class="s1"&gt;'libusb_reset_device'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:libusb_device_handle&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="ss"&gt;:int&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;値をマップするためのさらに優れた可能性があります。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;オプションの型安全性を備えた構造体のマッピング&lt;/li&gt;
&lt;li&gt;独自のデータコンバーターの定義&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;詳細については、&lt;a href="https://www.varvet.com/blog/advanced-topics-in-ruby-ffi/" rel="nofollow noopener" target="_blank"&gt;このブログ投稿&lt;/a&gt;を参照してください。&lt;/p&gt;

&lt;h1&gt;
&lt;span id="列挙型" class="fragment"&gt;&lt;/span&gt;&lt;a href="#%E5%88%97%E6%8C%99%E5%9E%8B"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;列挙型&lt;/h1&gt;

&lt;p&gt;Ruby FFIは、列挙型を便利に定義および使用するための優れた機能を提供します。列挙型は、整数値をシンボルに割り当てる方法です。&lt;/p&gt;

&lt;p&gt;モジュールで整数定数を定義する代わりに、列挙型の使用を強く検討する必要があります。違いを確認し、列挙型の利点について読むには、以下の「例：曜日」セクションを参照してください。&lt;/p&gt;

&lt;h2&gt;
&lt;span id="列挙型構文" class="fragment"&gt;&lt;/span&gt;&lt;a href="#%E5%88%97%E6%8C%99%E5%9E%8B%E6%A7%8B%E6%96%87"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;列挙型構文&lt;/h2&gt;

&lt;p&gt;ライブラリモジュール（を含むモジュール&lt;code&gt;extend FFI::Library&lt;/code&gt;）内で、enumコマンドを使用して列挙型を簡単に定義できます。コマンドには3つの基本的な形式があります。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;名前のない列挙型グループ： &lt;code&gt;enum syms&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;例： &lt;code&gt;enum [:a, :b, :c]&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;代替構文:(&lt;code&gt;enum *syms&lt;/code&gt;上記と同じことを行います）&lt;/li&gt;
&lt;li&gt;例： &lt;code&gt;enum :a, :b, :c&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;名前付き列挙型グループ： &lt;code&gt;enum name, syms&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;例： &lt;code&gt;enum :letters, [:a, :b, :c]&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;（より複雑なフォームについては、以下の列挙型を定義する他の方法のセクションを参照してください。）&lt;/p&gt;

&lt;p&gt;デフォルトでは、列挙型グループの最初のシンボルは値0にマップされ、その後の各シンボルは1つずつ上がります。したがって、上記の例では、：aは0を意味し、：bは1を意味し、：cは2を意味します。ただし、リストの次の項目としてその数値を指定することにより、シンボルの任意（またはすべて）に値を明示的に割り当てることもできます。 ：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;enum :letters, [:a, 1, :b, :c, :y, 25, :z]&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;この例では、：aは1を意味し、：yは25を意味します。他のシンボルには明示的な値がないため、各シンボルの値は、リスト内の前の値よりも暗黙的に1つ大きくなります。したがって、：bは2を意味し（明示的に1である：aの後に続くため）、： cは3を意味し、：zは26を意味します（明示的に25である：yの後に続くため）。&lt;/p&gt;

&lt;h2&gt;
&lt;span id="名前付きグループと名前なしグループ" class="fragment"&gt;&lt;/span&gt;&lt;a href="#%E5%90%8D%E5%89%8D%E4%BB%98%E3%81%8D%E3%82%B0%E3%83%AB%E3%83%BC%E3%83%97%E3%81%A8%E5%90%8D%E5%89%8D%E3%81%AA%E3%81%97%E3%82%B0%E3%83%AB%E3%83%BC%E3%83%97"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;名前付きグループと名前なしグループ&lt;/h2&gt;

&lt;p&gt;（書かれる予定です。名前付きグループまたは名前なしグループを使用する状況を説明してください。それぞれの長所と短所は何ですか？）&lt;br&gt;
※注：原稿が未完成のようです2016年の記事ですが…&lt;/p&gt;

&lt;h2&gt;
&lt;span id="例曜日" class="fragment"&gt;&lt;/span&gt;&lt;a href="#%E4%BE%8B%E6%9B%9C%E6%97%A5"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;例：曜日&lt;/h2&gt;

&lt;p&gt;次のようなヘッダーファイルを持つ「libweek」というCライブラリを想像してみてください。&lt;/p&gt;

&lt;div class="code-frame" data-lang="c"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;// The Day enum:&lt;/span&gt;
&lt;span class="k"&gt;enum&lt;/span&gt; &lt;span class="n"&gt;Day&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;SUNDAY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="n"&gt;MONDAY&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="n"&gt;TUESDAY&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="n"&gt;WEDNESDAY&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="n"&gt;THURSDAY&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="n"&gt;FRIDAY&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="n"&gt;SATURDAY&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="c1"&gt;// A function that takes an argument of the Day enum type:&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;is_work_day&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="k"&gt;enum&lt;/span&gt; &lt;span class="n"&gt;Day&lt;/span&gt; &lt;span class="n"&gt;day_of_week&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;列挙型について知らなかった場合、RubyFFIに変換する方法は次のとおりです。&lt;/p&gt;

&lt;div class="code-frame" data-lang="ruby"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;# Example using integer constants&lt;/span&gt;

&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;Week&lt;/span&gt;
  &lt;span class="kp"&gt;extend&lt;/span&gt; &lt;span class="no"&gt;FFI&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Library&lt;/span&gt;
  &lt;span class="n"&gt;ffi_lib&lt;/span&gt; &lt;span class="s2"&gt;"week"&lt;/span&gt;

  &lt;span class="no"&gt;SUNDAY&lt;/span&gt;    &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
  &lt;span class="no"&gt;MONDAY&lt;/span&gt;    &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
  &lt;span class="no"&gt;TUESDAY&lt;/span&gt;   &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
  &lt;span class="no"&gt;WEDNESDAY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;
  &lt;span class="no"&gt;THURSDAY&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;
  &lt;span class="no"&gt;FRIDAY&lt;/span&gt;    &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;
  &lt;span class="no"&gt;SATURDAY&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;

  &lt;span class="n"&gt;attach_function&lt;/span&gt; &lt;span class="ss"&gt;:is_work_day&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="ss"&gt;:uint8&lt;/span&gt; &lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="ss"&gt;:int&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="c1"&gt;# How you would call the function:&lt;/span&gt;
&lt;span class="no"&gt;Week&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;is_work_day&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="no"&gt;Week&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;MONDAY&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;しかし、列挙型の力を使用して、それを行うためのより良い方法があります：&lt;/p&gt;

&lt;div class="code-frame" data-lang="ruby"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;# Example using enums&lt;/span&gt;

&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;Week&lt;/span&gt;
  &lt;span class="kp"&gt;extend&lt;/span&gt; &lt;span class="no"&gt;FFI&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Library&lt;/span&gt;
  &lt;span class="n"&gt;ffi_lib&lt;/span&gt; &lt;span class="s2"&gt;"week"&lt;/span&gt;

  &lt;span class="n"&gt;enum&lt;/span&gt; &lt;span class="ss"&gt;:day&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:sunday&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
              &lt;span class="ss"&gt;:monday&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
              &lt;span class="ss"&gt;:tuesday&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
              &lt;span class="ss"&gt;:wednesday&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
              &lt;span class="ss"&gt;:thursday&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
              &lt;span class="ss"&gt;:friday&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
              &lt;span class="ss"&gt;:saturday&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;

  &lt;span class="n"&gt;attach_function&lt;/span&gt; &lt;span class="ss"&gt;:is_work_day&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="ss"&gt;:day&lt;/span&gt; &lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="ss"&gt;:int&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="c1"&gt;# How you would call the function:&lt;/span&gt;
&lt;span class="no"&gt;Week&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;is_work_day&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="ss"&gt;:monday&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# This is also allowed, in case you need to use integers:&lt;/span&gt;
&lt;span class="no"&gt;Week&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;is_work_day&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;この方法の方がエレガントで、スタイルも優れていることがわかります。この方法で行うことの利点のいくつかを次に示します。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;整数定数の代わりに記号を使用するというRubyのイディオムと一致しています。&lt;/li&gt;
&lt;li&gt;不要な定数でモジュールの名前空間を汚染しません。&lt;/li&gt;
&lt;li&gt;関数を呼び出すとき&lt;code&gt;:monday&lt;/code&gt;を使うほうが&lt;code&gt;Week::MONDAY&lt;/code&gt;よりも、すっきりしています。&lt;/li&gt;
&lt;li&gt;関数の定義はより説明的です：&lt;code&gt;:uint8&lt;/code&gt; よりも &lt;code&gt;:day&lt;/code&gt; は意味があります。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
&lt;span id="列挙型を定義する他の方法" class="fragment"&gt;&lt;/span&gt;&lt;a href="#%E5%88%97%E6%8C%99%E5%9E%8B%E3%82%92%E5%AE%9A%E7%BE%A9%E3%81%99%E3%82%8B%E4%BB%96%E3%81%AE%E6%96%B9%E6%B3%95"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;列挙型を定義する他の方法&lt;/h2&gt;

&lt;p&gt;「enum」コマンドに加えて、列挙型を定義する他のいくつかの方法があります。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;typedefとして： &lt;code&gt;typedef enum(:a, :b, :c), :letters&lt;/code&gt;
&lt;/li&gt;
&lt;li&gt;これは&lt;code&gt;enum :letters, [:a, :b, :c]&lt;/code&gt;と同じことをします &lt;/li&gt;
&lt;li&gt;定数（または変数）に割り当てる： &lt;code&gt;LettersEnum = enum(:a, :b, :c)&lt;/code&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;定数への割り当ては、構造体のフィールドタイプとして列挙型を使用する場合、または後でEnumオブジェクトに簡単にアクセスできるようにする場合に役立ちます。&lt;/p&gt;

&lt;div class="code-frame" data-lang="ruby"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;# Assigning an enum to a constant so you can&lt;/span&gt;
&lt;span class="c1"&gt;# use it as a struct field type&lt;/span&gt;

&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;Week&lt;/span&gt;
  &lt;span class="kp"&gt;extend&lt;/span&gt; &lt;span class="no"&gt;FFI&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Library&lt;/span&gt;
  &lt;span class="n"&gt;ffi_lib&lt;/span&gt; &lt;span class="s2"&gt;"week"&lt;/span&gt;

  &lt;span class="no"&gt;Day&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;enum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="ss"&gt;:sunday&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
              &lt;span class="ss"&gt;:monday&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
              &lt;span class="ss"&gt;:tuesday&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
              &lt;span class="ss"&gt;:wednesday&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
              &lt;span class="ss"&gt;:thursday&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
              &lt;span class="ss"&gt;:friday&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
              &lt;span class="ss"&gt;:saturday&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;WeeklyReminder&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;FFI&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Struct&lt;/span&gt;
    &lt;span class="n"&gt;layout&lt;/span&gt; &lt;span class="ss"&gt;:hour&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;     &lt;span class="ss"&gt;:uint8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
           &lt;span class="ss"&gt;:minute&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;   &lt;span class="ss"&gt;:uint8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
           &lt;span class="ss"&gt;:weekday&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="no"&gt;Day&lt;/span&gt;             &lt;span class="c1"&gt;# &amp;lt;------------&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="n"&gt;attach_function&lt;/span&gt; &lt;span class="ss"&gt;:is_work_day&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="no"&gt;Day&lt;/span&gt; &lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="ss"&gt;:int&lt;/span&gt;

&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2&gt;
&lt;span id="列挙型を使用するruby関数の定義" class="fragment"&gt;&lt;/span&gt;&lt;a href="#%E5%88%97%E6%8C%99%E5%9E%8B%E3%82%92%E4%BD%BF%E7%94%A8%E3%81%99%E3%82%8Bruby%E9%96%A2%E6%95%B0%E3%81%AE%E5%AE%9A%E7%BE%A9"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;列挙型を使用するRuby関数の定義&lt;/h2&gt;

&lt;p&gt;純粋なRuby関数の引数として列挙型を使用し、シンボル値と整数値の両方を渡せるようにする場合は、さらにコードを追加する必要があります。&lt;/p&gt;

&lt;div class="code-frame" data-lang="ruby"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;'ffi'&lt;/span&gt;
&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;Week&lt;/span&gt;
  &lt;span class="kp"&gt;extend&lt;/span&gt; &lt;span class="no"&gt;FFI&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Library&lt;/span&gt;
  &lt;span class="n"&gt;ffi_lib&lt;/span&gt; &lt;span class="s2"&gt;"week/Debug/week"&lt;/span&gt;

  &lt;span class="no"&gt;Day&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;enum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
              &lt;span class="ss"&gt;:sunday&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
              &lt;span class="ss"&gt;:monday&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
              &lt;span class="ss"&gt;:tuesday&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
              &lt;span class="ss"&gt;:wednesday&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
              &lt;span class="ss"&gt;:thursday&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
              &lt;span class="ss"&gt;:friday&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
              &lt;span class="ss"&gt;:saturday&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;attach_function&lt;/span&gt; &lt;span class="ss"&gt;:is_work_day&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="no"&gt;Day&lt;/span&gt; &lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="ss"&gt;:int&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nc"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;is_monday&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;day&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;# Compare to both enum value and enum symbol&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kp"&gt;true&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;day&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="no"&gt;Day&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:monday&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="n"&gt;or&lt;/span&gt; &lt;span class="n"&gt;day&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="ss"&gt;:monday&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nc"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;is_tuesday&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;day&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
     &lt;span class="c1"&gt;# Convert day to integer before use&lt;/span&gt;
     &lt;span class="n"&gt;day&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Day&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;day&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;unless&lt;/span&gt; &lt;span class="no"&gt;Day&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;symbols&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;include?&lt;/span&gt; &lt;span class="n"&gt;day&lt;/span&gt;
     &lt;span class="c1"&gt;# Now, use day as integer&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kp"&gt;true&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;day&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="no"&gt;Day&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:tuesday&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="c1"&gt;# How you would call the function:&lt;/span&gt;
&lt;span class="nb"&gt;p&lt;/span&gt; &lt;span class="no"&gt;Week&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;is_work_day&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:monday&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# This is also allowed, in case you need to use integers:&lt;/span&gt;
&lt;span class="nb"&gt;p&lt;/span&gt; &lt;span class="no"&gt;Week&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;is_work_day&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nb"&gt;p&lt;/span&gt; &lt;span class="no"&gt;Week&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;is_monday&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:monday&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# This works&lt;/span&gt;
&lt;span class="nb"&gt;p&lt;/span&gt; &lt;span class="no"&gt;Week&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;is_monday&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# This also works&lt;/span&gt;

&lt;span class="nb"&gt;p&lt;/span&gt; &lt;span class="no"&gt;Week&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;is_tuesday&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:tuesday&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# This works&lt;/span&gt;
&lt;span class="nb"&gt;p&lt;/span&gt; &lt;span class="no"&gt;Week&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;is_tuesday&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# This also works&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2&gt;
&lt;span id="定数としての列挙型" class="fragment"&gt;&lt;/span&gt;&lt;a href="#%E5%AE%9A%E6%95%B0%E3%81%A8%E3%81%97%E3%81%A6%E3%81%AE%E5%88%97%E6%8C%99%E5%9E%8B"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;定数としての列挙型&lt;/h2&gt;

&lt;p&gt;列挙型に値が割り当てられ、OR（&lt;code&gt;|&lt;/code&gt;）されることで設定される個々のビットを表す場合があります。FFIは通常、整数として動作することを好まないRubyランドで列挙型をシンボルとして解決しようとするため、これには問題があります。&lt;/p&gt;

&lt;p&gt;このヘルパーメソッドを使用すると、列挙値を仮想定数として参照できます。&lt;/p&gt;

&lt;div class="code-frame" data-lang="ruby"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;ExampleLibrary&lt;/span&gt;
  &lt;span class="c1"&gt;# . . .&lt;/span&gt;

  &lt;span class="c1"&gt;# our example enums, which are bitwise values&lt;/span&gt;
  &lt;span class="n"&gt;enum&lt;/span&gt; &lt;span class="ss"&gt;:VariousBits&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="ss"&gt;:ONE_BIT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;     &lt;span class="mh"&gt;0x01&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="ss"&gt;:TWO_BIT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;     &lt;span class="mh"&gt;0x02&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="ss"&gt;:FOUR_BIT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;    &lt;span class="mh"&gt;0x04&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="ss"&gt;:EIGHT_BIT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;   &lt;span class="mh"&gt;0x08&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="ss"&gt;:SIXTEEN_BIT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mh"&gt;0x10&lt;/span&gt;
  &lt;span class="p"&gt;]&lt;/span&gt;

  &lt;span class="c1"&gt;# Allows enums to be used as virtual constants.  This gets invoked whenever&lt;/span&gt;
  &lt;span class="c1"&gt;# the "fake" constant is encountered.  It's a little slower, however, since&lt;/span&gt;
  &lt;span class="c1"&gt;# we rely on Ruby catching it.&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nc"&gt;ExampleLibrary&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;const_missing&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;sym&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;# look up the value of the symbol via FFI's method to do so&lt;/span&gt;
    &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;enum_value&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;sym&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# if no such enum exists, raise an exception using the default&lt;/span&gt;
    &lt;span class="c1"&gt;# behavior of this method&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="k"&gt;super&lt;/span&gt; &lt;span class="k"&gt;unless&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;

    &lt;span class="c1"&gt;# return the value of the enum&lt;/span&gt;
    &lt;span class="n"&gt;value&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;その後、次のようにこの新機能を利用できます。&lt;/p&gt;

&lt;div class="code-frame" data-lang="ruby"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ExampleHelper&lt;/span&gt;
  &lt;span class="c1"&gt;# . . .&lt;/span&gt;

  &lt;span class="c1"&gt;# A constant representing all bits set&lt;/span&gt;
  &lt;span class="no"&gt;ALL_BITS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;ExampleLibrary&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;ONE_BIT&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;
             &lt;span class="no"&gt;ExampleLibrary&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;TWO_BIT&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;
             &lt;span class="no"&gt;ExampleLibrary&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;FOUR_BIT&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;
             &lt;span class="no"&gt;ExampleLibrary&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;EIGHT_BIT&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;
             &lt;span class="no"&gt;ExampleLibrary&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;SIXTEEN_BIT&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1&gt;
&lt;span id="構造体-1" class="fragment"&gt;&lt;/span&gt;&lt;a href="#%E6%A7%8B%E9%80%A0%E4%BD%93-1"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;構造体&lt;/h1&gt;

&lt;h2&gt;
&lt;span id="例-1" class="fragment"&gt;&lt;/span&gt;&lt;a href="#%E4%BE%8B-1"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;例&lt;/h2&gt;

&lt;p&gt;この &lt;code&gt;FFI::Struct&lt;/code&gt;（C構造体をミラーリングすることを意味します）には、「value」という名前の「double」タイプの単一の値があります。&lt;/p&gt;

&lt;div class="code-frame" data-lang="ruby"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;SimpleStruct&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;FFI&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Struct&lt;/span&gt;
  &lt;span class="n"&gt;layout&lt;/span&gt; &lt;span class="ss"&gt;:value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:double&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;SimpleStruct&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt; &lt;span class="c1"&gt;# does a malloc on one of those structs&lt;/span&gt;

&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:value&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;32&lt;/span&gt; &lt;span class="c1"&gt;# sets its internal value to 32&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2&gt;
&lt;span id="構造体を値またはポインターパラメーターとして関数に渡す" class="fragment"&gt;&lt;/span&gt;&lt;a href="#%E6%A7%8B%E9%80%A0%E4%BD%93%E3%82%92%E5%80%A4%E3%81%BE%E3%81%9F%E3%81%AF%E3%83%9D%E3%82%A4%E3%83%B3%E3%82%BF%E3%83%BC%E3%83%91%E3%83%A9%E3%83%A1%E3%83%BC%E3%82%BF%E3%83%BC%E3%81%A8%E3%81%97%E3%81%A6%E9%96%A2%E6%95%B0%E3%81%AB%E6%B8%A1%E3%81%99"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;構造体を値またはポインターパラメーターとして関数に渡す&lt;/h2&gt;

&lt;p&gt;次のようなCライブラリがあるとすると、関数は構造体を引数として値で受け取ります。&lt;/p&gt;

&lt;div class="code-frame" data-lang="c"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;typedef&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;_WHAT&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="n"&gt;WHAT&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;doit_by_value&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;WHAT&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"%d&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;doit_by_ptr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;WHAT&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"%d&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;結果として得られる関数のFFIラッパーコードは次のようになります。&lt;/p&gt;

&lt;div class="code-frame" data-lang="ruby"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;WHAT&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;FFI&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Struct&lt;/span&gt;
  &lt;span class="n"&gt;layout&lt;/span&gt; &lt;span class="ss"&gt;:d&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:int&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="n"&gt;attach_function&lt;/span&gt; &lt;span class="s1"&gt;'doit_by_value'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="no"&gt;WHAT&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;by_value&lt;/span&gt; &lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="ss"&gt;:int&lt;/span&gt;
&lt;span class="n"&gt;attach_function&lt;/span&gt; &lt;span class="s1"&gt;'doit_by_ptr'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="no"&gt;WHAT&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;by_ref&lt;/span&gt; &lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="ss"&gt;:int&lt;/span&gt;

&lt;span class="n"&gt;w&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;WHAT&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;
&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:d&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;123&lt;/span&gt;
&lt;span class="no"&gt;Foo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;doit_by_value&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="no"&gt;Foo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;doit_by_ptr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2&gt;
&lt;span id="割り当てられたとき" class="fragment"&gt;&lt;/span&gt;&lt;a href="#%E5%89%B2%E3%82%8A%E5%BD%93%E3%81%A6%E3%82%89%E3%82%8C%E3%81%9F%E3%81%A8%E3%81%8D"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;割り当てられたとき&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;FFI::Struct.new&lt;/code&gt; を呼び出すと、その時点で「内部バイト」に相当するメモリが割り当てられます。次に、&lt;code&gt;struct[:member] = 3&lt;/code&gt;のようなセットを実行すると、その構造体内のビットがすぐにセットされます。逆もまた真です。&lt;code&gt;x = struct[:member]&lt;/code&gt; アクセスするたびに、rawメモリからの読み取り（およびrubyオブジェクトへの変換）を実行します。独自のポインタを渡すか、メモリをクリアしないように指定しない限り、メモリは最初に割り当てられたときに「ゼロ化」されます（追加の注意事項）。ポインタを渡すと、基本的には何も割り当てるのではなく、それをベースとして使用します。&lt;/p&gt;

&lt;div class="code-frame" data-lang="ruby"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;# Pass false as a 3rd argument to skip memory initialization&lt;/span&gt;
&lt;span class="n"&gt;pointer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;FFI&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;MemoryPointer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt; &lt;span class="ss"&gt;:byte&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;SimpleStruct&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;size&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kp"&gt;false&lt;/span&gt;
&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;SimpleStruct&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt; &lt;span class="n"&gt;pointer&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1&gt;
&lt;span id="pointerメソッドを使用して構造体の実際のアドレスを取得できることに注意してください" class="fragment"&gt;&lt;/span&gt;&lt;a href="#pointer%E3%83%A1%E3%82%BD%E3%83%83%E3%83%89%E3%82%92%E4%BD%BF%E7%94%A8%E3%81%97%E3%81%A6%E6%A7%8B%E9%80%A0%E4%BD%93%E3%81%AE%E5%AE%9F%E9%9A%9B%E3%81%AE%E3%82%A2%E3%83%89%E3%83%AC%E3%82%B9%E3%82%92%E5%8F%96%E5%BE%97%E3%81%A7%E3%81%8D%E3%82%8B%E3%81%93%E3%81%A8%E3%81%AB%E6%B3%A8%E6%84%8F%E3%81%97%E3%81%A6%E3%81%8F%E3%81%A0%E3%81%95%E3%81%84"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;pointerメソッドを使用して、構造体の実際のアドレスを取得できることに注意してください。&lt;/h1&gt;

&lt;h2&gt;
&lt;span id="キャスティング" class="fragment"&gt;&lt;/span&gt;&lt;a href="#%E3%82%AD%E3%83%A3%E3%82%B9%E3%83%86%E3%82%A3%E3%83%B3%E3%82%B0"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;キャスティング&lt;/h2&gt;

&lt;p&gt;同じ手法を使用して、「フォームレス」なメモリブロブを構造体にキャストできます。&lt;/p&gt;

&lt;div class="code-frame" data-lang="ruby"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ComplexStruct&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;FFI&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Struct&lt;/span&gt;
  &lt;span class="n"&gt;layout&lt;/span&gt; &lt;span class="ss"&gt;:context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:pointer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="ss"&gt;:value1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:int32&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="ss"&gt;:value2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:uint64&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="ss"&gt;:value3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:char&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="ss"&gt;:next&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:pointer&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;cast_to_complex_struct&lt;/span&gt; &lt;span class="n"&gt;pointer&lt;/span&gt;
  &lt;span class="no"&gt;ComplexStruct&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt; &lt;span class="n"&gt;pointer&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code&gt;cast_to_complex_struct&lt;/code&gt; を呼び出してメモリのblobを渡すと、そのメモリ位置にマップされた構造体オブジェクトが返されます。その後、コードは構造体フィールドに直接アクセスして操作できます。&lt;/p&gt;

&lt;div class="code-frame" data-lang="ruby"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;my_struct&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cast_to_complex_struct&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;FFI&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;MemoryPointer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt; &lt;span class="ss"&gt;:char&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;ComplexStruct&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;size&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;my_struct&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:value1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;rand&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;my_struct&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:value2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;my_struct&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:value1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;my_struct&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:value3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2&gt;
&lt;span id="ネストされた構造体" class="fragment"&gt;&lt;/span&gt;&lt;a href="#%E3%83%8D%E3%82%B9%E3%83%88%E3%81%95%E3%82%8C%E3%81%9F%E6%A7%8B%E9%80%A0%E4%BD%93"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;ネストされた構造体&lt;/h2&gt;

&lt;p&gt;直接参照することにより、構造体を相互にネストすることができます。別の構造体にネストする構造体タイプの名前を使用するだけです。代わりに、そのタイプの構造体へのポインターが必要な場合は、次のセクション「ネストされたポインター」を使用して詳細を確認してください。&lt;/p&gt;

&lt;div class="code-frame" data-lang="ruby"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;InnerStruct&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;FFI&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Struct&lt;/span&gt;
  &lt;span class="n"&gt;layout&lt;/span&gt; &lt;span class="ss"&gt;:messageLength&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="ss"&gt;:uint32&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
         &lt;span class="ss"&gt;:pMessage&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;       &lt;span class="ss"&gt;:string&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;OuterStruct&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;FFI&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Struct&lt;/span&gt;
  &lt;span class="n"&gt;layout&lt;/span&gt; &lt;span class="ss"&gt;:value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="ss"&gt;:uint32&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
         &lt;span class="ss"&gt;:inner&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="no"&gt;InnerStruct&lt;/span&gt;  &lt;span class="c1"&gt;# this sets up our inner struct!&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2&gt;
&lt;span id="ネストされたポインタ" class="fragment"&gt;&lt;/span&gt;&lt;a href="#%E3%83%8D%E3%82%B9%E3%83%88%E3%81%95%E3%82%8C%E3%81%9F%E3%83%9D%E3%82%A4%E3%83%B3%E3%82%BF"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;ネストされたポインタ&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;FFI::Struct.ptr&lt;/code&gt; メソッドを使用して、構造体内の構造体へのネストされたポインターを定義できます。ポインタ参照に格納されている各オブジェクトは、構造体にアクセスしなくなるまでガベージコレクションされないように、ruby変数に格納する必要があることに注意してください。メモリ管理の詳細については、コアコンセプトを参照してください。&lt;/p&gt;

&lt;div class="code-frame" data-lang="ruby"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Struct2&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;FFI&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Struct&lt;/span&gt;
  &lt;span class="n"&gt;layout&lt;/span&gt; &lt;span class="ss"&gt;:age&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:int&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Struct1&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;FFI&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Struct&lt;/span&gt;
  &lt;span class="n"&gt;layout&lt;/span&gt; &lt;span class="ss"&gt;:id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="ss"&gt;:data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;Struct2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;ptr&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="n"&gt;struct&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Struct1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;
&lt;span class="n"&gt;struct2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Struct2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;
&lt;span class="n"&gt;struct&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:data&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;struct2&lt;/span&gt;
&lt;span class="n"&gt;struct&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:data&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="ss"&gt;:age&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;27&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;ポインタだけで内部Struct2オブジェクトを参照しないでください！ルビーガベージコレクターはそれを認識せず、データが処理される前にStruct2の背後にあるメモリを解放する可能性があります。したがって、これは危険です。&lt;/p&gt;

&lt;div class="code-frame" data-lang="ruby"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;struct&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Struct1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;
&lt;span class="n"&gt;struct&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:data&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Struct2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;  &lt;span class="c1"&gt;# Struct2.new object could be GC'ed immediately!&lt;/span&gt;
&lt;span class="n"&gt;struct&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:data&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="ss"&gt;:age&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;27&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2&gt;
&lt;span id="関数へのポインタ" class="fragment"&gt;&lt;/span&gt;&lt;a href="#%E9%96%A2%E6%95%B0%E3%81%B8%E3%81%AE%E3%83%9D%E3%82%A4%E3%83%B3%E3%82%BF"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;関数へのポインタ&lt;/h2&gt;

&lt;p&gt;一部のライブラリには、ライブラリ内の他の関数へのポインタを含む構造を返すファクトリ関数があります。通常の&lt;code&gt;:pointer&lt;/code&gt;型を使用してこれらのポインターをモデル化する代わりに、&lt;code&gt;callback&lt;/code&gt;メソッドを使用して匿名または名前付きのコールバック型を作成できます。&lt;/p&gt;

&lt;div class="code-frame" data-lang="ruby"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;FunctionTable&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;FFI&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Struct&lt;/span&gt;
  &lt;span class="n"&gt;layout&lt;/span&gt; &lt;span class="ss"&gt;:function1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;callback&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="ss"&gt;:pointer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:int&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="ss"&gt;:void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# A pointer to an anonymous function that takes a pointer and an integer&lt;/span&gt;

  &lt;span class="c1"&gt;# or more verbose with a named callback:&lt;/span&gt;
  &lt;span class="n"&gt;layout&lt;/span&gt; &lt;span class="ss"&gt;:function1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:completion_function&lt;/span&gt;  &lt;span class="c1"&gt;# A pointer to the named callback function&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="n"&gt;callback&lt;/span&gt; &lt;span class="ss"&gt;:completion_function&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:pointer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:long&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:uint8&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="ss"&gt;:void&lt;/span&gt;  &lt;span class="c1"&gt;# define a named callback&lt;/span&gt;
&lt;span class="n"&gt;attach_function&lt;/span&gt; &lt;span class="ss"&gt;:factory&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt; &lt;span class="ss"&gt;:FunctionTable&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;by_ref&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;次に、ファクトリ関数がポインタを入力したら、通常の&lt;code&gt;call()&lt;/code&gt;メソッドを使用してポインタを呼び出すことができます。&lt;/p&gt;

&lt;div class="code-frame" data-lang="ruby"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;vtable&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;factory&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;        &lt;span class="c1"&gt;# Creates and returns a new structure&lt;/span&gt;

&lt;span class="c1"&gt;# Call the function that the library provided&lt;/span&gt;
&lt;span class="n"&gt;vtable&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:function1&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nf"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;my_pointer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;my_integer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2&gt;
&lt;span id="文字配列" class="fragment"&gt;&lt;/span&gt;&lt;a href="#%E6%96%87%E5%AD%97%E9%85%8D%E5%88%97"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;文字配列&lt;/h2&gt;

&lt;p&gt;Cから&lt;/p&gt;

&lt;div class="code-frame" data-lang="c"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
  &lt;span class="n"&gt;uint8&lt;/span&gt; &lt;span class="n"&gt;Value&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
  &lt;span class="n"&gt;uint8&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;SIZE_OF_ARRAY&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="n"&gt;MyArray_t&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Rubyへ&lt;/p&gt;

&lt;div class="code-frame" data-lang="ruby"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;MyArray_t&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;FFI&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Struct&lt;/span&gt; 
  &lt;span class="n"&gt;layout&lt;/span&gt;  &lt;span class="ss"&gt;:Value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="ss"&gt;:uint8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
         &lt;span class="ss"&gt;:String&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:uint8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;SIZE_OF_ARRAY&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; 
&lt;span class="k"&gt;end&lt;/span&gt; 

&lt;span class="c1"&gt;# use via:&lt;/span&gt;
&lt;span class="n"&gt;my_array_struct&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:String&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nf"&gt;to_ptr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;read_string&lt;/span&gt; 
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;それらを次のように設定します&lt;/p&gt;

&lt;div class="code-frame" data-lang="ruby"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;MyArray_t&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;
&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:String&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;33&lt;/span&gt; &lt;span class="c1"&gt;# set a single byte within the struct&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;または&lt;/p&gt;

&lt;div class="code-frame" data-lang="ruby"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:String&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nf"&gt;to_ptr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;put_string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"foo"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2&gt;
&lt;span id="カスタムパックされた構造体" class="fragment"&gt;&lt;/span&gt;&lt;a href="#%E3%82%AB%E3%82%B9%E3%82%BF%E3%83%A0%E3%83%91%E3%83%83%E3%82%AF%E3%81%95%E3%82%8C%E3%81%9F%E6%A7%8B%E9%80%A0%E4%BD%93"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;カスタムパックされた構造体&lt;/h2&gt;

&lt;p&gt;デフォルトでは、ffiは、言及した構造体が「システムの通常のように」パックされると想定します。これが当てはまらない場合は、msvcの &lt;code&gt;#pragma pack&lt;/code&gt; またはgccの &lt;code&gt;__attribute__((__packed__))&lt;/code&gt; で使用する場合のように、構造体のパッキングの境界を指定する必要があります。&lt;/p&gt;

&lt;div class="code-frame" data-lang="ruby"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;CustomPacked&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;FFI&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Struct&lt;/span&gt;
  &lt;span class="n"&gt;pack&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;  &lt;span class="c1"&gt;# pack all members on a 1 byte boundary&lt;/span&gt;
  &lt;span class="n"&gt;layout&lt;/span&gt; &lt;span class="ss"&gt;:a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:char&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
         &lt;span class="ss"&gt;:b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;# starts at offset=1, not offset=4&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2&gt;
&lt;span id="構造体の配列" class="fragment"&gt;&lt;/span&gt;&lt;a href="#%E6%A7%8B%E9%80%A0%E4%BD%93%E3%81%AE%E9%85%8D%E5%88%97"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;構造体の配列&lt;/h2&gt;

&lt;p&gt;構造体サイズの増分で配列をステップスルーし、&lt;code&gt;FFI::Pointer＃&lt;/code&gt; を使用してメモリの各ブロブをキャストすることにより、構造体の配列にアクセスできます。&lt;/p&gt;

&lt;p&gt;これは、構造体の配列を含む親構造体の例であり、配列の各メンバーには和集合も含まれています。&lt;/p&gt;

&lt;p&gt;cから：&lt;/p&gt;

&lt;div class="code-frame" data-lang="c"&gt;&lt;div class="highlight"&gt;&lt;pre&gt; &lt;span class="c1"&gt;// parent struct contains an array of child structs in *val&lt;/span&gt;
 &lt;span class="k"&gt;typedef&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;uint&lt;/span&gt; &lt;span class="n"&gt;len&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;F_TextItemT&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="n"&gt;F_TextItemsT&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

 &lt;span class="k"&gt;typedef&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;offset&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;dataType&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// indicates what part of the union is valid&lt;/span&gt;
    &lt;span class="k"&gt;union&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
     &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;sdata&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="c1"&gt;// string data&lt;/span&gt;
     &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;idata&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="c1"&gt;// int data&lt;/span&gt;
     &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="n"&gt;F_TextItemT&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Rubyでは、構造体と共用体は次のようになります。&lt;/p&gt;

&lt;div class="code-frame" data-lang="ruby"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;FTextItemU&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;FFI&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Union&lt;/span&gt;
  &lt;span class="n"&gt;layout&lt;/span&gt; &lt;span class="ss"&gt;:sdata&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="ss"&gt;:idata&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:int&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;FTextItemT&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;FFI&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Struct&lt;/span&gt;
  &lt;span class="n"&gt;layout&lt;/span&gt;  &lt;span class="ss"&gt;:offset&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="ss"&gt;:dataType&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="ss"&gt;:u&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;FTextItemU&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt; 

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;FTextItemsT&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;FFI&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Struct&lt;/span&gt;
  &lt;span class="n"&gt;layout&lt;/span&gt; &lt;span class="ss"&gt;:len&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:uint&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="ss"&gt;:val&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:pointer&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;このコードは、構造体サイズの増分で配列をステップスルーすることにより、FFI::Pointer＃を使用して配列のメンバーにアクセスします。&lt;/p&gt;

&lt;div class="code-frame" data-lang="ruby"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;tis&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;FM&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;FApiGetText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;docid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;flowid&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;FM&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;FTIString&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="no"&gt;FM&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;FTILineEnd&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="c1"&gt;# Traverse text items and print strings and line ends.&lt;/span&gt;
&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;upto&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tis&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:len&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
  &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;FM&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;FTextItemT&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tis&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:val&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="no"&gt;FM&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;FTextItemT&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;size&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:dataType&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="no"&gt;FM&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;FTIString&lt;/span&gt;
    &lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:u&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="ss"&gt;:sdata&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;または、Pointer.new(）を使用して、異なるtype_size（&lt;br&gt;
[]メソッドを使用してそれに沿って移動するために使用されるサイズ）で新しいポインターを作成することもできます。&lt;/p&gt;

&lt;p&gt;例えば&lt;/p&gt;

&lt;div class="code-frame" data-lang="ruby"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;val_array&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;FFI&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Pointer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;FM&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;FTextItemT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tis&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:val&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;upto&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tis&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:len&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
  &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;FM&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;FTextItemT&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;val_array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
  &lt;span class="c1"&gt;# do stuff with s struct here&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;構造体の配列を関数に渡す必要がある場合は、同じアプローチを使用できます。最初に配列にメモリを事前に割り当ててから、ステップスルーします。必要に応じて、Rubyオブジェクトの配列を作成できます。各オブジェクトは、基になるストレージ内の正しい場所を指します。次の例では、sendmsg（2）およびrecvmsg（2）で使用されるstructiovecを使用しています。&lt;/p&gt;

&lt;div class="code-frame" data-lang="ruby"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;IOVec&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;FFI&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Struct&lt;/span&gt;
  &lt;span class="n"&gt;layout&lt;/span&gt; &lt;span class="ss"&gt;:base&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:pointer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
         &lt;span class="ss"&gt;:len&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:size_t&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="n"&gt;iovlen&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
&lt;span class="n"&gt;iov&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;FFI&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;MemoryPointer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;IOVec&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;iovlen&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;iovs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;iovlen&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;times&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;collect&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
  &lt;span class="no"&gt;IOVec&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;iov&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="no"&gt;IOVec&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;size&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="n"&gt;iovs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="ss"&gt;:base&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="n"&gt;iovs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="ss"&gt;:len&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="n"&gt;iovs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="ss"&gt;:base&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="n"&gt;iovs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="ss"&gt;:len&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="n"&gt;iovs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="ss"&gt;:base&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="n"&gt;iovs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="ss"&gt;:len&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;...&lt;/span&gt;

&lt;span class="n"&gt;msghdr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;msg_iov&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;iov&lt;/span&gt;
&lt;span class="n"&gt;msghdr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;msg_iovlen&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;iovlen&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;より単純な構造体配列&lt;br&gt;
構造体の配列を処理する簡単な方法は、単一のメモリポインタを使用することです。&lt;/p&gt;

&lt;div class="code-frame" data-lang="ruby"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;SomeStruct&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;FFI&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Struct&lt;/span&gt;
  &lt;span class="c1"&gt;# . . .&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="c1"&gt;# where length is the size of the array&lt;/span&gt;
&lt;span class="n"&gt;ary&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;FFI&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;MemoryPointer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="ss"&gt;:uchar&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;SomeStruct&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;size&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;length&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;これはC関数に直接渡すことができ、使用している構造体のすべてのインスタンスを含むために必要なメモリが割り当てられます。&lt;/p&gt;

&lt;p&gt;もう一度読み上げるには、次のようにします。&lt;/p&gt;

&lt;div class="code-frame" data-lang="ruby"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;# determine the length of the data&lt;/span&gt;
&lt;span class="n"&gt;bytes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;SomeStruct&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;size&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="c1"&gt;# read a struct from a single index; this requires two steps:&lt;/span&gt;
&lt;span class="c1"&gt;# 1. first we declare the container pointer.&lt;/span&gt;
&lt;span class="c1"&gt;# 2. then we cast it.&lt;/span&gt;
&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ary&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;bytes&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bytes&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;instance_of_somestruct&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;SomeStruct&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;ポインタ全体をruby配列として読み取りたい場合は、代わりに次のようにすることができます。&lt;/p&gt;

&lt;div class="code-frame" data-lang="ruby"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;# determine the length of the data&lt;/span&gt;
&lt;span class="n"&gt;bytes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;SomeStruct&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;size&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="c1"&gt;# create an array&lt;/span&gt;
&lt;span class="n"&gt;instances_of_somestruct&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Array&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;ary&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;size&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;bytes&lt;/span&gt; &lt;span class="p"&gt;){&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
  &lt;span class="c1"&gt;# set this index to the new SomeStruct instance&lt;/span&gt;
  &lt;span class="no"&gt;SomeStruct&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;ary&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;slice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;bytes&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bytes&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;構造体フィールドへのポインタの取得&lt;/p&gt;

&lt;p&gt;一部の関数では、フィールドのアドレスを引数として渡す必要があります。フィールドのアドレスを返すための組み込みメソッドはありません。幸い、 &lt;code&gt;FFI::Pointer&lt;/code&gt;とフィールドオフセットを使用することで、この動作を模倣できます。&lt;/p&gt;

&lt;div class="code-frame" data-lang="c"&gt;&lt;div class="highlight"&gt;&lt;pre&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;in_addr&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;uint32_t&lt;/span&gt; &lt;span class="n"&gt;s_addr&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// that's a 32-bit int (4 bytes)&lt;/span&gt;
 &lt;span class="p"&gt;};&lt;/span&gt;

 &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;sockaddr_in&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;short&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;          &lt;span class="n"&gt;sin_family&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="c1"&gt;// Address family, AF_INET&lt;/span&gt;
    &lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;short&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;sin_port&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;    &lt;span class="c1"&gt;// Port number&lt;/span&gt;
    &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;in_addr&lt;/span&gt;     &lt;span class="n"&gt;sin_addr&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;    &lt;span class="c1"&gt;// Internet address&lt;/span&gt;
    &lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt;      &lt;span class="n"&gt;sin_zero&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt; &lt;span class="c1"&gt;// Same size as struct sockaddr&lt;/span&gt;
 &lt;span class="p"&gt;};&lt;/span&gt;

 &lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;ip_string&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;INET_ADDRSTRLEN&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
 &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;sockaddr_in&lt;/span&gt; &lt;span class="n"&gt;sa&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;      &lt;span class="c1"&gt;// pretend this is loaded with something&lt;/span&gt;

 &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;inet_ntop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;AF_INET&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sa&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sin_addr&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;ip_string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;INET_ADDRSTRLEN&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2&gt;
&lt;span id="gotchas" class="fragment"&gt;&lt;/span&gt;&lt;a href="#gotchas"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;Gotchas&lt;/h2&gt;

&lt;p&gt;多次元配列はまだ完全にはサポートされていません&lt;/p&gt;

&lt;p&gt;どのタイプのクラスの子孫/階層もサポートされていませんが、少なくともサポートされていないようです。&lt;/p&gt;

&lt;h2&gt;
&lt;span id="ヘルパー" class="fragment"&gt;&lt;/span&gt;&lt;a href="#%E3%83%98%E3%83%AB%E3%83%91%E3%83%BC"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;ヘルパー&lt;/h2&gt;

&lt;p&gt;現在、構造体は、instance[:member]を介した「ハッシュのような」アクセスのみを許可しています。アクセス方法が必要な場合は、ffi swig、nice-ffiを使用するか、独自にロールすることができます。&lt;/p&gt;

&lt;p&gt;組み込みの「method_missing」によるヘルパーの例&lt;br&gt;
次のコードを使用して、 &lt;code&gt;attr_accessor&lt;/code&gt;で作成されたかのように構造体メンバーにアクセスする簡単なヘルパーメソッドを作成できます。これはほとんどのRubyオブジェクトの&lt;code&gt;method_missing（）&lt;/code&gt;組み込みメソッドを利用します。&lt;/p&gt;

&lt;div class="code-frame" data-lang="ruby"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;FFI::Struct&lt;/span&gt;

  &lt;span class="c1"&gt;# Use the symbol passed from the method for accessing the analogous field.&lt;/span&gt;
  &lt;span class="c1"&gt;# This method can also take a &amp;amp;block, but we would not use it.&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;method_missing&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;sym&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;# convert symbol to a string to allow regex checks&lt;/span&gt;
    &lt;span class="n"&gt;str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sym&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;to_s&lt;/span&gt;

    &lt;span class="c1"&gt;# derive the member's symbolic name&lt;/span&gt;
    &lt;span class="n"&gt;member&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="sr"&gt;/^([a-z0-9_]+)/i&lt;/span&gt; &lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nf"&gt;to_sym&lt;/span&gt;

    &lt;span class="c1"&gt;# raise an exception via the default behavior if that symbol isn't a member!&lt;/span&gt;
    &lt;span class="k"&gt;super&lt;/span&gt; &lt;span class="k"&gt;unless&lt;/span&gt; &lt;span class="n"&gt;members&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;include?&lt;/span&gt; &lt;span class="n"&gt;member&lt;/span&gt;

    &lt;span class="c1"&gt;# this ternary checks for the presence of an equals sign (=) to indicate an&lt;/span&gt;
    &lt;span class="c1"&gt;# assignment operation and changes which method we invoke and whether or not&lt;/span&gt;
    &lt;span class="c1"&gt;# to send the splatted arguments as well.&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt; &lt;span class="o"&gt;=~&lt;/span&gt; &lt;span class="sr"&gt;/=$/&lt;/span&gt;&lt;span class="err"&gt;) ? &lt;/span&gt;&lt;span class="sr"&gt;sen&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="ss"&gt;:[]=&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;member&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="ss"&gt;:[]&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;member&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2&gt;
&lt;span id="構造体メンバーのプラットフォーム依存オフセット" class="fragment"&gt;&lt;/span&gt;&lt;a href="#%E6%A7%8B%E9%80%A0%E4%BD%93%E3%83%A1%E3%83%B3%E3%83%90%E3%83%BC%E3%81%AE%E3%83%97%E3%83%A9%E3%83%83%E3%83%88%E3%83%95%E3%82%A9%E3%83%BC%E3%83%A0%E4%BE%9D%E5%AD%98%E3%82%AA%E3%83%95%E3%82%BB%E3%83%83%E3%83%88"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;構造体メンバーのプラットフォーム依存オフセット&lt;/h2&gt;

&lt;p&gt;構造体メンバーのオフセットは、値の型に基づいて計算されます。自動構造体レイアウトを使用して明示的にオフセットを定義する非推奨の方法があります。&lt;/p&gt;

&lt;h1&gt;
&lt;span id="ポインター" class="fragment"&gt;&lt;/span&gt;&lt;a href="#%E3%83%9D%E3%82%A4%E3%83%B3%E3%82%BF%E3%83%BC"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;ポインター&lt;/h1&gt;

&lt;p&gt;従来、ポインタを使用すると、次のようなメソッドがあります。&lt;code&gt;attach_function :GetForegroundWindow, [ ], :pointer&lt;/code&gt; これが返すのは、おそらく他のライブラリが管理しているポインタです。このポインタなどを解放する必要はありません。&lt;/p&gt;

&lt;p&gt;独自のポインタを作成するには、次のようにします&lt;code&gt;ptr = MemoryPointer.new(4) 4 bytes worth of memory&lt;/code&gt; ポインタオブジェクトがGCされるか、&lt;code&gt;ptr.free&lt;/code&gt; を呼び出すと解放されます。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ptr.address&lt;/code&gt; が指すアドレスです。他のポインタをコピーするには、&lt;code&gt;another_ptr = ptr&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;ポインタは、ネイティブメモリアドレスを保持する単なるFixnumです。「ポインタ」は「アドレスのネイティブメモリを読み書きするメソッドを備えたfixnum」と考えてください。&lt;/p&gt;

&lt;h2&gt;
&lt;span id="外部ライブラリへのメモリの受け渡し" class="fragment"&gt;&lt;/span&gt;&lt;a href="#%E5%A4%96%E9%83%A8%E3%83%A9%E3%82%A4%E3%83%96%E3%83%A9%E3%83%AA%E3%81%B8%E3%81%AE%E3%83%A1%E3%83%A2%E3%83%AA%E3%81%AE%E5%8F%97%E3%81%91%E6%B8%A1%E3%81%97"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;外部ライブラリへのメモリの受け渡し&lt;/h2&gt;

&lt;p&gt;状況によっては、ネイティブメモリを割り当て、そのバッファを外部ライブラリに渡す必要があります。次に、外部ライブラリは、最終的にバッファを解放することを含め、そのバッファのライフサイクルを処理します。&lt;/p&gt;

&lt;p&gt;libcをラップし、その関数 &lt;code&gt;malloc()&lt;/code&gt; と &lt;code&gt;free()&lt;/code&gt; 関数を使用して、ネイティブメモリを割り当てて解放します。&lt;/p&gt;

&lt;div class="code-frame" data-lang="ruby"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;LibC&lt;/span&gt;
  &lt;span class="kp"&gt;extend&lt;/span&gt; &lt;span class="no"&gt;FFI&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Library&lt;/span&gt;
  &lt;span class="n"&gt;ffi_lib&lt;/span&gt; &lt;span class="no"&gt;FFI&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Library&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;LIBC&lt;/span&gt;

  &lt;span class="c1"&gt;# memory allocators&lt;/span&gt;
  &lt;span class="n"&gt;attach_function&lt;/span&gt; &lt;span class="ss"&gt;:malloc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:size_t&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="ss"&gt;:pointer&lt;/span&gt;
  &lt;span class="n"&gt;attach_function&lt;/span&gt; &lt;span class="ss"&gt;:calloc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:size_t&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="ss"&gt;:pointer&lt;/span&gt;
  &lt;span class="n"&gt;attach_function&lt;/span&gt; &lt;span class="ss"&gt;:valloc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:size_t&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="ss"&gt;:pointer&lt;/span&gt;
  &lt;span class="n"&gt;attach_function&lt;/span&gt; &lt;span class="ss"&gt;:realloc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:pointer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:size_t&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="ss"&gt;:pointer&lt;/span&gt;
  &lt;span class="n"&gt;attach_function&lt;/span&gt; &lt;span class="ss"&gt;:free&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:pointer&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="ss"&gt;:void&lt;/span&gt;

  &lt;span class="c1"&gt;# memory movers&lt;/span&gt;
  &lt;span class="n"&gt;attach_function&lt;/span&gt; &lt;span class="ss"&gt;:memcpy&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:pointer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:pointer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:size_t&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="ss"&gt;:pointer&lt;/span&gt;
  &lt;span class="n"&gt;attach_function&lt;/span&gt; &lt;span class="ss"&gt;:bcopy&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:pointer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:pointer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:size_t&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="ss"&gt;:void&lt;/span&gt;

&lt;span class="k"&gt;end&lt;/span&gt; &lt;span class="c1"&gt;# module LibC&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Rubyコードでは、これらの関数を呼び出すと、&lt;code&gt;FFI::Pointer&lt;/code&gt; のインスタンスが返されます。&lt;code&gt;FFI::Pointer&lt;/code&gt; で定義されているメソッドを使用して、Rubyメモリからネイティブメモリにデータを移動します。&lt;/p&gt;

&lt;div class="code-frame" data-lang="ruby"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;foo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"a Ruby string"&lt;/span&gt;
&lt;span class="n"&gt;bar&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;3.14159&lt;/span&gt;
&lt;span class="n"&gt;baz&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="n"&gt;buffer1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;LibC&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;malloc&lt;/span&gt; &lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;size&lt;/span&gt;
&lt;span class="n"&gt;buffer1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;write_string&lt;/span&gt; &lt;span class="n"&gt;foo&lt;/span&gt;

&lt;span class="n"&gt;buffer2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;LibC&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;malloc&lt;/span&gt; &lt;span class="n"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;size&lt;/span&gt;
&lt;span class="n"&gt;buffer2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;write_float&lt;/span&gt; &lt;span class="n"&gt;bar&lt;/span&gt;

&lt;span class="c1"&gt;# all of the array elements need to be the same type&lt;/span&gt;
&lt;span class="c1"&gt;# meaning you can't mix ints, floats, strings, etc.&lt;/span&gt;
&lt;span class="n"&gt;buffer3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;LibC&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;malloc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;baz&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;first&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;size&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;baz&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;size&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;buffer3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;write_array_of_int&lt;/span&gt; &lt;span class="n"&gt;baz&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;この&lt;code&gt;FFI::MemoryPointer&lt;/code&gt;クラスは、甘味料として自動ガベージコレクションを使用してネイティブメモリを割り当てます。MemoryPointerがスコープ外になると、ガベージコレクションプロセスの一部としてメモリが解放されます。&lt;/p&gt;

&lt;p&gt;MemoryPointerコンストラクタは3つの引数を取ります&lt;code&gt;size&lt;/code&gt;、&lt;code&gt;count&lt;/code&gt;と&lt;code&gt;clear&lt;/code&gt;。&lt;code&gt;size&lt;/code&gt;引数は、シンボルタイプ割り当てるバイト数を決定します。&lt;code&gt;size&lt;/code&gt;引数はまた、&lt;code&gt;#size&lt;/code&gt;に応答すること任意のオブジェクトであることができる、それはバイトの特定の番号が割り当てられます。その場合に。&lt;code&gt;count&lt;/code&gt;引数には、サイズのための乗数です。それは&lt;code&gt;size * count&lt;/code&gt;メモリのバイトを割り当てます。最後に、&lt;code&gt;clear&lt;/code&gt;引数はメモリアロケータにtrueの場合はメモリをゼロ/初期化し、falseの場合は初期化をスキップするように指示します。&lt;/p&gt;

&lt;p&gt;次のように、MemoryPointerのブロック形式は、終了時にポインターを自動的に解放する場合にも役立ちます。&lt;/p&gt;

&lt;div class="code-frame" data-lang="ruby"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;baz&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;88&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;92&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;32&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1291&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="no"&gt;FFI&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;MemoryPointer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;baz&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;size&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="nb"&gt;p&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
  &lt;span class="nb"&gt;p&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;write_array_of_int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;baz&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="no"&gt;C&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="no"&gt;DoSomethingWithArrayOfInt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;p&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3&gt;
&lt;span id="文字列ポインタ" class="fragment"&gt;&lt;/span&gt;&lt;a href="#%E6%96%87%E5%AD%97%E5%88%97%E3%83%9D%E3%82%A4%E3%83%B3%E3%82%BF"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;文字列ポインタ&lt;/h3&gt;

&lt;p&gt;Ruby文字列へのポインタ：&lt;/p&gt;

&lt;p&gt;&lt;code&gt;FFI::MemoryPointer.from_string('some string')&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Fresh Memory&lt;/p&gt;

&lt;p&gt;一部のCライブラリは、「新しい」メモリへのポインタを返します。つまり、メモリを使い終わったら、そのメモリを解放する責任があります。このようなライブラリ（「foo」）には、次のインターフェイスがあります。&lt;/p&gt;

&lt;div class="code-frame" data-lang="c"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;// Encodes data of length data_size. The caller is responsible for destroying&lt;/span&gt;
&lt;span class="c1"&gt;// the return value using foo_free() when finished with it.&lt;/span&gt;
&lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nf"&gt;foo_encode&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;byte&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;size_t&lt;/span&gt; &lt;span class="n"&gt;data_size&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// Frees a pointer returned by foo_encode().&lt;/span&gt;
&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;foo_free&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;したがってfoo_encode()は、いくつかのデータへのポインタと、そのデータの長さを取ります。&lt;br&gt;
それが終わった後にメモリを解放する非常に基本的な方法はこれです：&lt;/p&gt;

&lt;div class="code-frame" data-lang="ruby"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;Foo&lt;/span&gt;
  &lt;span class="c1"&gt;# Module with native functions of libfoo.&lt;/span&gt;
  &lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;FFI&lt;/span&gt;
    &lt;span class="kp"&gt;extend&lt;/span&gt; &lt;span class="no"&gt;FFI&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Library&lt;/span&gt;
    &lt;span class="n"&gt;ffi_lib&lt;/span&gt; &lt;span class="s1"&gt;'libfoo'&lt;/span&gt;
    &lt;span class="n"&gt;attach_function&lt;/span&gt; &lt;span class="ss"&gt;:foo_encode&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:pointer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:size_t&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="ss"&gt;:pointer&lt;/span&gt; &lt;span class="c1"&gt;# returns fresh memory&lt;/span&gt;
    &lt;span class="n"&gt;attach_function&lt;/span&gt; &lt;span class="ss"&gt;:foo_free&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="ss"&gt;:pointer&lt;/span&gt; &lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="ss"&gt;:void&lt;/span&gt;             &lt;span class="c1"&gt;# frees memory&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="c1"&gt;# ...&lt;/span&gt;

&lt;span class="k"&gt;begin&lt;/span&gt;
  &lt;span class="n"&gt;p_input&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;FFI&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;MemoryPointer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;from_string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"input"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;p_out&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Foo&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;FFI&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;foo_encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p_input&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;p_input&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;size&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="c1"&gt;# with p_out, we can:&lt;/span&gt;
  &lt;span class="c1"&gt;#   * get a Ruby string from it, when needed:&lt;/span&gt;
  &lt;span class="c1"&gt;#       puts p_out.read_string&lt;/span&gt;
  &lt;span class="c1"&gt;#   * pass it to another C function&lt;/span&gt;
  &lt;span class="c1"&gt;#   * use it to free the memory&lt;/span&gt;

&lt;span class="k"&gt;ensure&lt;/span&gt; &lt;span class="c1"&gt;# make sure this block is called, no matter what&lt;/span&gt;

  &lt;span class="c1"&gt;# free it, if p_out still holds a pointer&lt;/span&gt;
  &lt;span class="no"&gt;Foo&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;FFI&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;free&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p_out&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;p_out&lt;/span&gt; 
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;かなり簡単ですが、あまりきれいではありません。ここでは明示的にメモリを解放しているので、確実に解放されるように&lt;code&gt;ensure&lt;/code&gt;ブロックに配置する必要がありました。しかし、このようにするのは少し面倒です。Rubyでは、ガベージコレクターがあるため、これらのことを心配することはありません。&lt;/p&gt;

&lt;p&gt;ポインタをより長く保持したい場合、おそらく後で（このブロックの外で）別のC関数に渡すためにどうしますか？メモリリークを回避するために、メモリが最終的に解放されることを確認する必要があります。これは、（&lt;code&gt;p_out&lt;/code&gt;のような）参照がスコープ外になったときに発生するはずです。これは、そのメモリにアクセスできなくなるためです。&lt;/p&gt;

&lt;p&gt;これを行うには、&lt;code&gt;method&lt;/code&gt;オブジェクトとしてのカスタムリリース戦略とともに、ポインターを&lt;code&gt;FFI::AutoPointer&lt;/code&gt;のインスタンスにラップします。&lt;/p&gt;

&lt;div class="code-frame" data-lang="ruby"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;Foo&lt;/span&gt;
  &lt;span class="c1"&gt;# Module with native functions of libfoo.&lt;/span&gt;
  &lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;FFI&lt;/span&gt;
    &lt;span class="kp"&gt;extend&lt;/span&gt; &lt;span class="no"&gt;FFI&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Library&lt;/span&gt;
    &lt;span class="n"&gt;ffi_lib&lt;/span&gt; &lt;span class="s1"&gt;'libfoo'&lt;/span&gt;
    &lt;span class="n"&gt;attach_function&lt;/span&gt; &lt;span class="ss"&gt;:foo_encode&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:pointer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:size_t&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="ss"&gt;:pointer&lt;/span&gt; &lt;span class="c1"&gt;# returns fresh memory&lt;/span&gt;
    &lt;span class="n"&gt;attach_function&lt;/span&gt; &lt;span class="ss"&gt;:foo_free&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="ss"&gt;:pointer&lt;/span&gt; &lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="ss"&gt;:void&lt;/span&gt;             &lt;span class="c1"&gt;# frees memory&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="c1"&gt;# ...&lt;/span&gt;

&lt;span class="k"&gt;begin&lt;/span&gt;
  &lt;span class="n"&gt;p_input&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;FFI&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;MemoryPointer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;from_string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"input"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="c1"&gt;# wrap result in a Foo::FFI::AutoPointer&lt;/span&gt;
  &lt;span class="n"&gt;p_out&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;FFI&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;AutoPointer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;Foo&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;FFI&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;foo_encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p_input&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;p_input&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;size&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
            &lt;span class="no"&gt;Foo&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;FFI&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;method&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:foo_free&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

  &lt;span class="c1"&gt;# ...&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="c1"&gt;# p_input is out of scope here, so it gets GC'd soon ...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;ご覧のとおり、ここではポインタを明示的に解放していません。ここで手動で解放する必要はありません。p_inputがスコープ外になり、GCされるとすぐに解放されます。&lt;/p&gt;

&lt;p&gt;別の方法として、&lt;code&gt;FFI::AutoPointer&lt;/code&gt; から継承し、&lt;code&gt;release&lt;/code&gt; クラスメソッドでカスタムリリース戦略を指定することもできます。&lt;/p&gt;

&lt;div class="code-frame" data-lang="ruby"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;Foo&lt;/span&gt;
  &lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;FFI&lt;/span&gt;
    &lt;span class="c1"&gt;# Used to automatically free memory using the foo_free() function.&lt;/span&gt;
    &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;AutoPointer&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;FFI&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;AutoPointer&lt;/span&gt;
      &lt;span class="c1"&gt;# This method will be called by FFI::AutoPointer::DefaultReleaser.&lt;/span&gt;
      &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nc"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;release&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ptr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="no"&gt;FFI&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;foo_free&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ptr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="c1"&gt;# ...&lt;/span&gt;
&lt;span class="n"&gt;p_out&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Foo&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;FFI&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;AutoPointer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p_out&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;あなたのニーズに合うものは何でも。ただし、Methodオブジェクトを提供することをお勧めします。&lt;/p&gt;

&lt;h4&gt;
&lt;span id="fresh-strings" class="fragment"&gt;&lt;/span&gt;&lt;a href="#fresh-strings"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;Fresh Strings&lt;/h4&gt;

&lt;p&gt;文字列として（毎回）メモリにアクセスしたい場合は&lt;code&gt;:strptr&lt;/code&gt;を使うのが便利です。&lt;/p&gt;

&lt;div class="code-frame" data-lang="ruby"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;Foo&lt;/span&gt;
  &lt;span class="c1"&gt;# Module with native functions of libfoo.&lt;/span&gt;
  &lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;FFI&lt;/span&gt;
    &lt;span class="kp"&gt;extend&lt;/span&gt; &lt;span class="no"&gt;FFI&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Library&lt;/span&gt;
    &lt;span class="n"&gt;ffi_lib&lt;/span&gt; &lt;span class="s1"&gt;'libfoo'&lt;/span&gt;
    &lt;span class="n"&gt;attach_function&lt;/span&gt; &lt;span class="ss"&gt;:foo_encode&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:pointer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:size_t&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="ss"&gt;:strptr&lt;/span&gt; &lt;span class="c1"&gt;# return String AND Pointer&lt;/span&gt;
    &lt;span class="n"&gt;attach_function&lt;/span&gt; &lt;span class="ss"&gt;:foo_free&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="ss"&gt;:pointer&lt;/span&gt; &lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="ss"&gt;:void&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="c1"&gt;# ...&lt;/span&gt;

&lt;span class="n"&gt;p_input&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;FFI&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;MemoryPointer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;from_string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"input"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# call foo_encode() and get a String and a Pointer back&lt;/span&gt;
&lt;span class="n"&gt;string_out&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;p_out&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Foo&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;FFI&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;foo_encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p_input&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;p_input&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;size&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# wrap pointer in a Foo::FFI::AutoPointer&lt;/span&gt;
&lt;span class="n"&gt;p_out&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;FFI&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;AutoPointer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p_out&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;Foo&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;FFI&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;method&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:foo_free&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="s2"&gt;"encoded string: &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;string_out&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;

&lt;span class="c1"&gt;# ...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;このように、Ruby文字列にアクセスする前に&lt;code&gt;#read_string&lt;/code&gt;を呼び出す必要はありません。&lt;/p&gt;

&lt;p&gt;返される文字列のエンコーディングセットが間違っている可能性があることに注意してください。&lt;code&gt;String#force_encoding&lt;/code&gt;を使用します。バイナリデータも参照してください。&lt;/p&gt;

&lt;h2&gt;
&lt;span id="参照による渡し" class="fragment"&gt;&lt;/span&gt;&lt;a href="#%E5%8F%82%E7%85%A7%E3%81%AB%E3%82%88%E3%82%8B%E6%B8%A1%E3%81%97"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;参照による渡し&lt;/h2&gt;

&lt;p&gt;Cは1つの値しか返すことができないため、ほとんどのC APIは、書き込む出力位置へのポインターを受け取ります。&lt;br&gt;
例として、C関数を呼び出しましょう。&lt;/p&gt;

&lt;div class="code-frame" data-lang="c"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;set_value&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;31337&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;この関数はint *xを&lt;code&gt;int x[1]&lt;/code&gt;と同等に扱われるため、この状況は、1要素の配列を定義するか（前のセクションのように）、あるいは1要素の構造を定義することによって処理できます。&lt;/p&gt;

&lt;div class="code-frame" data-lang="ruby"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;IntPtr&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;FFI&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Struct&lt;/span&gt;
    &lt;span class="n"&gt;layout&lt;/span&gt;  &lt;span class="ss"&gt;:value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:int&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;ValueSetter&lt;/span&gt;
    &lt;span class="kp"&gt;extend&lt;/span&gt; &lt;span class="no"&gt;FFI&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Library&lt;/span&gt;
    &lt;span class="n"&gt;ffi_lib&lt;/span&gt; &lt;span class="s1"&gt;'/usr/local/lib/set_value.so'&lt;/span&gt;

    &lt;span class="n"&gt;attach_function&lt;/span&gt; &lt;span class="ss"&gt;:set_value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="no"&gt;IntPtr&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="ss"&gt;:void&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="n"&gt;xptr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;IntPtr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;
&lt;span class="n"&gt;xptr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:value&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;42&lt;/span&gt;
&lt;span class="no"&gt;ValueSetter&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;set_value&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;xptr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;xptr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:value&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1&gt;
&lt;span id="バイナリデータ" class="fragment"&gt;&lt;/span&gt;&lt;a href="#%E3%83%90%E3%82%A4%E3%83%8A%E3%83%AA%E3%83%87%E3%83%BC%E3%82%BF"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;バイナリデータ&lt;/h1&gt;

&lt;p&gt;次のRubyコードについて考えてみます。&lt;/p&gt;

&lt;div class="code-frame" data-lang="ruby"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;string1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"Hello world"&lt;/span&gt;
&lt;span class="n"&gt;string2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;File&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;read&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"data.txt"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"r"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;string3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;File&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;read&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"image.jpg"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"rb"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;3つの文字列変数はすべてStringクラスですが、&lt;code&gt;string3&lt;/code&gt; に格納されるデータはテキストデータではなくバイナリイメージデータです。&lt;/p&gt;

&lt;h2&gt;
&lt;span id="バイナリデータの受け渡し" class="fragment"&gt;&lt;/span&gt;&lt;a href="#%E3%83%90%E3%82%A4%E3%83%8A%E3%83%AA%E3%83%87%E3%83%BC%E3%82%BF%E3%81%AE%E5%8F%97%E3%81%91%E6%B8%A1%E3%81%97"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;バイナリデータの受け渡し&lt;/h2&gt;

&lt;p&gt;Ruby文字列にバイナリデータが含まれている場合、以下を使用することはできません。&lt;/p&gt;

&lt;div class="code-frame" data-lang="ruby"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;attach_function&lt;/span&gt; &lt;span class="ss"&gt;:example_function&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:string&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="ss"&gt;:int&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;その理由は、FFIがRuby文字列をCスタイル（nullで終了する）文字列に変換するためです。バイナリデータにヌルバイトが含まれていると、問題が発生する可能性があります（おそらくそうなる可能性があります）。バイナリデータを処理する場合、ほとんどのCコードはメモリバッファを使用します。次の例は、Cプログラムのconvert()関数で使用するためにファイルをメモリに読み込む方法を示しています 。&lt;/p&gt;

&lt;div class="code-frame" data-lang="c"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;  &lt;span class="kt"&gt;char&lt;/span&gt;                &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;inputName&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"cat.jpg"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kt"&gt;FILE&lt;/span&gt;                &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;inputFile&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt;       &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;picBuf&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;        &lt;span class="n"&gt;picBufSize&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kt"&gt;int&lt;/span&gt;                 &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="c1"&gt;// Open the file handle for reading binary&lt;/span&gt;
  &lt;span class="n"&gt;inputFile&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fopen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;inputName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"rb"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="c1"&gt;// Get the filesize&lt;/span&gt;
  &lt;span class="n"&gt;fseek&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;inputFile&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;SEEK_END&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="n"&gt;picBufSize&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ftell&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;inputFile&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="c1"&gt;// Return to the beginning of the file and set the buffer size&lt;/span&gt;
  &lt;span class="n"&gt;fseek&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;inputFile&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;SEEK_SET&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="n"&gt;picBuf&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;malloc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;picBufSize&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nf"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;

  &lt;span class="c1"&gt;// Read the data and close the file&lt;/span&gt;
  &lt;span class="n"&gt;fread&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;picBuf&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;picBufSize&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;inputFile&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;fclose&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;inputFile&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="c1"&gt;// Now do something with the picBuf&lt;/span&gt;
  &lt;span class="c1"&gt;// The signature for this function is int convert(void *picBuf, unsigned int picBufSize);&lt;/span&gt;
  &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;convert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;picBuf&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;picBufSize&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="c1"&gt;// ...&lt;/span&gt;

  &lt;span class="n"&gt;free&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;picBuf&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;FFIから&lt;code&gt;convert&lt;/code&gt;関数を使用する場合は、バイナリデータを直接渡す必要があります。これを行うには、次のことを行う必要があります。&lt;/p&gt;

&lt;div class="code-frame" data-lang="ruby"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;ExampleLib&lt;/span&gt;
  &lt;span class="kp"&gt;extend&lt;/span&gt; &lt;span class="no"&gt;FFI&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Library&lt;/span&gt;
  &lt;span class="n"&gt;ffi_lib&lt;/span&gt; &lt;span class="s2"&gt;"example_lib.so"&lt;/span&gt; 

  &lt;span class="n"&gt;attach_function&lt;/span&gt; &lt;span class="ss"&gt;:convert&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:pointer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:uint&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="ss"&gt;:int&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;ご覧のとおり、convert()をattach_functionして&lt;code&gt;:pointer引数&lt;/code&gt;を付けました。&lt;/p&gt;

&lt;p&gt;次に、メモリの先頭と割り当てのサイズへのポインタを渡す必要があります。これは次のように実行できます。&lt;/p&gt;

&lt;div class="code-frame" data-lang="ruby"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;ExampleLib&lt;/span&gt;
  &lt;span class="kp"&gt;extend&lt;/span&gt; &lt;span class="no"&gt;FFI&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Library&lt;/span&gt;
  &lt;span class="n"&gt;ffi_lib&lt;/span&gt; &lt;span class="s2"&gt;"example_lib.so"&lt;/span&gt; 

  &lt;span class="n"&gt;attach_function&lt;/span&gt; &lt;span class="ss"&gt;:convert&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:pointer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:uint&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="ss"&gt;:int&lt;/span&gt;

  &lt;span class="c1"&gt;# Convert an image&lt;/span&gt;
  &lt;span class="c1"&gt;#&lt;/span&gt;
  &lt;span class="c1"&gt;# data contains the binary data to be converted.&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nc"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;convert_image&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;memBuf&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;FFI&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;MemoryPointer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:char&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;bytesize&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# Allocate memory sized to the data&lt;/span&gt;
    &lt;span class="n"&gt;memBuf&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;put_bytes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;                             &lt;span class="c1"&gt;# Insert the data&lt;/span&gt;
    &lt;span class="n"&gt;convert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;memBuf&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;size&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;                            &lt;span class="c1"&gt;# Call the C function&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;File&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;read&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"cat.jpg"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"rb"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="no"&gt;ExampleLib&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;convert_image&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;これはバイナリデータ（おそらくnullバイトを含む）であるため、&lt;code&gt;MemoryPointer#put_string&lt;/code&gt;の代わりに&lt;code&gt;MemoryPointer#put_bytes&lt;/code&gt;を使用する必要があることに注意してください。&lt;/p&gt;

&lt;h1&gt;
&lt;span id="コールバック-1" class="fragment"&gt;&lt;/span&gt;&lt;a href="#%E3%82%B3%E3%83%BC%E3%83%AB%E3%83%90%E3%83%83%E3%82%AF-1"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;コールバック&lt;/h1&gt;

&lt;p&gt;関数ポインタの引数を取ることでコールバックを可能にするC APIがあると仮定しましょう。&lt;/p&gt;

&lt;div class="code-frame" data-lang="c"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;typedef&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;completion_function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;buffer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;code&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;do_work&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;buffer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;completion_function&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;FFIは、Rubyクロージャ（Proc、lambda）のC関数ポインターへのマッピングをサポートし、別のC関数を直接指す関数ポインターの受け渡しもサポートします。&lt;/p&gt;

&lt;h2&gt;
&lt;span id="procコールバック" class="fragment"&gt;&lt;/span&gt;&lt;a href="#proc%E3%82%B3%E3%83%BC%E3%83%AB%E3%83%90%E3%83%83%E3%82%AF"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;Procコールバック&lt;/h2&gt;

&lt;p&gt;コールバックを定義する最も簡単な方法は、Procを使用して無名関数を作成することです。以下の例では、コールバックが&lt;code&gt;Callback&lt;/code&gt;定数に割り当てられているため、ガベージコレクターがそれを削除することを心配する必要はありません。&lt;/p&gt;

&lt;div class="code-frame" data-lang="ruby"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;LibWrap&lt;/span&gt;
  &lt;span class="kp"&gt;extend&lt;/span&gt; &lt;span class="no"&gt;FFI&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Library&lt;/span&gt;
  &lt;span class="n"&gt;ffi_lib&lt;/span&gt; &lt;span class="s2"&gt;"some_lib.so"&lt;/span&gt;
  &lt;span class="n"&gt;callback&lt;/span&gt; &lt;span class="ss"&gt;:completion_function&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:pointer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:long&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:uint8&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="ss"&gt;:void&lt;/span&gt;
  &lt;span class="n"&gt;attach_function&lt;/span&gt; &lt;span class="ss"&gt;:do_work&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:completion_function&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="ss"&gt;:int&lt;/span&gt;

  &lt;span class="no"&gt;Callback&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Proc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;buf_ptr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;code&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
    &lt;span class="c1"&gt;# finish up&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="no"&gt;LibWrap&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;do_work&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;LibWrap&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Callback&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;C APIによるコールバックの実行時に、FFIライブラリはProcをアンラップして、FFI::Functionが割り当てられているかどうかを確認します。見つかった場合は、すぐにFFI::Functionを呼び出します。FFI::Functionが見つからない場合、FFI::Functionをallocateし、それを起動します。&lt;/p&gt;

&lt;h2&gt;
&lt;span id="ffifunction" class="fragment"&gt;&lt;/span&gt;&lt;a href="#ffifunction"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;FFI::Function&lt;/h2&gt;

&lt;p&gt;コールバックをFFI::Functionとして直接定義することで、作業を少し節約し、柔軟性を少し高めることができます。完全な説明については、rdocページを確認してください。&lt;/p&gt;

&lt;div class="code-frame" data-lang="ruby"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;LibWrap&lt;/span&gt;
  &lt;span class="kp"&gt;extend&lt;/span&gt; &lt;span class="no"&gt;FFI&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Library&lt;/span&gt;
  &lt;span class="n"&gt;ffi_lib&lt;/span&gt; &lt;span class="s2"&gt;"some_lib.so"&lt;/span&gt;
  &lt;span class="n"&gt;attach_function&lt;/span&gt; &lt;span class="ss"&gt;:do_work&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:pointer&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="ss"&gt;:int&lt;/span&gt;

  &lt;span class="no"&gt;Callback&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;FFI&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Function&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:void&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:pointer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:long&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:uint8&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;buf_ptr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;code&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
    &lt;span class="c1"&gt;# finish up&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="no"&gt;LibWrap&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;do_work&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;LibWrap&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Callback&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2&gt;
&lt;span id="cコールバック" class="fragment"&gt;&lt;/span&gt;&lt;a href="#c%E3%82%B3%E3%83%BC%E3%83%AB%E3%83%90%E3%83%83%E3%82%AF"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;Cコールバック&lt;/h2&gt;

&lt;p&gt;コールバック関数がライブラリ内の別のC関数である場合があります。C関数を表すRubyオブジェクトを取得して、関数ポインター引数として渡すことができるようにする方法は2つあります。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;code&gt;attach_function&lt;/code&gt; の戻り値を保存できます。それらは、&lt;code&gt;FFI::VariadicInvoker&lt;/code&gt; または &lt;code&gt;FFI::Function&lt;/code&gt; です&lt;/li&gt;
&lt;li&gt;
&lt;code&gt;FFI::Library＃ffi_libraries&lt;/code&gt;を呼び出してネイティブライブラリを表す&lt;code&gt;FFI::DynamicLibrary&lt;/code&gt;オブジェクトの配列を取得し、正しいものを選択してから、&lt;code&gt;FFI::DynamicLibrary＃find_function&lt;/code&gt;を呼び出して関数を表す&lt;code&gt;FFI::Symbol&lt;/code&gt;を取得できます。これはもっと複雑ですが、他の誰かが書いたFFIラッパーを使用していて、それを変更するのが簡単でない場合は適切かもしれません。&lt;/li&gt;
&lt;/ul&gt;

&lt;div class="code-frame" data-lang="ruby"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;LibWrap&lt;/span&gt;
  &lt;span class="kp"&gt;extend&lt;/span&gt; &lt;span class="no"&gt;FFI&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Library&lt;/span&gt;
  &lt;span class="n"&gt;ffi_lib&lt;/span&gt; &lt;span class="s2"&gt;"some_lib.so"&lt;/span&gt;
  &lt;span class="n"&gt;attach_function&lt;/span&gt; &lt;span class="ss"&gt;:do_work&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:pointer&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="ss"&gt;:int&lt;/span&gt;

  &lt;span class="no"&gt;Completer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;attach_function&lt;/span&gt; &lt;span class="ss"&gt;:completer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:pointer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:long&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:uint8&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="ss"&gt;:void&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="no"&gt;LibWrap&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;do_work&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;LibWrap&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Completer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="no"&gt;LibWrap&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;do_work&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="no"&gt;LibWrap&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;ffi_libraries&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nf"&gt;find_function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'completer'&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2&gt;
&lt;span id="gil" class="fragment"&gt;&lt;/span&gt;&lt;a href="#gil"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;GIL&lt;/h2&gt;

&lt;p&gt;MRI / CRubyの実装では、GILまたはGVLと呼ばれるグローバルロックを使用します。Rubyコードが実行されるたびにロックされます。真の並列処理を可能にするには、リリースする必要があります。ただし、GILがリリースされると、Rubyコードを実行できなくなります。&lt;/p&gt;

&lt;p&gt;デフォルトでは、C関数へのすべての呼び出しはGILをロックしたままにするため、他のRubyスレッドの実行をブロックします。関数が高速で外部リソースを待たない場合、これは問題ありません。ただし、関数がIOを待機するか、大規模な計算を行う場合は、他のRubyスレッドを引き続き実行することが望ましいです。&lt;/p&gt;

&lt;p&gt;GILを解放すると、Rubyランタイムは、C関数の実行中に別のスレッドの実行を（潜在的に）スケジュールできるようになります。幸い、FFI::Functionを使用すると、コールバックを&lt;code&gt;blocking: true&lt;/code&gt;としてマークすることで、オプションでGILを解放できます。この設定は、Rubyからネイティブへの呼び出しにのみ影響します。ネイティブからルビーへの呼び出しには影響しません。&lt;/p&gt;

&lt;div class="code-frame" data-lang="ruby"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;LibWrap&lt;/span&gt;
  &lt;span class="kp"&gt;extend&lt;/span&gt; &lt;span class="no"&gt;FFI&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Library&lt;/span&gt;
  &lt;span class="n"&gt;ffi_lib&lt;/span&gt; &lt;span class="s2"&gt;"some_lib.so"&lt;/span&gt;

  &lt;span class="n"&gt;attach_function&lt;/span&gt; &lt;span class="ss"&gt;:long_running_function&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[],&lt;/span&gt; &lt;span class="ss"&gt;:int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;blocking: &lt;/span&gt;&lt;span class="kp"&gt;true&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;両方の種類のセットアップのコードパスを見ると、内部で何が起こっているのかが明らかになります。&lt;/p&gt;

&lt;h3&gt;
&lt;span id="ffifunctionblocking-false-rubyからネイティブメソッド呼び出し" class="fragment"&gt;&lt;/span&gt;&lt;a href="#ffifunctionblocking-false-ruby%E3%81%8B%E3%82%89%E3%83%8D%E3%82%A4%E3%83%86%E3%82%A3%E3%83%96%E3%83%A1%E3%82%BD%E3%83%83%E3%83%89%E5%91%BC%E3%81%B3%E5%87%BA%E3%81%97"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;FFI::Function、、blocking: false Rubyからネイティブメソッド呼び出し&lt;/h3&gt;

&lt;div class="code-frame" data-lang="text"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;Ruby -&amp;gt;
  FFI stub for parameter conversion -&amp;gt;  
  call native function -&amp;gt;
  FFI stub for result conversion -&amp;gt;
Ruby
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3&gt;
&lt;span id="ffifunction-blocking-true-ruby-to-native-method-call" class="fragment"&gt;&lt;/span&gt;&lt;a href="#ffifunction-blocking-true-ruby-to-native-method-call"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;FFI::Function, blocking: true, Ruby to native method call&lt;/h3&gt;

&lt;div class="code-frame" data-lang="text"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;Ruby -&amp;gt; 
  FFI stub for parameter conversion -&amp;gt; 
  release GIL -&amp;gt;
  call native function -&amp;gt; 
  reacquire GIL -&amp;gt;
  FFI stub for result conversion -&amp;gt;
Ruby
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Callback Proc&lt;br&gt;
Callback Procs always follow this code path.&lt;/p&gt;

&lt;div class="code-frame" data-lang="text"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;Ruby -&amp;gt; FFI callback stub -&amp;gt;
  if thread.has_gil?
    convert parameters to Ruby
    call Ruby
    convert results to native

  elsif thread.is_ruby_thread?
    acquire GIL
    convert parameters to Ruby
    call Ruby
    convert results to native
    release GIL

  else # not a Ruby-owned thread
    start a new ruby thread
    bundle up FFI data and pass it to the new thread
    convert parameters to Ruby
    call Ruby on this dedicated thread
    convert results to native
    bundle up Ruby result and pass it to the origin thread
    terminate the ruby thread

  end
-&amp;gt; native code
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1&gt;
&lt;span id="複数の署名を持つ関数" class="fragment"&gt;&lt;/span&gt;&lt;a href="#%E8%A4%87%E6%95%B0%E3%81%AE%E7%BD%B2%E5%90%8D%E3%82%92%E6%8C%81%E3%81%A4%E9%96%A2%E6%95%B0"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;複数の署名を持つ関数&lt;/h1&gt;

&lt;p&gt;この手法は、アタッチしようとしているネイティブ関数に複数のシグネチャがある場合に役立つことがあります。たとえば、Win32 API関数SendMessage（lParam）の最後の引数は、：longまたは：pointerのいずれかになります。このネイティブ関数をさまざまな種類の引数で呼び出すことができることをFFIに直接伝えることはできないため、この関数をさまざまな名前と署名で2回アタッチしてから、引数の種類を確認し、適切な署名を使用して添付関数に呼び出しをルーティングする便利なメソッドを作成する必要があります：&lt;/p&gt;

&lt;div class="code-frame" data-lang="ruby"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;'ffi'&lt;/span&gt; 

&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;Win&lt;/span&gt; 
  &lt;span class="kp"&gt;extend&lt;/span&gt; &lt;span class="no"&gt;FFI&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Library&lt;/span&gt; 
  &lt;span class="n"&gt;ffi_lib&lt;/span&gt; &lt;span class="s1"&gt;'user32'&lt;/span&gt; 
  &lt;span class="n"&gt;ffi_convention&lt;/span&gt; &lt;span class="ss"&gt;:stdcall&lt;/span&gt; 

  &lt;span class="n"&gt;attach_function&lt;/span&gt; &lt;span class="ss"&gt;:SendMessageLong&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:SendMessage&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:ulong&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:uint&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:uint&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:long&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="ss"&gt;:int&lt;/span&gt;
  &lt;span class="n"&gt;attach_function&lt;/span&gt; &lt;span class="ss"&gt;:SendMessagePointer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:SendMessage&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:ulong&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:uint&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:uint&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:pointer&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="ss"&gt;:int&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;SendMessage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;handle&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;w_param&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;l_param&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="n"&gt;l_param&lt;/span&gt;
      &lt;span class="k"&gt;when&lt;/span&gt; &lt;span class="no"&gt;Fixnum&lt;/span&gt;
        &lt;span class="no"&gt;SendMessageLong&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;handle&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;w_param&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;l_param&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="k"&gt;else&lt;/span&gt;
        &lt;span class="no"&gt;SendMessagePointer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;handle&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;w_param&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;l_param&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;  
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;型チェックは、必要に応じて複雑にすることができます。上記の例では、ライトチェックのみを行い、FixNum lParamを使用して呼び出しをSendMessageLongにルーティングし、その他すべてをポインター型のSendMessagePointerにスローします。たとえば、SendMessagePointerに呼び出しをルーティングする前に、lParamが：pointerのように動作することを確認してください。これを行う方法の1つは、lParamが：address（FFI :: Pointerサブクラスまたはカスタムポインタークラスのキーインターフェイス）に応答するかどうかを確認することです。&lt;/p&gt;
</content>
    <published>2020-12-02T11:51:46Z</published>
    <updated>2020-12-02T11:58:04Z</updated>
    <author>
      <name>kojix2</name>
    </author>
  </entry>
  <entry>
    <id>tag:qiita.com,2005:PublicArticle/1347345</id>
    <published>2020-12-01T18:17:16+09:00</published>
    <updated>2020-12-01T18:21:31+09:00</updated>
    <link rel="alternate" type="text/html" href="https://qiita.com/kojix2/items/af002097ac12117f458a"/>
    <url>https://qiita.com/kojix2/items/af002097ac12117f458a</url>
    <title>SAM形式とBAM形式</title>
    <content type="html">
&lt;h1&gt;
&lt;span id="はじめに" class="fragment"&gt;&lt;/span&gt;&lt;a href="#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;はじめに&lt;/h1&gt;

&lt;p&gt;SAM/BAM ファイル形式についてごく簡単にまとめます。&lt;/p&gt;

&lt;h1&gt;
&lt;span id="sambam形式とは" class="fragment"&gt;&lt;/span&gt;&lt;a href="#sambam%E5%BD%A2%E5%BC%8F%E3%81%A8%E3%81%AF"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;SAM/BAM形式とは&lt;/h1&gt;

&lt;p&gt;&lt;a href="https://github.com/lh3/bwa" rel="nofollow noopener" target="_blank"&gt;bwa&lt;/a&gt;, STAR, hisat2 などのalignerで、FASTQファイルをリファレンスゲノムにマッピングした際に生成されるファイルです。Sam(Sequence Alignment/Map)はテキスト形式で、Bam(Binary Alignment/Map)はバイナリ形式です。&lt;/p&gt;

&lt;h1&gt;
&lt;span id="公式の仕様書" class="fragment"&gt;&lt;/span&gt;&lt;a href="#%E5%85%AC%E5%BC%8F%E3%81%AE%E4%BB%95%E6%A7%98%E6%9B%B8"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;公式の仕様書&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://samtools.github.io/hts-specs/" rel="nofollow noopener" target="_blank"&gt;SAM/BAM and related specifications&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://samtools.github.io/hts-specs/SAMv1.pdf" rel="nofollow noopener" target="_blank"&gt;SAM v1&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/SAM_(file_format)" rel="nofollow noopener" target="_blank"&gt;SAM(file format) - Wikipedia&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;SAM/BAMは &lt;a href="https://github.com/lh3/bwa" rel="nofollow noopener" target="_blank"&gt;BWA&lt;/a&gt; や &lt;a href="https://github.com/samtools/samtools" rel="nofollow noopener" target="_blank"&gt;Samtools&lt;/a&gt; の開発者の &lt;a href="https://en.wikipedia.org/wiki/Heng_Li" rel="nofollow noopener" target="_blank"&gt;Heng Li&lt;/a&gt; さんが策定したファイル形式です。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;元論文 &lt;a href="https://www.ncbi.nlm.nih.gov/pmc/articles/PMC2723002/" rel="nofollow noopener" target="_blank"&gt;The Sequence Alignment/Map format and SAMtools&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;Heng Li's blog &lt;a href="https://lh3.github.io/2018/12/21/sambamsamtools-is-10-years-old" rel="nofollow noopener" target="_blank"&gt;SAM/BAM/samtools is 10 years old &lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;
&lt;span id="公式によるサンプル" class="fragment"&gt;&lt;/span&gt;&lt;a href="#%E5%85%AC%E5%BC%8F%E3%81%AB%E3%82%88%E3%82%8B%E3%82%B5%E3%83%B3%E3%83%97%E3%83%AB"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;公式によるサンプル&lt;/h3&gt;

&lt;p&gt;アラインメントが以下のようだった場合&lt;/p&gt;

&lt;div class="code-frame" data-lang="text"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;Coor     12345678901234  5678901234567890123456789012345
ref      AGCATGTTAGATAA**GATAGCTGTGCTAGTAGGCAGTCAGCGCCAT
+r001/1        TTAGATAAAGGATA*CTG
+r002         aaaAGATAA*GGATA
+r003       gcctaAGCTAA
+r004                     ATAGCT..............TCAGC
-r003                            ttagctTAGGC
-r001/2                                        CAGCGGCAT
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;対応するSamファイルは以下のようになる&lt;/p&gt;

&lt;div class="code-frame" data-lang="text"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;@HD VN:1.6 SO:coordinate
@SQ SN:ref LN:45
r001   99 ref  7 30 8M2I4M1D3M = 37  39 TTAGATAAAGGATACTG *
r002    0 ref  9 30 3S6M1P1I4M *  0   0 AAAAGATAAGGATA    *
r003    0 ref  9 30 5S6M       *  0   0 GCCTAAGCTAA       * SA:Z:ref,29,-,6H5M,17,0;
r004    0 ref 16 30 6M14N5M    *  0   0 ATAGCTTCAGC       *
r003 2064 ref 29 17 6H5M       *  0   0 TAGGC             * SA:Z:ref,9,+,5S6M,30,1;
r001  147 ref 37 30 9M         =  7 -39 CAGCGGCAT         * NM:i:
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1&gt;
&lt;span id="sambam形式" class="fragment"&gt;&lt;/span&gt;&lt;a href="#sambam%E5%BD%A2%E5%BC%8F"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;SAM/BAM形式&lt;/h1&gt;

&lt;p&gt;SAMはテキスト形式、BAMはバイナリ形式である。&lt;/p&gt;

&lt;h2&gt;
&lt;span id="各カラムの意味" class="fragment"&gt;&lt;/span&gt;&lt;a href="#%E5%90%84%E3%82%AB%E3%83%A9%E3%83%A0%E3%81%AE%E6%84%8F%E5%91%B3"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;各カラムの意味&lt;/h2&gt;

&lt;p&gt;1〜11は必須カラムで、項目がない場合は * または 0 を記入する。&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;カラム番号&lt;/th&gt;
&lt;th&gt;カラム名&lt;/th&gt;
&lt;th&gt;タイプ&lt;/th&gt;
&lt;th&gt;意味&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;QNAME&lt;/td&gt;
&lt;td&gt;String&lt;/td&gt;
&lt;td&gt;リードの名前&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;FLAG&lt;/td&gt;
&lt;td&gt;Int&lt;/td&gt;
&lt;td&gt;アライメントの結果（後述）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;RNAME&lt;/td&gt;
&lt;td&gt;String&lt;/td&gt;
&lt;td&gt;リファレンスゲノムの名前　染色体番号など&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;POS&lt;/td&gt;
&lt;td&gt;Int&lt;/td&gt;
&lt;td&gt;リードがマップされた開始位置&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;MAPQ&lt;/td&gt;
&lt;td&gt;Int&lt;/td&gt;
&lt;td&gt;マッピングクオリティスコア&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;CIGAR&lt;/td&gt;
&lt;td&gt;String&lt;/td&gt;
&lt;td&gt;マッピング状況（後述）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;RNEXT&lt;/td&gt;
&lt;td&gt;String&lt;/td&gt;
&lt;td&gt;ペアエンドの場合、相手方のリード名&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;PNEXT&lt;/td&gt;
&lt;td&gt;Int&lt;/td&gt;
&lt;td&gt;ペアエンドの場合、相手方のマップされた開始位置&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;TLEN&lt;/td&gt;
&lt;td&gt;Int&lt;/td&gt;
&lt;td&gt;ペアエンドの場合、インサートの長さ&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;SEQ&lt;/td&gt;
&lt;td&gt;String&lt;/td&gt;
&lt;td&gt;塩基配列データ&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;11&lt;/td&gt;
&lt;td&gt;QUAL&lt;/td&gt;
&lt;td&gt;String&lt;/td&gt;
&lt;td&gt;Sequence Quality&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;12&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;マッピングソフトによる追加情報&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;参考：Dr. Bonoの生命科学データ解析&lt;/p&gt;

&lt;h2&gt;
&lt;span id="ヘッダー部分" class="fragment"&gt;&lt;/span&gt;&lt;a href="#%E3%83%98%E3%83%83%E3%83%80%E3%83%BC%E9%83%A8%E5%88%86"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;ヘッダー部分&lt;/h2&gt;

&lt;p&gt;「@」で始まるタグのあとに、アラインメントに関する情報が記載されている。&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="/HD" class="user-mention js-hovercard" title="HD" data-hovercard-target-type="user" data-hovercard-target-name="HD"&gt;@HD&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;ヘッダー&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;VN&lt;/td&gt;
&lt;td&gt;SAMフォーマットのバージョン&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;SO&lt;/td&gt;
&lt;td&gt;アライメントのソート順。unknown, unsorted, queryname または coordinate のいずれか記載される&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;GO&lt;/td&gt;
&lt;td&gt;グループ。none, query(QNAMEによって), reference(RNAME/POSによって)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;SS&lt;/td&gt;
&lt;td&gt;Sub-sorting order&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="/SQ" class="user-mention js-hovercard" title="SQ" data-hovercard-target-type="user" data-hovercard-target-name="SQ"&gt;@SQ&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;リファレンス&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;SN&lt;/td&gt;
&lt;td&gt;リファレンス配列の名前&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;LN&lt;/td&gt;
&lt;td&gt;リファレンス配列の長さ&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;AH&lt;/td&gt;
&lt;td&gt;Indicates that this sequence is an alternate locus.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;AN&lt;/td&gt;
&lt;td&gt;Alternative reference sequence names.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;AS&lt;/td&gt;
&lt;td&gt;ゲノムアセンブリーID&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;DS&lt;/td&gt;
&lt;td&gt;説明(Description)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;M5&lt;/td&gt;
&lt;td&gt;MD5 checksum&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;SP&lt;/td&gt;
&lt;td&gt;生物種&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;TP&lt;/td&gt;
&lt;td&gt;分子トポロジー linear circular&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;UR&lt;/td&gt;
&lt;td&gt;配列のURI http ftp&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="/RG" class="user-mention js-hovercard" title="RG" data-hovercard-target-type="user" data-hovercard-target-name="RG"&gt;@RG&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;リードグループ&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;ID&lt;/td&gt;
&lt;td&gt;リードグループID&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;BC&lt;/td&gt;
&lt;td&gt;バーコード配列&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;CN&lt;/td&gt;
&lt;td&gt;sequencing center&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;DS&lt;/td&gt;
&lt;td&gt;説明(Description)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;DT&lt;/td&gt;
&lt;td&gt;日付&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;FO&lt;/td&gt;
&lt;td&gt;Flow order&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;KS&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;LB&lt;/td&gt;
&lt;td&gt;Library&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;PG&lt;/td&gt;
&lt;td&gt;使用したプログラム&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;PI&lt;/td&gt;
&lt;td&gt;Predicted median insert size&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;PL&lt;/td&gt;
&lt;td&gt;プラットフォーム CAPILLARY LS454 ILLUMINA SOLID HELICOS IONTORRENT ONT PACBIO&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;PM&lt;/td&gt;
&lt;td&gt;プラットフォーム（自由記述）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;PU&lt;/td&gt;
&lt;td&gt;Platform unit&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;SM&lt;/td&gt;
&lt;td&gt;サンプル&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href="/PG" class="user-mention js-hovercard" title="PG" data-hovercard-target-type="user" data-hovercard-target-name="PG"&gt;@PG&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;プログラム&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;PN&lt;/td&gt;
&lt;td&gt;プログラムの名前&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;CL&lt;/td&gt;
&lt;td&gt;使用したコマンド&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;DS&lt;/td&gt;
&lt;td&gt;説明(Description)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;VN&lt;/td&gt;
&lt;td&gt;プログラムのバージョン&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;ul&gt;
&lt;li&gt;参照元　&lt;a href="https://bi.biopapyrus.jp/format/sam.html" class="autolink" rel="nofollow noopener" target="_blank"&gt;https://bi.biopapyrus.jp/format/sam.html&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;
&lt;span id="flag" class="fragment"&gt;&lt;/span&gt;&lt;a href="#flag"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;Flag&lt;/h2&gt;

&lt;p&gt;&lt;a href="https://ja.wikipedia.org/wiki/%E3%83%93%E3%83%83%E3%83%88%E3%83%95%E3%82%A3%E3%83%BC%E3%83%AB%E3%83%89" rel="nofollow noopener" target="_blank"&gt;ビットフィールド&lt;/a&gt;&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Integer&lt;/th&gt;
&lt;th&gt;Binary&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;000000000001&lt;/td&gt;
&lt;td&gt;ペアリードがある&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;000000000010&lt;/td&gt;
&lt;td&gt;両方マップされている&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;000000000100&lt;/td&gt;
&lt;td&gt;read1 はマップされていない&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;000000001000&lt;/td&gt;
&lt;td&gt;read2（相方） はマップされていない&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;16&lt;/td&gt;
&lt;td&gt;000000010000&lt;/td&gt;
&lt;td&gt;read1 は逆相補鎖にマップされている&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;32&lt;/td&gt;
&lt;td&gt;000000100000&lt;/td&gt;
&lt;td&gt;read2（相方） は逆相補鎖にマップされてる&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;64&lt;/td&gt;
&lt;td&gt;000001000000&lt;/td&gt;
&lt;td&gt;read1 である&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;128&lt;/td&gt;
&lt;td&gt;000010000000&lt;/td&gt;
&lt;td&gt;read2 である&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;256&lt;/td&gt;
&lt;td&gt;000100000000&lt;/td&gt;
&lt;td&gt;複数個所にマップされている&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;512&lt;/td&gt;
&lt;td&gt;001000000000&lt;/td&gt;
&lt;td&gt;マッピングＱＶが低い&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1024&lt;/td&gt;
&lt;td&gt;010000000000&lt;/td&gt;
&lt;td&gt;PCR or optical duplicate&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2048&lt;/td&gt;
&lt;td&gt;100000000000&lt;/td&gt;
&lt;td&gt;supplementary alignment (e.g. aligner specific, could be a portion of a split read or a tied region)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;ul&gt;
&lt;li&gt;参照元　&lt;a href="http://crusade1096.web.fc2.com/sam.html" class="autolink" rel="nofollow noopener" target="_blank"&gt;http://crusade1096.web.fc2.com/sam.html&lt;/a&gt; （一部改変）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;フラグの意味が知りたい場合下記の &lt;code&gt;samtools&lt;/code&gt; のコマンドが使用できる。&lt;/p&gt;

&lt;div class="code-frame" data-lang="sh"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;samtools flags 2064
&lt;span class="c"&gt;# 0x810 2064    REVERSE,SUPPLEMENTARY&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2&gt;
&lt;span id="cigar" class="fragment"&gt;&lt;/span&gt;&lt;a href="#cigar"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;CIGAR&lt;/h2&gt;

&lt;p&gt;CIGARはinsertion, deletion, softclipなどの位置を表す。&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;M&lt;/td&gt;
&lt;td&gt;参照配列に張り付いたリード。ただし、個々の塩基が参照配列と同じかどうかは感知しない。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;I&lt;/td&gt;
&lt;td&gt;挿入。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;D&lt;/td&gt;
&lt;td&gt;欠失。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;N&lt;/td&gt;
&lt;td&gt;間が飛んでいる。mRNAではイントロンがメイン。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;S&lt;/td&gt;
&lt;td&gt;ソフトクリップ。張り付いていない端っこのリード。何が張り付いていないのかは明記されている。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;H&lt;/td&gt;
&lt;td&gt;ハードクリップ。張り付いていない端っこのリード。何が張り付いていないのかは不明。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;P&lt;/td&gt;
&lt;td&gt;padding。張り付いたリードの側で何かの欠失が起こっている。de novoがメイン？&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;=&lt;/td&gt;
&lt;td&gt;参照配列に張り付いたリードのうち、参照配列と同じ塩基。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;X&lt;/td&gt;
&lt;td&gt;参照配列に張り付いたリードのうち、参照配列とは違う塩基。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;ul&gt;
&lt;li&gt;引用参照元 &lt;a href="https://linux-bio.com/sam_format_cigar/" rel="nofollow noopener" target="_blank"&gt;SAM Formatのcigar列の読み方(samtoolsとか)&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;
&lt;span id="基本操作" class="fragment"&gt;&lt;/span&gt;&lt;a href="#%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;基本操作&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;引用元 &lt;a href="http://rnakato.hatenablog.jp/entry/2017/11/08/113245" rel="nofollow noopener" target="_blank"&gt;SAMtoolsワンライナー覚書 - Palmsonntagmorgen&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;samtools&lt;/code&gt; は &lt;code&gt;-@ 4&lt;/code&gt; などと書くとマルチコアで動いてくれることが多い。&lt;/p&gt;

&lt;p&gt;SAM → BAM&lt;/p&gt;

&lt;div class="code-frame" data-lang="text"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;samtools view -bS file.sam &amp;gt; file.bam
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;BAM → SAM&lt;/p&gt;

&lt;div class="code-frame" data-lang="text"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;samtools view sample.bam &amp;gt; sample.sam
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;BAMファイルをソート&lt;/p&gt;

&lt;div class="code-frame" data-lang="text"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;samtools sort sample.bam &amp;gt; sample.sort.bam
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;BAM indexを作成&lt;/p&gt;

&lt;div class="code-frame" data-lang="text"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;samtools index sample.sort.bam
&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1&gt;
&lt;span id="sambam-関連ツール" class="fragment"&gt;&lt;/span&gt;&lt;a href="#sambam-%E9%96%A2%E9%80%A3%E3%83%84%E3%83%BC%E3%83%AB"&gt;&lt;i class="fa fa-link"&gt;&lt;/i&gt;&lt;/a&gt;SAM/BAM 関連ツール&lt;/h1&gt;

&lt;p&gt;日本語情報では上坂さんのサイトの情報が圧倒的&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://kazumaxneo.hatenablog.com/entry/2017/06/19/225006" rel="nofollow noopener" target="_blank"&gt;sam/bam関係のツールまとめ - macでインフォマティクス&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;この記事は以上です。&lt;br&gt;
（この記事は17日のアドベントカレンダーのための下準備です）&lt;/p&gt;
</content>
    <published>2020-12-01T18:17:16Z</published>
    <updated>2020-12-01T18:21:31Z</updated>
    <author>
      <name>kojix2</name>
    </author>
  </entry>
</feed>
